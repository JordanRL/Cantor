{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".katex img { object-fit: fill; padding: unset; display: block; position: absolute; width: 100%; height: inherit; } Using This Documentation A best effort is made to keep this documentation current, and the entire documentation is reviewed before every tagged release, however the documentation under v:latest may at times be out of date or incomplete. Why Use Fermat? To understand why this library might be useful in comparison to alternatives, please see the Fermat vs. Alternatives page. Info Boxes Additional information is provided throughout this documentation using color coded information boxes. These are the styles used and what they are used for. Notes This type of box is used to provide additional notes about a topic that may be rare use cases, or more detailed technical information that is not relevant to all readers of this documentation. Tips This type of box is used to give helpful tips on using the code described in the section where it appears. Sometimes this may be tips on architecture, while others it could be a tip on how to improve performance or help accomplish a common task. Examples This type of box is used to provide examples of code, inputs, and outputs that illustrate a point which may be difficult to explain using just words. See Also This type of box is used to point you towards other parts of this documentation, or documentation elsewhere on the internet, which might provide more information on the section being described. Potential Bugs This type of box is used to provide a warning about common ways a programmer using this library might introduce a bug into their software through this library. It often details potentially unexpected type conversions, assumptions made that may not be obvious, or limitations that are inherent to this library or to PHP. Cautions This type of box is used to caution the developer about incorrect usage of the section being detailed. It is used when the incorrect usage will not result in exceptions or unexpected results, but instead might simply have undesirable side effects. Warnings This type of box is used to warn the developer about incorrect usage of the section being detailed. It is used when the incorrect usage will result in exceptions, but not unexpected results. Danger This type of box is used to alert the developer about potentially hard to find bugs that will result from an incorrect usage of the section being detailed. It is used when the incorrect usage will result in unexpected result without any exceptions or errors. What This Library Is For Consistent arbitrary scale math Provides a consistent way to perform arbitrary scale math without making it easy to accidentally use PHP features (such as arithmetic operators or built in functions) that will reduce scale by casting to native int or float types. This is accomplished by providing an arbitrary scale implementation of all math functions which might be performed on a variable with the integer or float types. Complex math functions Enables the use of common complex math tasks, such as working with basic statistics functions, while still preserving arbitrary scale. Non-Integer & non-float number types Provides a framework for working with non-integer and non-float math concepts such as fractions, coordinates, imaginary numbers, and complex numbers. Abstraction of math concepts Provides a consistent abstraction for nearly any math concept that is likely to be relevant to a computer program, including many scientific programs. What This Library Is NOT For Extreme Performance While Fermat has different modes that allow you to control performance to a degree, the abstraction and comprehensive nature of the library means that for certain uses, such as working with complex numbers, a large number of object instances may be created temporarily during a calculation, leading to significantly more overhead than using operands directly when doing basic math within common scale limitations. Despite the fact that performance is not a primary goal of this library, it does use built in functions wherever possible (where doing so does not affect scale), and it will utilize the GMP functions, the Decimal extension, and PHP-DS types if those extensions are present in your installation of PHP. Installing these extensions should increase performance in most use-cases. Detailed information about performance can be reviewed in the Performance section. Tip A good way to increase performance is to avoid using imaginary and complex numbers if possible. The actual math involved in calculating simple operations involving these values is algorithmically complex, and leads to much longer execution times. Installing the suggested extensions will also help improve performance, in some situations quite significantly. Other Extensions Like many programs, this library's performance suffers enormously if xDebug is enabled. This can lead to execution times of more than one second for a single operation on complex numbers, making them almost totally unusable for the web. To avoid this, make sure that your production environment does not have xDebug enabled. Integration With Other Math Libraries Everything is self-contained within this library, and if you need to use another math library or a built-in math function to accomplish something, please create a GitHub issue so that it can be added to the library. Keep in mind that this library is not necessarily designed to guarantee compatibility. That said, this library does offer ways for you to integrate. The state of all objects is available for reading at all times enabling you to put data into other libraries or functions, and the classes are all left open for extension. The references within the library are almost all to a base abstract class or interface, making it easier for a developer to extend a class with their own code. Limitations Developers using this library should be aware of the following limitations which may lead to unexpected results. Extreme Scale While this library can theoretically handle scales on all operations up to 2 63 2^{63} 2 63 digits, in practice there are many operations in this library that have practical limits because of execution time. For instance, while the library would faithfully collect the first 10,000 digits of sin \u2061 ( 1 ) \\sin(1) sin ( 1 ) , doing so may take prohibitively long, and depending on configuration and environment, the process may be killed before completion as a 'hung' process. There are also several features in this library that by the nature of the math behind them can lead to infinite loops with the wrong inputs. While some basic measures exist within the library to detect and exit these situations with a thrown exception, doing so comprehensively is an example of the halting problem. This should not occur without direct calls to these areas, such as SeriesProvider::maclaurenSeries() . Avoid Direct Usage While the SeriesProvider methods are public, and can certainly be used directly, the internal workings of the functions are complicated to understand and simple to get wrong. In general, you should try to use consumers of the SeriesProvider first, such as the various distributions, or the StatsProvider . For this reason, you should limit your requested scale to the smallest value which will still work for your intended application. Some Types of Math Require Assumptions Some areas of math are ambiguously defined, depending on the exact axioms used. More generally, there are some types of calculations which give consistent behavior for a variety of axioms and mappings, or for which there is no consistent behavior defined within mathematics. This is most obvious in the arc functions, such as arctan \u2061 ( x ) \\arctan(x) arctan ( x ) . However, other areas make assumptions that may not be entirely clear at first. For Example Calling isEqual() on a ComplexNumber will return false unless it is being compared to another ComplexNumber that has the same values for its real and imaginary part. More surprisingly perhaps, ComplexNumber objects do not have any of the GreaterThan or LessThan functions, as inequality comparison is poorly defined even between two complex numbers. These peculiarities are documented as accurately as possible in this documentation where they occur. Immutables Are Used Internally While this library provides both Mutable and Immutable versions of its base values, when a new object is generated internally it is nearly always an immutable version. This is to limit the side effects that might occur if object instance zvals that were used internally were changed in a parent scope. Because of this, methods which return a calculated value object always return the Immutable version of that value. For this same reason, most of the time when an object is returned from an internal register, such as with the getNumerator() method on Fraction , any changes to that object will not be reflected in the instance of Fraction that it came from. The exceptions to this are objects which contain a register of registers. An example would be the Matrix class, which internally has an array of NumberCollection objects. To prevent side effects in this situation, a clone is returned instead when the object is accessed with getRow() or getColumn() . However, methods which act as array manipulation tools, such a popRow() and shiftColumn() will return the actual instance, and directly affect the internal data values. This is related to PHP's internal structure of hashtables and zvals, and how these interact with the object model that PHP uses. See Also The PHP Documentation contains examples on the specifics of how objects are passed between scopes. While it isn't exactly the same as passing by reference, it behaves in a very similar way in most situations. See the php.net page for more information. See Also More information about mutable and immutable objects, as well as how they are implemented and used with this library, is available on the Mutable vs. Immutable documentation page. This Library Can't Be Reliably Used With Math Operators Because PHP doesn't allow operator overloading, using the native math operators on Fermat objects directly can very easily result in loss of scale, overflows and underflows, PHP fatal errors (f.e. when the object is in a non-base-10 format), and incorrect calculation (f.e. with complex and imaginary numbers). Non-Base-10 Values With Native Operators Using a value that is in a base larger than base-10 with math operators can result in PHP fatal errors. For instance, the value 15 in base 16 will output the string F . When used with the operator / as the value on the right of the operator, this would result in a \"Division by Zero\" PHP fatal error. This occurs because PHP will attempt to cast the string F to an integer , which will result in the value 0 . Complex Numbers With Native Operators Using a ComplexNumber instance with native operators will throw only a notice and discard the imaginary component, making it very difficult to pin down the source of the incorrect result if notices are not turned on with the E_NOTICE or E_ALL levels in php.ini . 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableComplexNumber ; 4 5 $complexNumber = ImmutableComplexNumber :: makeFromString ( '2+2i' ); 6 7 echo $complexNumber + 2 ; 8 // Prints: 4 9 // Issues: PHP Notice","title":"About Fermat"},{"location":"#using-this-documentation","text":"A best effort is made to keep this documentation current, and the entire documentation is reviewed before every tagged release, however the documentation under v:latest may at times be out of date or incomplete. Why Use Fermat? To understand why this library might be useful in comparison to alternatives, please see the Fermat vs. Alternatives page.","title":"Using This Documentation"},{"location":"#info-boxes","text":"Additional information is provided throughout this documentation using color coded information boxes. These are the styles used and what they are used for. Notes This type of box is used to provide additional notes about a topic that may be rare use cases, or more detailed technical information that is not relevant to all readers of this documentation. Tips This type of box is used to give helpful tips on using the code described in the section where it appears. Sometimes this may be tips on architecture, while others it could be a tip on how to improve performance or help accomplish a common task. Examples This type of box is used to provide examples of code, inputs, and outputs that illustrate a point which may be difficult to explain using just words. See Also This type of box is used to point you towards other parts of this documentation, or documentation elsewhere on the internet, which might provide more information on the section being described. Potential Bugs This type of box is used to provide a warning about common ways a programmer using this library might introduce a bug into their software through this library. It often details potentially unexpected type conversions, assumptions made that may not be obvious, or limitations that are inherent to this library or to PHP. Cautions This type of box is used to caution the developer about incorrect usage of the section being detailed. It is used when the incorrect usage will not result in exceptions or unexpected results, but instead might simply have undesirable side effects. Warnings This type of box is used to warn the developer about incorrect usage of the section being detailed. It is used when the incorrect usage will result in exceptions, but not unexpected results. Danger This type of box is used to alert the developer about potentially hard to find bugs that will result from an incorrect usage of the section being detailed. It is used when the incorrect usage will result in unexpected result without any exceptions or errors.","title":"Info Boxes"},{"location":"#what-this-library-is-for","text":"","title":"What This Library Is For"},{"location":"#consistent-arbitrary-scale-math","text":"Provides a consistent way to perform arbitrary scale math without making it easy to accidentally use PHP features (such as arithmetic operators or built in functions) that will reduce scale by casting to native int or float types. This is accomplished by providing an arbitrary scale implementation of all math functions which might be performed on a variable with the integer or float types.","title":"Consistent arbitrary scale math"},{"location":"#complex-math-functions","text":"Enables the use of common complex math tasks, such as working with basic statistics functions, while still preserving arbitrary scale.","title":"Complex math functions"},{"location":"#non-integer-non-float-number-types","text":"Provides a framework for working with non-integer and non-float math concepts such as fractions, coordinates, imaginary numbers, and complex numbers.","title":"Non-Integer &amp; non-float number types"},{"location":"#abstraction-of-math-concepts","text":"Provides a consistent abstraction for nearly any math concept that is likely to be relevant to a computer program, including many scientific programs.","title":"Abstraction of math concepts"},{"location":"#what-this-library-is-not-for","text":"","title":"What This Library Is NOT For"},{"location":"#extreme-performance","text":"While Fermat has different modes that allow you to control performance to a degree, the abstraction and comprehensive nature of the library means that for certain uses, such as working with complex numbers, a large number of object instances may be created temporarily during a calculation, leading to significantly more overhead than using operands directly when doing basic math within common scale limitations. Despite the fact that performance is not a primary goal of this library, it does use built in functions wherever possible (where doing so does not affect scale), and it will utilize the GMP functions, the Decimal extension, and PHP-DS types if those extensions are present in your installation of PHP. Installing these extensions should increase performance in most use-cases. Detailed information about performance can be reviewed in the Performance section. Tip A good way to increase performance is to avoid using imaginary and complex numbers if possible. The actual math involved in calculating simple operations involving these values is algorithmically complex, and leads to much longer execution times. Installing the suggested extensions will also help improve performance, in some situations quite significantly. Other Extensions Like many programs, this library's performance suffers enormously if xDebug is enabled. This can lead to execution times of more than one second for a single operation on complex numbers, making them almost totally unusable for the web. To avoid this, make sure that your production environment does not have xDebug enabled.","title":"Extreme Performance"},{"location":"#integration-with-other-math-libraries","text":"Everything is self-contained within this library, and if you need to use another math library or a built-in math function to accomplish something, please create a GitHub issue so that it can be added to the library. Keep in mind that this library is not necessarily designed to guarantee compatibility. That said, this library does offer ways for you to integrate. The state of all objects is available for reading at all times enabling you to put data into other libraries or functions, and the classes are all left open for extension. The references within the library are almost all to a base abstract class or interface, making it easier for a developer to extend a class with their own code.","title":"Integration With Other Math Libraries"},{"location":"#limitations","text":"Developers using this library should be aware of the following limitations which may lead to unexpected results.","title":"Limitations"},{"location":"#extreme-scale","text":"While this library can theoretically handle scales on all operations up to 2 63 2^{63} 2 63 digits, in practice there are many operations in this library that have practical limits because of execution time. For instance, while the library would faithfully collect the first 10,000 digits of sin \u2061 ( 1 ) \\sin(1) sin ( 1 ) , doing so may take prohibitively long, and depending on configuration and environment, the process may be killed before completion as a 'hung' process. There are also several features in this library that by the nature of the math behind them can lead to infinite loops with the wrong inputs. While some basic measures exist within the library to detect and exit these situations with a thrown exception, doing so comprehensively is an example of the halting problem. This should not occur without direct calls to these areas, such as SeriesProvider::maclaurenSeries() . Avoid Direct Usage While the SeriesProvider methods are public, and can certainly be used directly, the internal workings of the functions are complicated to understand and simple to get wrong. In general, you should try to use consumers of the SeriesProvider first, such as the various distributions, or the StatsProvider . For this reason, you should limit your requested scale to the smallest value which will still work for your intended application.","title":"Extreme Scale"},{"location":"#some-types-of-math-require-assumptions","text":"Some areas of math are ambiguously defined, depending on the exact axioms used. More generally, there are some types of calculations which give consistent behavior for a variety of axioms and mappings, or for which there is no consistent behavior defined within mathematics. This is most obvious in the arc functions, such as arctan \u2061 ( x ) \\arctan(x) arctan ( x ) . However, other areas make assumptions that may not be entirely clear at first. For Example Calling isEqual() on a ComplexNumber will return false unless it is being compared to another ComplexNumber that has the same values for its real and imaginary part. More surprisingly perhaps, ComplexNumber objects do not have any of the GreaterThan or LessThan functions, as inequality comparison is poorly defined even between two complex numbers. These peculiarities are documented as accurately as possible in this documentation where they occur.","title":"Some Types of Math Require Assumptions"},{"location":"#immutables-are-used-internally","text":"While this library provides both Mutable and Immutable versions of its base values, when a new object is generated internally it is nearly always an immutable version. This is to limit the side effects that might occur if object instance zvals that were used internally were changed in a parent scope. Because of this, methods which return a calculated value object always return the Immutable version of that value. For this same reason, most of the time when an object is returned from an internal register, such as with the getNumerator() method on Fraction , any changes to that object will not be reflected in the instance of Fraction that it came from. The exceptions to this are objects which contain a register of registers. An example would be the Matrix class, which internally has an array of NumberCollection objects. To prevent side effects in this situation, a clone is returned instead when the object is accessed with getRow() or getColumn() . However, methods which act as array manipulation tools, such a popRow() and shiftColumn() will return the actual instance, and directly affect the internal data values. This is related to PHP's internal structure of hashtables and zvals, and how these interact with the object model that PHP uses. See Also The PHP Documentation contains examples on the specifics of how objects are passed between scopes. While it isn't exactly the same as passing by reference, it behaves in a very similar way in most situations. See the php.net page for more information. See Also More information about mutable and immutable objects, as well as how they are implemented and used with this library, is available on the Mutable vs. Immutable documentation page.","title":"Immutables Are Used Internally"},{"location":"#this-library-cant-be-reliably-used-with-math-operators","text":"Because PHP doesn't allow operator overloading, using the native math operators on Fermat objects directly can very easily result in loss of scale, overflows and underflows, PHP fatal errors (f.e. when the object is in a non-base-10 format), and incorrect calculation (f.e. with complex and imaginary numbers). Non-Base-10 Values With Native Operators Using a value that is in a base larger than base-10 with math operators can result in PHP fatal errors. For instance, the value 15 in base 16 will output the string F . When used with the operator / as the value on the right of the operator, this would result in a \"Division by Zero\" PHP fatal error. This occurs because PHP will attempt to cast the string F to an integer , which will result in the value 0 . Complex Numbers With Native Operators Using a ComplexNumber instance with native operators will throw only a notice and discard the imaginary component, making it very difficult to pin down the source of the incorrect result if notices are not turned on with the E_NOTICE or E_ALL levels in php.ini . 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableComplexNumber ; 4 5 $complexNumber = ImmutableComplexNumber :: makeFromString ( '2+2i' ); 6 7 echo $complexNumber + 2 ; 8 // Prints: 4 9 // Issues: PHP Notice","title":"This Library Can't Be Reliably Used With Math Operators"},{"location":"fermat-vs-alternatives/","text":".katex img { object-fit: fill; padding: unset; display: block; position: absolute; width: 100%; height: inherit; } Comparing Fermat To Alternatives This page covers the situations in which Fermat provides clear advantages over alternative ways to get arbitrary precision math in PHP. Advantages Compared To Extensions There are several advantages to using Fermat compared to the two arbitrary precision extensions (ext-bcmath and ext-decimal) directly. Support For BCMath Is Already Part Of Fermat At its core, Fermat utilizes the BCMath extension (which is included by default in modern installations of PHP) to perform the base calculations. You don't gain anything by using the BCMath library directly, as this would result in needing to manually and directly manage things like changes in scale. All of the BCMath operations are still accessible using Fermat with the ArithmeticProvider , which functions as a formatting wrapper for the BCMath library. Fermat Provides More Complex Math Operations While ext-bcmath and ext-decimal provide the speed of a PHP extension, this benefit only applies when performing simple arithmetic. When such simple operations are being performed, Fermat is similarly fast. The power of Fermat is its support for both arbitrary precision and more complex operations, such as basic , hyperbolic , and inverse trigonometry functions, e x e^x e x and l n ( x ) ln(x) l n ( x ) functions, and fractions . Fermat Provides Even More Math Through Modules On top of the extra functionality that Fermat provides in comparison to ext-bcmath and ext-decimal, more functionality is available through Fermat Modules . Some of these, such as the statistics functions provided by Fermat Stats , are not available via PHP extensions even for non-arbitrary math. Fermat Provides a Consistent Developer Experience By providing objects which have a fluent interface and are aware of how the rest of the library works, the developer experience is incredibly consistent. You can always use the add() method to add two numbers. You can always ask for the tangent with tan() . If the library needs additional help to complete your requested operation, the exception model makes it easy for your program to recover and in many cases even retry the operation. Advantages Compared to Other Libraries There are other libraries that provide arbitrary precision math, or provide complex mathematical functions. This is the only PHP library that provides both. Compared to 'brick/math' This library does a fantastic job of providing a similarly fluent and consistent developer experience for dealing with arbitrary precision math, however it is limited to only the basic arithmetic which can be performed via the ext-bcmath extension. Additionally, while the brick/math library provides only immutable values, (which to be fair are almost always better for performing mathematical operations, see Mutable vs. Immutable ), Fermat supports both mutable and immutable varieties of its values. The lack of more complex mathematical operations in brick/math also prevents it from supporting some of the extra features available in Fermat through modules . Statistics functions require both e x e^x e x and l n ( x ) ln(x) l n ( x ) implementations in order to be possible for instance, while math with complex numbers requires implementations of both s i n ( x ) sin(x) s in ( x ) and c o s ( x ) cos(x) cos ( x ) . Currently, Fermat does not offer a module for financial mathematics or money transactions (though this will be added in the future). Because of this, if your application needs arbitrary precision and does calculations with numbers that represent currencies for which you want helper functions, the brick/math library along with brick/money may be preferrable. Compared with 'markbaker/complex' and 'markbaker/matrix' Two of the Fermat modules concern dealing with complex numbers and linear algebra . The packages offered by Mark Baker are very widely used (over 30 million installs) and still actively developed and supported. The Fermat library only offers an important improvement to these libraries if your application is affected by issues arising from floating point precision. Though Fermat does offer a way to skip the arbitrary precision calculations the library makes with calculation modes , it still may be worth it to many developers to use the library which has more eyes on it. Despite this, some developers might find the common and unified fluent interface and consistent developer experience offered by Fermat to be worth the trade-off. As Fermat becomes more mature and stable, and the calculation mode offers more control over how efficient the calculations are, it might be more compelling to use the fluent objects offered by Fermat that can seamlessly jump between different types of math and different math paradigms while retaining a consistent experience for the developer.","title":"Fermat vs. Alternatives"},{"location":"fermat-vs-alternatives/#comparing-fermat-to-alternatives","text":"This page covers the situations in which Fermat provides clear advantages over alternative ways to get arbitrary precision math in PHP.","title":"Comparing Fermat To Alternatives"},{"location":"fermat-vs-alternatives/#advantages-compared-to-extensions","text":"There are several advantages to using Fermat compared to the two arbitrary precision extensions (ext-bcmath and ext-decimal) directly.","title":"Advantages Compared To Extensions"},{"location":"fermat-vs-alternatives/#support-for-bcmath-is-already-part-of-fermat","text":"At its core, Fermat utilizes the BCMath extension (which is included by default in modern installations of PHP) to perform the base calculations. You don't gain anything by using the BCMath library directly, as this would result in needing to manually and directly manage things like changes in scale. All of the BCMath operations are still accessible using Fermat with the ArithmeticProvider , which functions as a formatting wrapper for the BCMath library.","title":"Support For BCMath Is Already Part Of Fermat"},{"location":"fermat-vs-alternatives/#fermat-provides-more-complex-math-operations","text":"While ext-bcmath and ext-decimal provide the speed of a PHP extension, this benefit only applies when performing simple arithmetic. When such simple operations are being performed, Fermat is similarly fast. The power of Fermat is its support for both arbitrary precision and more complex operations, such as basic , hyperbolic , and inverse trigonometry functions, e x e^x e x and l n ( x ) ln(x) l n ( x ) functions, and fractions .","title":"Fermat Provides More Complex Math Operations"},{"location":"fermat-vs-alternatives/#fermat-provides-even-more-math-through-modules","text":"On top of the extra functionality that Fermat provides in comparison to ext-bcmath and ext-decimal, more functionality is available through Fermat Modules . Some of these, such as the statistics functions provided by Fermat Stats , are not available via PHP extensions even for non-arbitrary math.","title":"Fermat Provides Even More Math Through Modules"},{"location":"fermat-vs-alternatives/#fermat-provides-a-consistent-developer-experience","text":"By providing objects which have a fluent interface and are aware of how the rest of the library works, the developer experience is incredibly consistent. You can always use the add() method to add two numbers. You can always ask for the tangent with tan() . If the library needs additional help to complete your requested operation, the exception model makes it easy for your program to recover and in many cases even retry the operation.","title":"Fermat Provides a Consistent Developer Experience"},{"location":"fermat-vs-alternatives/#advantages-compared-to-other-libraries","text":"There are other libraries that provide arbitrary precision math, or provide complex mathematical functions. This is the only PHP library that provides both.","title":"Advantages Compared to Other Libraries"},{"location":"fermat-vs-alternatives/#compared-to-brickmath","text":"This library does a fantastic job of providing a similarly fluent and consistent developer experience for dealing with arbitrary precision math, however it is limited to only the basic arithmetic which can be performed via the ext-bcmath extension. Additionally, while the brick/math library provides only immutable values, (which to be fair are almost always better for performing mathematical operations, see Mutable vs. Immutable ), Fermat supports both mutable and immutable varieties of its values. The lack of more complex mathematical operations in brick/math also prevents it from supporting some of the extra features available in Fermat through modules . Statistics functions require both e x e^x e x and l n ( x ) ln(x) l n ( x ) implementations in order to be possible for instance, while math with complex numbers requires implementations of both s i n ( x ) sin(x) s in ( x ) and c o s ( x ) cos(x) cos ( x ) . Currently, Fermat does not offer a module for financial mathematics or money transactions (though this will be added in the future). Because of this, if your application needs arbitrary precision and does calculations with numbers that represent currencies for which you want helper functions, the brick/math library along with brick/money may be preferrable.","title":"Compared to 'brick/math'"},{"location":"fermat-vs-alternatives/#compared-with-markbakercomplex-and-markbakermatrix","text":"Two of the Fermat modules concern dealing with complex numbers and linear algebra . The packages offered by Mark Baker are very widely used (over 30 million installs) and still actively developed and supported. The Fermat library only offers an important improvement to these libraries if your application is affected by issues arising from floating point precision. Though Fermat does offer a way to skip the arbitrary precision calculations the library makes with calculation modes , it still may be worth it to many developers to use the library which has more eyes on it. Despite this, some developers might find the common and unified fluent interface and consistent developer experience offered by Fermat to be worth the trade-off. As Fermat becomes more mature and stable, and the calculation mode offers more control over how efficient the calculations are, it might be more compelling to use the fluent objects offered by Fermat that can seamlessly jump between different types of math and different math paradigms while retaining a consistent experience for the developer.","title":"Compared with 'markbaker/complex' and 'markbaker/matrix'"},{"location":"configuration/calculation-modes/","text":"Calculation Modes Calculation modes control how exactly a given calculation is performed. The following methods of calculation are used for mathematical operations, and the calculation mode allows you to control which methods are considered. The BCMath extension, which operates on real numbers of arbitrary precision. The GMP extension, which operates on integers. The PHP engine math functions and operations, which work with both integers and floats, and provide a variable amount of precision up to about 12 decimal places. The default calculation mode is CalcMode::Auto , which attempts to intelligently select the most computationally efficient mode given the precision needed. Available Modes The mode for a given operation is determined from two sources. First, the calculation mode on the value object calling the method is checked. If the calculation mode on the value object is null , (which is the default value), then the global calculation mode currently set on the CalculationModeProvider is checked. The default calculation mode is CalcMode::Auto , which will contextually use all calculation methods based on the runtime values of the objects in question. Value-Specific Calculation Modes Persist If a calculation mode is set for a value object using the setMode() method, all objects resulting from that calculation will inherit the same mode instead of have the default null value. In general this is prefferable and reduces unexpected bugs, however this means that once a value-specific calculation mode is set, all values derived from it will no longer be affected by the global calculation mode. Auto The CalcMode::Auto mode will utilize all available calculation tools in an attempt to provide the most speed possible without compromising the requested scale. Each mathematical operation may have its own criteria for deciding which calculation method to use, however the general logic of this mode is as follows: If all the inputs and outputs of a given calculation can be expected to be integers, the GMP functions are used. If GMP cannot be used, the inputs are then checked against the requested scale for the density of native float values. If it can be expected that native floats have enough density to provide the requested scale, then the native PHP engine math operations are used. If neither GMP nor the PHP engine can be used, then the fastest arbitrary precision operation available in your installation is used. For most PHP installations, this will be the BCMath extension. Precision Mode In this mode, the best available string math implementation is used when a mathematical operation is performed. By default, these are the functions provided by the BCMath extension, however a future scope of this project is to provide integration with ext-decimal . Native Mode In this mode, the native PHP engine math operators are used for calculation. The result is then converted to a string and stored according to the normal behavior of the class in question. Loss Of Scale The scale defined in the object is ignored when this mode is used. This will result in values which behave as math operations in PHP would natively, including issues such as overflow and underflow. Better Performance In Low Scale Situations As a trade-off for accepting more ambiguous scale in the result, using this mode will decrease the computation required for basic math operations, in some cases quite significantly. If you are absolutely certain that your math will not result in an overflow or underflow, and your application is not sensitive to loss of scale in float values, using this mode will reduce the cost of each mathematical operation. Expanding Native Types With the mode set to native, this library functions as simply an extension to integer and float types that enables representations of imaginary numbers, complex numbers, matrices, coordinates, and statistics. In this way, the library may be useful even if arbitrary scale is not necessary for your application. Controlling the Mode of Objects There are two main ways of controlling the mode used by your Fermat objects. The first is through the use of the default mode, and the second is with the use of the setMode() method. Default Mode The mode currently returned by CalculationModeProvider is used by default for all classes that extend the Number abstract class. This mode at application start is CalcMode::Auto , but can be changed at any time using CalculationModeProvider::setCurrentMode() . Set Mode The setMode() method is available on all classes that extend the Number abstract class. It sets the mode of the object it is called on to the mode provided. This setting will null by default, allowing the object to use the default mode described above. If this is used to set a specific mode on an object, the default mode will be ignored, and the specific mode set will cascade to any objects that object creates through calculations. Use Only Defined Modes While setMode() will accept any integer, you should only ever use inputs that are defined on the CalcMode enum to avoid unexpected behaviors. This Method Is Mutable For All Objects Because of the nature of what this method does, it is mutable for all objects, including any implementations of immutable objects.","title":"Calculation Modes"},{"location":"configuration/calculation-modes/#calculation-modes","text":"Calculation modes control how exactly a given calculation is performed. The following methods of calculation are used for mathematical operations, and the calculation mode allows you to control which methods are considered. The BCMath extension, which operates on real numbers of arbitrary precision. The GMP extension, which operates on integers. The PHP engine math functions and operations, which work with both integers and floats, and provide a variable amount of precision up to about 12 decimal places. The default calculation mode is CalcMode::Auto , which attempts to intelligently select the most computationally efficient mode given the precision needed.","title":"Calculation Modes"},{"location":"configuration/calculation-modes/#available-modes","text":"The mode for a given operation is determined from two sources. First, the calculation mode on the value object calling the method is checked. If the calculation mode on the value object is null , (which is the default value), then the global calculation mode currently set on the CalculationModeProvider is checked. The default calculation mode is CalcMode::Auto , which will contextually use all calculation methods based on the runtime values of the objects in question. Value-Specific Calculation Modes Persist If a calculation mode is set for a value object using the setMode() method, all objects resulting from that calculation will inherit the same mode instead of have the default null value. In general this is prefferable and reduces unexpected bugs, however this means that once a value-specific calculation mode is set, all values derived from it will no longer be affected by the global calculation mode.","title":"Available Modes"},{"location":"configuration/calculation-modes/#auto","text":"The CalcMode::Auto mode will utilize all available calculation tools in an attempt to provide the most speed possible without compromising the requested scale. Each mathematical operation may have its own criteria for deciding which calculation method to use, however the general logic of this mode is as follows: If all the inputs and outputs of a given calculation can be expected to be integers, the GMP functions are used. If GMP cannot be used, the inputs are then checked against the requested scale for the density of native float values. If it can be expected that native floats have enough density to provide the requested scale, then the native PHP engine math operations are used. If neither GMP nor the PHP engine can be used, then the fastest arbitrary precision operation available in your installation is used. For most PHP installations, this will be the BCMath extension.","title":"Auto"},{"location":"configuration/calculation-modes/#precision-mode","text":"In this mode, the best available string math implementation is used when a mathematical operation is performed. By default, these are the functions provided by the BCMath extension, however a future scope of this project is to provide integration with ext-decimal .","title":"Precision Mode"},{"location":"configuration/calculation-modes/#native-mode","text":"In this mode, the native PHP engine math operators are used for calculation. The result is then converted to a string and stored according to the normal behavior of the class in question. Loss Of Scale The scale defined in the object is ignored when this mode is used. This will result in values which behave as math operations in PHP would natively, including issues such as overflow and underflow. Better Performance In Low Scale Situations As a trade-off for accepting more ambiguous scale in the result, using this mode will decrease the computation required for basic math operations, in some cases quite significantly. If you are absolutely certain that your math will not result in an overflow or underflow, and your application is not sensitive to loss of scale in float values, using this mode will reduce the cost of each mathematical operation. Expanding Native Types With the mode set to native, this library functions as simply an extension to integer and float types that enables representations of imaginary numbers, complex numbers, matrices, coordinates, and statistics. In this way, the library may be useful even if arbitrary scale is not necessary for your application.","title":"Native Mode"},{"location":"configuration/calculation-modes/#controlling-the-mode-of-objects","text":"There are two main ways of controlling the mode used by your Fermat objects. The first is through the use of the default mode, and the second is with the use of the setMode() method.","title":"Controlling the Mode of Objects"},{"location":"configuration/calculation-modes/#default-mode","text":"The mode currently returned by CalculationModeProvider is used by default for all classes that extend the Number abstract class. This mode at application start is CalcMode::Auto , but can be changed at any time using CalculationModeProvider::setCurrentMode() .","title":"Default Mode"},{"location":"configuration/calculation-modes/#set-mode","text":"The setMode() method is available on all classes that extend the Number abstract class. It sets the mode of the object it is called on to the mode provided. This setting will null by default, allowing the object to use the default mode described above. If this is used to set a specific mode on an object, the default mode will be ignored, and the specific mode set will cascade to any objects that object creates through calculations. Use Only Defined Modes While setMode() will accept any integer, you should only ever use inputs that are defined on the CalcMode enum to avoid unexpected behaviors. This Method Is Mutable For All Objects Because of the nature of what this method does, it is mutable for all objects, including any implementations of immutable objects.","title":"Set Mode"},{"location":"configuration/random-modes/","text":"Random Modes Random numbers can be obtained with Fermat by using the RandomProvider . This provider can be used to obtain random numbers of arbitrary size using either Pseudo-Random Number Generators (PRNG) or Entropy Sources . PRNG will generate numbers that have the same distribution properties as true randomness, however the method by which they do this is deterministic and generally based upon a seed value. Entropy sources utilize sources of randomness within the computer to extract bytes of entropy from the system as it continues to run. These sources vary by both hardware and OS, but in general terms, sources of entropy sometimes include: Variation in timings within the hardware (keyboard, mouse, IDE, etc.). TPM (Trusted Platform Module) chips if installed and enabled. RDRAND instruction from the CPU, seeding by hardware sources of entropy such as electrical variability, or cosmic ray originated bit-flip events in RAM. Entropy within a computer system increases over time, and the degree to which the numbers provided from an entropy source corresponds to a True Random Number Generator (TRNG) depends on both the number of bits of entropy available within the system, and the number of random bits requested by the program running. As the number of random bits requested by a program exceeds the bits of entropy within a system, the provided numbers begin to become more predictable through either statistical analysis or knowledge of initial conditions. Predictable Does Not Always Mean Practical While PRNG and \"deterministic randomness\" in general have vectors that allow prediction, that does not mean it is always practical or possible within a given application for these number to actually be predicted or extracted. In general, these are only a concern when a Cryptographically Secure Random Number Generator (CSRNG) is needed, and in practice a PHP application is unlikely to have \"insufficient sources of entropy\" as its largest security vulnerability. PRNG is faster than TRNG, (in PHP the rand() function is approximately 15 times faster than random_number() or random_bytes() ), so applications which can use PRNG generally benefit from doing so. As rough guidelines with Fermat, you should use a PRNG when any of the following are true: You need numbers that form a random distribution, but it is not important if subsequent random numbers have a relationship with the previously generated random number. You need a random number in a math context, but not a computer security context. You need an integer that is non-negative and smaller than PHP_INT_MAX . You should use TRNG when any of the following are true: You need a random number that is used as part of a security sensitive process, such as encryption. You need a float . You need an integer that can be less than zero or larger than PHP_INT_MAX . The mode for PRNG is RandomMode::Speed , and the mode for TRNG is RandomMode::Entropy . Available Modes Mode Does Not Guarantee Method Used While selecting RandomMode::Entropy will always guarantee that sources of entropy are used to generate your random numbers, it is possible that sources of entropy may be used even if you select RandomMode::Speed . This is because certain parameters for the range of a requested random number may require the use of alternative sources in order to contain your entire requested range. Speed This mode uses rand() if it is possible given the arguments provided. If this PHP function cannot satisfy your request, your random number is generated using the Entropy process instead. Entropy This mode generates random numbers using the random_number() function if possible given the arguments provided, then falls back to the random_bytes() function to create a sequence of bits sufficient to contain your entire range. This mode is always used when the requested range requires outputs that rand() is unable to provide. The rand() function is approximately one order of magnitude faster than random_number() , and random_number() is approximately one order of magnitude faster than the Fermat implementation using random_bytes() . Potential Looping This function collects a sequence of bits that contains your entire range. However, this necessarily means it also contains values outside of your requested range. When the generated value is outside of your requested range, the result is discarded and the entire process is tried again. This is because out-of-range values cannot be mapped to your requested range without changing the distribution of possible output values in a non-random way. This means that it is technically possible for the application to infinitely recurse, if all generated numbers for every recursive call are continually outside of your requested range. The highest possible chance for any range of a recursive call occurring is 50%, meaning that the chance of needing more than 10 calls is less than 0.1%. The average number of recursive calls to generate your random number for an arbitrary range would be in the vicinity of 1.5 extra calls.","title":"Random Modes"},{"location":"configuration/random-modes/#random-modes","text":"Random numbers can be obtained with Fermat by using the RandomProvider . This provider can be used to obtain random numbers of arbitrary size using either Pseudo-Random Number Generators (PRNG) or Entropy Sources . PRNG will generate numbers that have the same distribution properties as true randomness, however the method by which they do this is deterministic and generally based upon a seed value. Entropy sources utilize sources of randomness within the computer to extract bytes of entropy from the system as it continues to run. These sources vary by both hardware and OS, but in general terms, sources of entropy sometimes include: Variation in timings within the hardware (keyboard, mouse, IDE, etc.). TPM (Trusted Platform Module) chips if installed and enabled. RDRAND instruction from the CPU, seeding by hardware sources of entropy such as electrical variability, or cosmic ray originated bit-flip events in RAM. Entropy within a computer system increases over time, and the degree to which the numbers provided from an entropy source corresponds to a True Random Number Generator (TRNG) depends on both the number of bits of entropy available within the system, and the number of random bits requested by the program running. As the number of random bits requested by a program exceeds the bits of entropy within a system, the provided numbers begin to become more predictable through either statistical analysis or knowledge of initial conditions. Predictable Does Not Always Mean Practical While PRNG and \"deterministic randomness\" in general have vectors that allow prediction, that does not mean it is always practical or possible within a given application for these number to actually be predicted or extracted. In general, these are only a concern when a Cryptographically Secure Random Number Generator (CSRNG) is needed, and in practice a PHP application is unlikely to have \"insufficient sources of entropy\" as its largest security vulnerability. PRNG is faster than TRNG, (in PHP the rand() function is approximately 15 times faster than random_number() or random_bytes() ), so applications which can use PRNG generally benefit from doing so. As rough guidelines with Fermat, you should use a PRNG when any of the following are true: You need numbers that form a random distribution, but it is not important if subsequent random numbers have a relationship with the previously generated random number. You need a random number in a math context, but not a computer security context. You need an integer that is non-negative and smaller than PHP_INT_MAX . You should use TRNG when any of the following are true: You need a random number that is used as part of a security sensitive process, such as encryption. You need a float . You need an integer that can be less than zero or larger than PHP_INT_MAX . The mode for PRNG is RandomMode::Speed , and the mode for TRNG is RandomMode::Entropy .","title":"Random Modes"},{"location":"configuration/random-modes/#available-modes","text":"Mode Does Not Guarantee Method Used While selecting RandomMode::Entropy will always guarantee that sources of entropy are used to generate your random numbers, it is possible that sources of entropy may be used even if you select RandomMode::Speed . This is because certain parameters for the range of a requested random number may require the use of alternative sources in order to contain your entire requested range.","title":"Available Modes"},{"location":"configuration/random-modes/#speed","text":"This mode uses rand() if it is possible given the arguments provided. If this PHP function cannot satisfy your request, your random number is generated using the Entropy process instead.","title":"Speed"},{"location":"configuration/random-modes/#entropy","text":"This mode generates random numbers using the random_number() function if possible given the arguments provided, then falls back to the random_bytes() function to create a sequence of bits sufficient to contain your entire range. This mode is always used when the requested range requires outputs that rand() is unable to provide. The rand() function is approximately one order of magnitude faster than random_number() , and random_number() is approximately one order of magnitude faster than the Fermat implementation using random_bytes() . Potential Looping This function collects a sequence of bits that contains your entire range. However, this necessarily means it also contains values outside of your requested range. When the generated value is outside of your requested range, the result is discarded and the entire process is tried again. This is because out-of-range values cannot be mapped to your requested range without changing the distribution of possible output values in a non-random way. This means that it is technically possible for the application to infinitely recurse, if all generated numbers for every recursive call are continually outside of your requested range. The highest possible chance for any range of a recursive call occurring is 50%, meaning that the chance of needing more than 10 calls is less than 0.1%. The average number of recursive calls to generate your random number for an arbitrary range would be in the vicinity of 1.5 extra calls.","title":"Entropy"},{"location":"configuration/rounding-modes/","text":"Rounding Modes Rounding in Fermat is accomplished by making calls to the RoundingProvider . This provider accepts a DecimalInterface as its input, and provides the rounded value as a string. The rounding provider provides two broad types of rounding, deterministic and non-deterministic (or semi-deterministic). Rounding is Anything that Reduces Scale Many people think of rounding as selecting the closest integer to a given number, with some kind of rule for what to do when you are half-way between two integers. However, rounding broadly covers any action that reduces the scale or precision of a number. Going from more digits to fewer digits is rounding regardless of how it is done. This means that even operations like truncate() or floor() or ceil() are rounding. Since truncate is better handled by the Decimal object itself, due to its knowledge of the internal state of the object, that is not handled by the RoundingProvider . All other kinds of rounding offered in Fermat utilize the RoundingProvider however. For this reason it is designed to be as lightweight as possible while still accomplishing its task. The available modes are contained with the Samsara/Fermat/Enums/RoundingMode enum, and the relevant places in Fermat that allow you to specify a rounding mode are typed as such. The default mode is RoundingMode::HalfEven . This is also the fallback mode if you ask for a non-existent rounding mode. Setting the Rounding Mode The rounding provider has a private static property where it stores the mode to use while rounding. This property can be read and set using public static methods, but as it is a static property it affects all rounding operations after a mode is changed, even those you don't directly call. This is useful in most cases, since it allows you to set the rounding mode once at the beginning of your program and then utilize that rounding mode in every call that is made to the library. Rounding Mode Affects Many Operations Internally Rounding occurs frequently in Fermat, since many operations produce more digits than the scale setting of your objects. The trigonometry functions, logarithmic function, and exponential functions all make a call to the RoundingProvider before returning a result. This means that selecting a rounding mode will affect the results you get from functions such as tan() , sin() , exp() , and ln() . In most cases this is not an issue, and would even be preferred to keep your results consistent with the other effects of rounding within the library. However, some modes such as Stochastic may produce results that are more inconsistent with the expectations of your program. If you want to manually round an object once using a different mode, pass the mode as an argument to the round() method on your Decimal object instead of setting a new default more in the RoundingProvider . When done in this way, the provided mode will only be used for that one operation without affecting the default more for any other operations. See Also The exact signatures associated with the RoundingProvider can be found in the Rounding Provider Reference Page Available Modes Rounding Is Base-10 Referenced As noted in other places, anything related to scale in this library is specific to base-10. While you can still round in other bases, the operations will be performed on the base-10 representation of the number instead of the base the Decimal object is in. Examples Assume Rounding to the Closest Integer In all of the examples given below, they are showing what the expected outputs would be if RoundingProvider::round($decimal, $places) was called with the example value for $decimal and 0 for $places . If a number with more digits were provided and a different value for $places was used, these rounding modes would all round towards a different target digit. The examples describe the behavior if the $places argument is omitted, since its default value is 0. But you could just as easily use any mode to round to the nearest tenth by passing 1 for the $places argument. Half Up This rounding mode rounds the number towards positive infinity when halfway between two values. Examples 1.5 Using the \"Half Up\" mode: 1.5 -> 2 -1.5 Using the \"Half Up\" mode: -1.5 -> -1 2.5 Using the \"Half Up\" mode: 2.5 -> 3 -2.5 Using the \"Half Up\" mode: -2.5 -> -2 Half Down This rounding mode rounds the number towards negative infinity when halfway between two values. Examples 1.5 Using the \"Half Down\" mode: 1.5 -> 1 -1.5 Using the \"Half Down\" mode: -1.5 -> -2 2.5 Using the \"Half Down\" mode: 2.5 -> 2 -2.5 Using the \"Half Down\" mode: -2.5 -> -3 Half Even This rounding mode rounds the number towards the nearest even number when halfway between two values. Examples 1.5 Using the \"Half Even\" mode: 1.5 -> 2 -1.5 Using the \"Half Even\" mode: -1.5 -> -2 2.5 Using the \"Half Even\" mode: 2.5 -> 2 -2.5 Using the \"Half Even\" mode: -2.5 -> -2 Half Odd This rounding mode rounds the number towards the nearest odd number when halfway between two values. Examples 1.5 Using the \"Half Odd\" mode: 1.5 -> 1 -1.5 Using the \"Half Odd\" mode: -1.5 -> -1 2.5 Using the \"Half Odd\" mode: 2.5 -> 3 -2.5 Using the \"Half Odd\" mode: -2.5 -> -3 Half Zero This rounding mode rounds the number towards zero when halfway between two values. Examples 1.5 Using the \"Half Zero\" mode: 1.5 -> 1 -1.5 Using the \"Half Zero\" mode: -1.5 -> -1 2.5 Using the \"Half Zero\" mode: 2.5 -> 2 -2.5 Using the \"Half Zero\" mode: -2.5 -> -2 Half Infinity This rounding mode rounds the number towards the nearest infinity (positive or negative) when halfway between two values. Examples 1.5 Using the \"Half Infinity\" mode: 1.5 -> 2 -1.5 Using the \"Half Infinity\" mode: -1.5 -> -2 2.5 Using the \"Half Infinity\" mode: 2.5 -> 3 -2.5 Using the \"Half Infinity\" mode: -2.5 -> -3 Ceil This rounding mode rounds the number towards positive infinity, even for values which are not halfway between. Examples 1.5 Using the \"Ceil\" mode: 1.5 -> 2 -1.5 Using the \"Ceil\" mode: -1.5 -> -1 2.2 Using the \"Ceil\" mode: 2.2 -> 3 -2.2 Using the \"Ceil\" mode: -2.2 -> -2 Floor This rounding mode rounds the number towards negative infinity, even for values which are not halfway between. Examples 1.5 Using the \"Floor\" mode: 1.5 -> 1 -1.5 Using the \"Floor\" mode: -1.5 -> -2 2.2 Using the \"Floor\" mode: 2.2 -> 2 -2.2 Using the \"Floor\" mode: -2.2 -> -3 Random This rounding mode rounds the number in a direction that is randomly chosen when halfway between two values. Examples 1.5 Using the \"Random\" mode: 1.5 -> 1 50% of the time 1.5 -> 2 50% of the time 1.7 Using the \"Random\" mode: 1.7 -> 2 100% of the time 2.2 Using the \"Random\" mode: 2.2 -> 2 100% of the time -2.5 Using the \"Random\" mode: -2.5 -> -2 50% of the time -2.5 -> -3 50% of the time Alternating This rounding mode rounds the number in a direction that alternates as more calls to round() are made when halfway between two values. Examples 1.5 Using the \"Alternating\" mode: 1.5 -> 2 on the first call 1.5 -> 1 on the second call 1.7 Using the \"Alternating\" mode: 1.7 -> 2 100% of the time 2.2 Using the \"Alternating\" mode: 2.2 -> 2 100% of the time -2.5 Using the \"Alternating\" mode: -2.5 -> -3 on the first call -2.5 -> -2 on the second call Stochastic This rounding mode rounds the number in both directions in proportion to how close it is to both values. This occurs regardless of whether the number is halfway between. Please see the examples below for clarification. Examples 1.5 Using the \"Stochastic\" mode: 1.5 -> 2 50% of the time 1.5 -> 1 50% of the time 1.7 Using the \"Stochastic\" mode: 1.7 -> 2 70% of the time 1.7 -> 1 30% of the time 2.2 Using the \"Stochastic\" mode: 2.2 -> 3 20% of the time 2.2 -> 2 80% of the time -2.5 Using the \"Stochastic\" mode: -2.5 -> -3 50% of the time -2.5 -> -2 50% of the time","title":"Rounding Modes"},{"location":"configuration/rounding-modes/#rounding-modes","text":"Rounding in Fermat is accomplished by making calls to the RoundingProvider . This provider accepts a DecimalInterface as its input, and provides the rounded value as a string. The rounding provider provides two broad types of rounding, deterministic and non-deterministic (or semi-deterministic). Rounding is Anything that Reduces Scale Many people think of rounding as selecting the closest integer to a given number, with some kind of rule for what to do when you are half-way between two integers. However, rounding broadly covers any action that reduces the scale or precision of a number. Going from more digits to fewer digits is rounding regardless of how it is done. This means that even operations like truncate() or floor() or ceil() are rounding. Since truncate is better handled by the Decimal object itself, due to its knowledge of the internal state of the object, that is not handled by the RoundingProvider . All other kinds of rounding offered in Fermat utilize the RoundingProvider however. For this reason it is designed to be as lightweight as possible while still accomplishing its task. The available modes are contained with the Samsara/Fermat/Enums/RoundingMode enum, and the relevant places in Fermat that allow you to specify a rounding mode are typed as such. The default mode is RoundingMode::HalfEven . This is also the fallback mode if you ask for a non-existent rounding mode.","title":"Rounding Modes"},{"location":"configuration/rounding-modes/#setting-the-rounding-mode","text":"The rounding provider has a private static property where it stores the mode to use while rounding. This property can be read and set using public static methods, but as it is a static property it affects all rounding operations after a mode is changed, even those you don't directly call. This is useful in most cases, since it allows you to set the rounding mode once at the beginning of your program and then utilize that rounding mode in every call that is made to the library. Rounding Mode Affects Many Operations Internally Rounding occurs frequently in Fermat, since many operations produce more digits than the scale setting of your objects. The trigonometry functions, logarithmic function, and exponential functions all make a call to the RoundingProvider before returning a result. This means that selecting a rounding mode will affect the results you get from functions such as tan() , sin() , exp() , and ln() . In most cases this is not an issue, and would even be preferred to keep your results consistent with the other effects of rounding within the library. However, some modes such as Stochastic may produce results that are more inconsistent with the expectations of your program. If you want to manually round an object once using a different mode, pass the mode as an argument to the round() method on your Decimal object instead of setting a new default more in the RoundingProvider . When done in this way, the provided mode will only be used for that one operation without affecting the default more for any other operations. See Also The exact signatures associated with the RoundingProvider can be found in the Rounding Provider Reference Page","title":"Setting the Rounding Mode"},{"location":"configuration/rounding-modes/#available-modes","text":"Rounding Is Base-10 Referenced As noted in other places, anything related to scale in this library is specific to base-10. While you can still round in other bases, the operations will be performed on the base-10 representation of the number instead of the base the Decimal object is in. Examples Assume Rounding to the Closest Integer In all of the examples given below, they are showing what the expected outputs would be if RoundingProvider::round($decimal, $places) was called with the example value for $decimal and 0 for $places . If a number with more digits were provided and a different value for $places was used, these rounding modes would all round towards a different target digit. The examples describe the behavior if the $places argument is omitted, since its default value is 0. But you could just as easily use any mode to round to the nearest tenth by passing 1 for the $places argument.","title":"Available Modes"},{"location":"configuration/rounding-modes/#half-up","text":"This rounding mode rounds the number towards positive infinity when halfway between two values. Examples 1.5 Using the \"Half Up\" mode: 1.5 -> 2 -1.5 Using the \"Half Up\" mode: -1.5 -> -1 2.5 Using the \"Half Up\" mode: 2.5 -> 3 -2.5 Using the \"Half Up\" mode: -2.5 -> -2","title":"Half Up"},{"location":"configuration/rounding-modes/#half-down","text":"This rounding mode rounds the number towards negative infinity when halfway between two values. Examples 1.5 Using the \"Half Down\" mode: 1.5 -> 1 -1.5 Using the \"Half Down\" mode: -1.5 -> -2 2.5 Using the \"Half Down\" mode: 2.5 -> 2 -2.5 Using the \"Half Down\" mode: -2.5 -> -3","title":"Half Down"},{"location":"configuration/rounding-modes/#half-even","text":"This rounding mode rounds the number towards the nearest even number when halfway between two values. Examples 1.5 Using the \"Half Even\" mode: 1.5 -> 2 -1.5 Using the \"Half Even\" mode: -1.5 -> -2 2.5 Using the \"Half Even\" mode: 2.5 -> 2 -2.5 Using the \"Half Even\" mode: -2.5 -> -2","title":"Half Even"},{"location":"configuration/rounding-modes/#half-odd","text":"This rounding mode rounds the number towards the nearest odd number when halfway between two values. Examples 1.5 Using the \"Half Odd\" mode: 1.5 -> 1 -1.5 Using the \"Half Odd\" mode: -1.5 -> -1 2.5 Using the \"Half Odd\" mode: 2.5 -> 3 -2.5 Using the \"Half Odd\" mode: -2.5 -> -3","title":"Half Odd"},{"location":"configuration/rounding-modes/#half-zero","text":"This rounding mode rounds the number towards zero when halfway between two values. Examples 1.5 Using the \"Half Zero\" mode: 1.5 -> 1 -1.5 Using the \"Half Zero\" mode: -1.5 -> -1 2.5 Using the \"Half Zero\" mode: 2.5 -> 2 -2.5 Using the \"Half Zero\" mode: -2.5 -> -2","title":"Half Zero"},{"location":"configuration/rounding-modes/#half-infinity","text":"This rounding mode rounds the number towards the nearest infinity (positive or negative) when halfway between two values. Examples 1.5 Using the \"Half Infinity\" mode: 1.5 -> 2 -1.5 Using the \"Half Infinity\" mode: -1.5 -> -2 2.5 Using the \"Half Infinity\" mode: 2.5 -> 3 -2.5 Using the \"Half Infinity\" mode: -2.5 -> -3","title":"Half Infinity"},{"location":"configuration/rounding-modes/#ceil","text":"This rounding mode rounds the number towards positive infinity, even for values which are not halfway between. Examples 1.5 Using the \"Ceil\" mode: 1.5 -> 2 -1.5 Using the \"Ceil\" mode: -1.5 -> -1 2.2 Using the \"Ceil\" mode: 2.2 -> 3 -2.2 Using the \"Ceil\" mode: -2.2 -> -2","title":"Ceil"},{"location":"configuration/rounding-modes/#floor","text":"This rounding mode rounds the number towards negative infinity, even for values which are not halfway between. Examples 1.5 Using the \"Floor\" mode: 1.5 -> 1 -1.5 Using the \"Floor\" mode: -1.5 -> -2 2.2 Using the \"Floor\" mode: 2.2 -> 2 -2.2 Using the \"Floor\" mode: -2.2 -> -3","title":"Floor"},{"location":"configuration/rounding-modes/#random","text":"This rounding mode rounds the number in a direction that is randomly chosen when halfway between two values. Examples 1.5 Using the \"Random\" mode: 1.5 -> 1 50% of the time 1.5 -> 2 50% of the time 1.7 Using the \"Random\" mode: 1.7 -> 2 100% of the time 2.2 Using the \"Random\" mode: 2.2 -> 2 100% of the time -2.5 Using the \"Random\" mode: -2.5 -> -2 50% of the time -2.5 -> -3 50% of the time","title":"Random"},{"location":"configuration/rounding-modes/#alternating","text":"This rounding mode rounds the number in a direction that alternates as more calls to round() are made when halfway between two values. Examples 1.5 Using the \"Alternating\" mode: 1.5 -> 2 on the first call 1.5 -> 1 on the second call 1.7 Using the \"Alternating\" mode: 1.7 -> 2 100% of the time 2.2 Using the \"Alternating\" mode: 2.2 -> 2 100% of the time -2.5 Using the \"Alternating\" mode: -2.5 -> -3 on the first call -2.5 -> -2 on the second call","title":"Alternating"},{"location":"configuration/rounding-modes/#stochastic","text":"This rounding mode rounds the number in both directions in proportion to how close it is to both values. This occurs regardless of whether the number is halfway between. Please see the examples below for clarification. Examples 1.5 Using the \"Stochastic\" mode: 1.5 -> 2 50% of the time 1.5 -> 1 50% of the time 1.7 Using the \"Stochastic\" mode: 1.7 -> 2 70% of the time 1.7 -> 1 30% of the time 2.2 Using the \"Stochastic\" mode: 2.2 -> 3 20% of the time 2.2 -> 2 80% of the time -2.5 Using the \"Stochastic\" mode: -2.5 -> -3 50% of the time -2.5 -> -2 50% of the time","title":"Stochastic"},{"location":"getting-started/comparing/","text":"Limitations of Native Inequality Operators For values that cannot be represented as an integer or float accurately, using the native inequality operators will result in erroneous results. In some cases, this might also result in underflow and overflow of the native types. Because of this, all comparisons, including equality comparisons which would normally be == or === in PHP, should be performed using the comparison methods provided on all objects which extend the Number abstract class. Equality There are two types of equality that can be compared using this library: equality of value, and equality of representation. In virtually all cases equality of value is what is intended, and this is accomplished with the isEqual() method. Equality of representation is accomplished with the equals() method, and only returns true if the value being compared has the same value and is an instance of the same class. isEqual(mixed $value) Any $value which is a valid input for Numbers::makeOrDont() can be provided here. Returns true if the values are the same, false otherwise. Scale Only Affects the Result for Significant Figures Two objects with different scale settings will only return false if one of them has significant figures beyond the scale limit of the other. For instance, Numbers::makeOne(5) and Numbers::makeOne(10) will return true when compared using this method, even though internally they would be represented by 1.00000 and 1.0000000000 . equals(object $value) Returns true if the $value is an instance of the same class and it has the same value, false otherwise. Implemented As Part of the Hashable Interface As part of integration with the ext-ds extension, this method has been implemented to satisfy the Hashable interface. This is mainly so that objects which are instances of the Number abstract class can be used as array keys. Inequality These methods are only available on numbers that implement the SimpleNumberInterface . They are safe to use between different types of classes that implement the SimpleNumberInterface , and will perform the necessary conversions to return an answer. isGreaterThan(mixed $value) isLessThan(mixed $value) isGreaterThanOrEqualTo(mixed $value) isLessThanOrEqualTo(mixed $value) Any $value which is a valid input for Numbers::makeOrDont() can be provided to these methods. They are analogous to the corresponding comparison operators in PHP, but are safe to use with the arbitrary scale values found in this library. Sorting Comparison <=> The spaceship operator <=> , which returns 1 , 0 , or -1 to provide sorting order information, would result in many of the same issues described for the isEqual() method. This is handled internally by the BCMath extension. compare(mixed $value) Any $value which is a valid input for Numbers::makeOrDont() can be provided to this method. Returns 1 if the current object is greater than $value , 0 if they are equal, and -1 if the current object is less than $value . Internally Referenced By Other Comparisons All other comparison methods reference this method. This ensures that any return values of all possible comparison methods will remain consistent with each other no matter what implementation of compare() is used.","title":"Comparing Values"},{"location":"getting-started/comparing/#limitations-of-native-inequality-operators","text":"For values that cannot be represented as an integer or float accurately, using the native inequality operators will result in erroneous results. In some cases, this might also result in underflow and overflow of the native types. Because of this, all comparisons, including equality comparisons which would normally be == or === in PHP, should be performed using the comparison methods provided on all objects which extend the Number abstract class.","title":"Limitations of Native Inequality Operators"},{"location":"getting-started/comparing/#equality","text":"There are two types of equality that can be compared using this library: equality of value, and equality of representation. In virtually all cases equality of value is what is intended, and this is accomplished with the isEqual() method. Equality of representation is accomplished with the equals() method, and only returns true if the value being compared has the same value and is an instance of the same class. isEqual(mixed $value) Any $value which is a valid input for Numbers::makeOrDont() can be provided here. Returns true if the values are the same, false otherwise. Scale Only Affects the Result for Significant Figures Two objects with different scale settings will only return false if one of them has significant figures beyond the scale limit of the other. For instance, Numbers::makeOne(5) and Numbers::makeOne(10) will return true when compared using this method, even though internally they would be represented by 1.00000 and 1.0000000000 . equals(object $value) Returns true if the $value is an instance of the same class and it has the same value, false otherwise. Implemented As Part of the Hashable Interface As part of integration with the ext-ds extension, this method has been implemented to satisfy the Hashable interface. This is mainly so that objects which are instances of the Number abstract class can be used as array keys.","title":"Equality"},{"location":"getting-started/comparing/#inequality","text":"These methods are only available on numbers that implement the SimpleNumberInterface . They are safe to use between different types of classes that implement the SimpleNumberInterface , and will perform the necessary conversions to return an answer. isGreaterThan(mixed $value) isLessThan(mixed $value) isGreaterThanOrEqualTo(mixed $value) isLessThanOrEqualTo(mixed $value) Any $value which is a valid input for Numbers::makeOrDont() can be provided to these methods. They are analogous to the corresponding comparison operators in PHP, but are safe to use with the arbitrary scale values found in this library.","title":"Inequality"},{"location":"getting-started/comparing/#sorting-comparison","text":"The spaceship operator <=> , which returns 1 , 0 , or -1 to provide sorting order information, would result in many of the same issues described for the isEqual() method. This is handled internally by the BCMath extension. compare(mixed $value) Any $value which is a valid input for Numbers::makeOrDont() can be provided to this method. Returns 1 if the current object is greater than $value , 0 if they are equal, and -1 if the current object is less than $value . Internally Referenced By Other Comparisons All other comparison methods reference this method. This ensures that any return values of all possible comparison methods will remain consistent with each other no matter what implementation of compare() is used.","title":"Sorting Comparison &lt;=&gt;"},{"location":"getting-started/concepts/","text":"Concepts Fermat has some vocabulary and concepts that are unique to this library, and they are documented here. Providers A provider in Fermat is a static class which provides a specific functionality to the entire library. It makes this interface available using static methods and wherever possible is permissive about the values it accepts as arguments. What is meant by that is you can, in most cases, pass an implementation of NumberInterface, a numeric string, an int, or a float. Please note that there are exceptions to this general principle and consult the method documentation. The current list of providers, documented in more detail in the section for Providers, is: ArithmeticProvider CalculationModeProvider ConstantProvider RandomProvider RoundingProvider SequenceProvider SeriesProvider TrigonometryProvider Types A type in Fermat is an implementation of a class of number or math concept. These are (with the exception of Tuple and NumberCollection ) abstract classes that are meant to be extended into classes which can be instantiated. This is mostly to provide both mutable and immutable versions of each type. A Tuple is meant to be inherently immutable, while a NumberCollection is mean to inherently mutable. The current list of types is: Decimal Fraction NumberCollection Tuple Values A value in Fermat is a usable implementation that can be directly worked with to perform math operations of some kind. These represent concrete concepts or types of values that have specific intended behavior and usage. The current list of values is: ImmutableDecimal ImmutableFraction MutableDecimal MutableFraction Scale The basis of this library is being able to provide answers at any requested scale. Scale, as used in this library, is the number of digits after the decimal point which are returned. This is in contrast to significant figures or precision , which represent the numbers of digits returned after the decimal point after trimming all the leading zeros. There are two main reasons for providing scale as the main way of controlling how precise the answer is: It ensures that the string size of values with the same scale are comparable. It is far easier to implement some of the converging series calculations within this library, such as those for trigonometry functions, if scale is used instead of precision. In actual fact, significant figures have much less meaning in the context of a Taylor series or MacLauren series. If precision was used, the library would have to make more assumptions about the intent of calling code, and those assumptions would be less transparent. Scale Does Not Increase With New Operations Unlike significant figures, the scale returned does not change as the number of decimal digits are multiplied or divided. This means that multiplying two numbers that each have 10 digits after the decimal will also return a number with 10 digits after the decimal. This can be fixed by setting the scale of the argument value to the sum of the two scales. Scale Is Only Applied To The Base-10 Form Scale is tracked and managed in base-10. This means that if a number has a base smaller than 10, it will return more digits than the scale would suggest after base conversion, while a number with a base larger than 10 will return fewer digits after the base conversion.","title":"Concepts"},{"location":"getting-started/concepts/#concepts","text":"Fermat has some vocabulary and concepts that are unique to this library, and they are documented here.","title":"Concepts"},{"location":"getting-started/concepts/#providers","text":"A provider in Fermat is a static class which provides a specific functionality to the entire library. It makes this interface available using static methods and wherever possible is permissive about the values it accepts as arguments. What is meant by that is you can, in most cases, pass an implementation of NumberInterface, a numeric string, an int, or a float. Please note that there are exceptions to this general principle and consult the method documentation. The current list of providers, documented in more detail in the section for Providers, is: ArithmeticProvider CalculationModeProvider ConstantProvider RandomProvider RoundingProvider SequenceProvider SeriesProvider TrigonometryProvider","title":"Providers"},{"location":"getting-started/concepts/#types","text":"A type in Fermat is an implementation of a class of number or math concept. These are (with the exception of Tuple and NumberCollection ) abstract classes that are meant to be extended into classes which can be instantiated. This is mostly to provide both mutable and immutable versions of each type. A Tuple is meant to be inherently immutable, while a NumberCollection is mean to inherently mutable. The current list of types is: Decimal Fraction NumberCollection Tuple","title":"Types"},{"location":"getting-started/concepts/#values","text":"A value in Fermat is a usable implementation that can be directly worked with to perform math operations of some kind. These represent concrete concepts or types of values that have specific intended behavior and usage. The current list of values is: ImmutableDecimal ImmutableFraction MutableDecimal MutableFraction","title":"Values"},{"location":"getting-started/concepts/#scale","text":"The basis of this library is being able to provide answers at any requested scale. Scale, as used in this library, is the number of digits after the decimal point which are returned. This is in contrast to significant figures or precision , which represent the numbers of digits returned after the decimal point after trimming all the leading zeros. There are two main reasons for providing scale as the main way of controlling how precise the answer is: It ensures that the string size of values with the same scale are comparable. It is far easier to implement some of the converging series calculations within this library, such as those for trigonometry functions, if scale is used instead of precision. In actual fact, significant figures have much less meaning in the context of a Taylor series or MacLauren series. If precision was used, the library would have to make more assumptions about the intent of calling code, and those assumptions would be less transparent. Scale Does Not Increase With New Operations Unlike significant figures, the scale returned does not change as the number of decimal digits are multiplied or divided. This means that multiplying two numbers that each have 10 digits after the decimal will also return a number with 10 digits after the decimal. This can be fixed by setting the scale of the argument value to the sum of the two scales. Scale Is Only Applied To The Base-10 Form Scale is tracked and managed in base-10. This means that if a number has a base smaller than 10, it will return more digits than the scale would suggest after base conversion, while a number with a base larger than 10 will return fewer digits after the base conversion.","title":"Scale"},{"location":"getting-started/direct-instantiation/","text":"You can also directly instantiate the Value classes if you wish, and sometimes it is desirable to do so. Mutable vs. Immutable This section details the concrete implementations that are available for the various values in Fermat. Many of these implementations have a Mutable and an Immutable version. For more detailed information about the differences between these, and the situations that each might be useful in, please see the page on mutability .","title":"Direct instantiation"},{"location":"getting-started/exceptions/","text":"Exceptions Used In This Library The exceptions used in Fermat are all provided by the samsara/common package via composer. This is listed as a dependency in the composer.json. All these exceptions are in the namespace Samsara\\Exceptions . Base Exceptions Base\\SystemError : Extends \\Exception . Used for errors that occur because of errors within the library. Base\\UsageError : Extends \\Exception . Used for errors that occur because of incorrect usage of the library. Thrown Exceptions SystemError\\LogicalError\\IncompatibleObjectState : This exception is thrown when the object is in a state that is incompatible with the requested operation. For example, calling factorial() on a DecimalInterface instance that has a decimal value. SystemError\\PlatformError\\MissingPackage : This exception is thrown when an operation is performed that cannot be completed unless a missing Fermat Module is installed. UsageError\\IntegrityConstraint : This exception is thrown when a data integrity violation is found within a function. Most often this is due to poorly formatted or out of range arguments provided to a function. UsageError\\OptionalExit : This exception is thrown when an error is encountered that may be solved by re-calling the same function with different arguments, for instance by providing a different scale setting. Handling Exceptions From This Library Objects provided in this library are always in a valid state, and any exception thrown results in the object keeping its state from before the function call. Because of this, it may be possible in most situations to use a try/catch block to intelligently handle these exceptions based on the purpose of the numbers and data being provided to the Fermat objects. State Is Preserved Even For Mutable Objects In the event that an exception is thrown, even mutable objects will retain their state from before the method call.","title":"Handling Exceptions"},{"location":"getting-started/exceptions/#exceptions-used-in-this-library","text":"The exceptions used in Fermat are all provided by the samsara/common package via composer. This is listed as a dependency in the composer.json. All these exceptions are in the namespace Samsara\\Exceptions .","title":"Exceptions Used In This Library"},{"location":"getting-started/exceptions/#base-exceptions","text":"Base\\SystemError : Extends \\Exception . Used for errors that occur because of errors within the library. Base\\UsageError : Extends \\Exception . Used for errors that occur because of incorrect usage of the library.","title":"Base Exceptions"},{"location":"getting-started/exceptions/#thrown-exceptions","text":"SystemError\\LogicalError\\IncompatibleObjectState : This exception is thrown when the object is in a state that is incompatible with the requested operation. For example, calling factorial() on a DecimalInterface instance that has a decimal value. SystemError\\PlatformError\\MissingPackage : This exception is thrown when an operation is performed that cannot be completed unless a missing Fermat Module is installed. UsageError\\IntegrityConstraint : This exception is thrown when a data integrity violation is found within a function. Most often this is due to poorly formatted or out of range arguments provided to a function. UsageError\\OptionalExit : This exception is thrown when an error is encountered that may be solved by re-calling the same function with different arguments, for instance by providing a different scale setting.","title":"Thrown Exceptions"},{"location":"getting-started/exceptions/#handling-exceptions-from-this-library","text":"Objects provided in this library are always in a valid state, and any exception thrown results in the object keeping its state from before the function call. Because of this, it may be possible in most situations to use a try/catch block to intelligently handle these exceptions based on the purpose of the numbers and data being provided to the Fermat objects. State Is Preserved Even For Mutable Objects In the event that an exception is thrown, even mutable objects will retain their state from before the method call.","title":"Handling Exceptions From This Library"},{"location":"getting-started/installation-and-usage/","text":"Installation The Fermat library is available on Packagist , and can be installed with composer: composer require \"samsara/fermat:^2.0\" Or by including it in your composer.json file: 1 { 2 \"require\" : { 3 \"samsara/fermat\" : \"^2.0\" 4 } 5 } Dependencies Fermat requires the following packages: riimu/kit-baseconversion : Provides the base conversion library used internally samsara/common : Provides the exception model used in Fermat It also requires the BCMath extension for PHP, however since 7.0 this extension has been included by default in distributions. Improve Performance With Suggested Extensions Fermat suggests that you also install the ext-ds extension and the ext-gmp extension. When present, these help reduce memory usage and computation time. Basic Usage A basic usage of the Fermat library is straightforward and simple to use quickly. 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 // __construct($value, $scale = 10, $base = 10); 6 $five = new ImmutableDecimal ( 5 , 20 ); 7 8 echo $five -> pow ( '1.2' ) -> sin () -> getValue (); 9 // Prints: 0.57733662664006904181 10 echo $five -> getValue (); 11 // Prints: 5 Once you have your number objects created, you can continue using them with your desired scale. Fluency Both immutable and mutable instances can be used with a fluent interface . With mutable objects, this is due to the class being designed with a fluent interface inherently. With immutable objects, this is due to a new instance of the immutable object being returned. This means that each method call on an immutable object which returns an object represents a new instance being created and returned, a new zval being created by PHP, and a new set of memory being allocated. See Also The \"Source Reference\" navigation tab contains detailed information about all the objects in Fermat.","title":"Installation & Usage"},{"location":"getting-started/installation-and-usage/#installation","text":"The Fermat library is available on Packagist , and can be installed with composer: composer require \"samsara/fermat:^2.0\" Or by including it in your composer.json file: 1 { 2 \"require\" : { 3 \"samsara/fermat\" : \"^2.0\" 4 } 5 } Dependencies Fermat requires the following packages: riimu/kit-baseconversion : Provides the base conversion library used internally samsara/common : Provides the exception model used in Fermat It also requires the BCMath extension for PHP, however since 7.0 this extension has been included by default in distributions. Improve Performance With Suggested Extensions Fermat suggests that you also install the ext-ds extension and the ext-gmp extension. When present, these help reduce memory usage and computation time.","title":"Installation"},{"location":"getting-started/installation-and-usage/#basic-usage","text":"A basic usage of the Fermat library is straightforward and simple to use quickly. 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 // __construct($value, $scale = 10, $base = 10); 6 $five = new ImmutableDecimal ( 5 , 20 ); 7 8 echo $five -> pow ( '1.2' ) -> sin () -> getValue (); 9 // Prints: 0.57733662664006904181 10 echo $five -> getValue (); 11 // Prints: 5 Once you have your number objects created, you can continue using them with your desired scale. Fluency Both immutable and mutable instances can be used with a fluent interface . With mutable objects, this is due to the class being designed with a fluent interface inherently. With immutable objects, this is due to a new instance of the immutable object being returned. This means that each method call on an immutable object which returns an object represents a new instance being created and returned, a new zval being created by PHP, and a new set of memory being allocated. See Also The \"Source Reference\" navigation tab contains detailed information about all the objects in Fermat.","title":"Basic Usage"},{"location":"getting-started/modules/","text":"Modules Modules are packages available within composer that provide additional functionality to the Fermat library. These packages generally cover use cases that are niche or specific enough to be necessary for only particular kinds of programs. The modules can be included and required in any combination. While some modules depend on other modules, those dependencies are described and handled automatically by the composer package definitions. All Modules Support Arbitrary Precision Fermat is at its core built around arbitrary precision. As such, all modules for Fermat also support arbitrary precision and using them will not change the behavior of the various value objects provided in Fermat The MissingPackage Exception There a few functions within the core Fermat library which can perform operations which require one or more of these modules to be installed. When one of these functions is called without the module being installed, a MissingPackage exception is thrown if the operation being performed absolutely requires that module. An example of this would be creating a distribution from a NumberCollection . This is directly supported by the NumberCollection class, but requires the Fermat Stats module to be installed. The Fermat library is unit tested for both scenarios, with and without modules installed, so any functions within Fermat that require a module have that behavior maintained, tested, and supported. Available Modules These are the modules that are currently available on Packagist.org and can be required directly in your project's composer.json file. Fermat Stats Stable The Fermat Stats module has a released stable version and is available to use in production environments. To do so, require v1.0 like so: composer require \"samsara/fermat-stats:^1.0\" The Fermat Stats modules provides various statistics functions and operations. This module has no other dependencies and can be required as a stand-alone addition to Fermat. Many statistical functions are extremely complex, and so the scale setting on your objects tends to have a much larger impact on performance within this module than elsewhere within Fermat or its modules. See Also The Stats section of this documentation contains more detailed information about this module and its behavior. Fermat Coordinate Systems Stable The Fermat Coordinate Systems module has a released stable version and is available to use in production environments. To do so, require v1.0 like so: composer require \"samsara/fermat-coordinate-systems:^1.0\" The Fermat Coordinate Systems module provides various coordinate objects that are aware of their geometric and algebraic relations to each other. This module has no other dependencies and can be required as a stand-alone addition to Fermat. Coordinates and coordinate systems have defined concepts of dimensionality, and certain coordinate systems are only available with a specific number of dimensions. Each dimension is represented by an ImmutableDecimal object which contains the value for that dimension. See Also The Coordinate Systems section of this documentation contains more detailed information about this module and its behavior. Fermat Complex Numbers Unstable The Fermat Complex Numbers module does not have a released stable version and should not be used in a production environment. Imaginary numbers are supported directly by Fermat, but combining imaginary and real numbers into complex numbers is handled by this module. To include this module anyway, require the current development state like so: composer require \"samsara/fermat-complex-numbers:dev-master\" The Fermat Complex Numbers module provides support for complex numbers and the mathematical operations that can be performed on them. This is the easiest module to accidentally result in a MissingPackage exception, as doing operations such as add() with two Decimal instances in Fermat can result in a complex number in certain situations. This is unlikely to happen in most applications however, unless your application deals with both imaginary and real numbers at different points. See Also The Complex Numbers section of this documentation contains more detailed information about this module and its behavior. Fermat Linear Algebra Unstable The Fermat Algebra Expressions module does not have a released stable version and should not be used in a production environment. To include this module anyway, require the current development state like so: composer require \"samsara/fermat-algebra-expressions:dev-master\" The Fermat Algebra Expressions module provides support for objects which represent entire algebraic functions, instead of only specific values. This is particularly useful in situations where you want to know the derivatives or integrals of simple algebraic expressions, such a polynomials. See Also The Algebra Expressions section of this documentation contains more detailed information about this module and its behavior.","title":"Modules"},{"location":"getting-started/modules/#modules","text":"Modules are packages available within composer that provide additional functionality to the Fermat library. These packages generally cover use cases that are niche or specific enough to be necessary for only particular kinds of programs. The modules can be included and required in any combination. While some modules depend on other modules, those dependencies are described and handled automatically by the composer package definitions. All Modules Support Arbitrary Precision Fermat is at its core built around arbitrary precision. As such, all modules for Fermat also support arbitrary precision and using them will not change the behavior of the various value objects provided in Fermat The MissingPackage Exception There a few functions within the core Fermat library which can perform operations which require one or more of these modules to be installed. When one of these functions is called without the module being installed, a MissingPackage exception is thrown if the operation being performed absolutely requires that module. An example of this would be creating a distribution from a NumberCollection . This is directly supported by the NumberCollection class, but requires the Fermat Stats module to be installed. The Fermat library is unit tested for both scenarios, with and without modules installed, so any functions within Fermat that require a module have that behavior maintained, tested, and supported.","title":"Modules"},{"location":"getting-started/modules/#available-modules","text":"These are the modules that are currently available on Packagist.org and can be required directly in your project's composer.json file.","title":"Available Modules"},{"location":"getting-started/modules/#fermat-stats","text":"Stable The Fermat Stats module has a released stable version and is available to use in production environments. To do so, require v1.0 like so: composer require \"samsara/fermat-stats:^1.0\" The Fermat Stats modules provides various statistics functions and operations. This module has no other dependencies and can be required as a stand-alone addition to Fermat. Many statistical functions are extremely complex, and so the scale setting on your objects tends to have a much larger impact on performance within this module than elsewhere within Fermat or its modules. See Also The Stats section of this documentation contains more detailed information about this module and its behavior.","title":"Fermat Stats"},{"location":"getting-started/modules/#fermat-coordinate-systems","text":"Stable The Fermat Coordinate Systems module has a released stable version and is available to use in production environments. To do so, require v1.0 like so: composer require \"samsara/fermat-coordinate-systems:^1.0\" The Fermat Coordinate Systems module provides various coordinate objects that are aware of their geometric and algebraic relations to each other. This module has no other dependencies and can be required as a stand-alone addition to Fermat. Coordinates and coordinate systems have defined concepts of dimensionality, and certain coordinate systems are only available with a specific number of dimensions. Each dimension is represented by an ImmutableDecimal object which contains the value for that dimension. See Also The Coordinate Systems section of this documentation contains more detailed information about this module and its behavior.","title":"Fermat Coordinate Systems"},{"location":"getting-started/modules/#fermat-complex-numbers","text":"Unstable The Fermat Complex Numbers module does not have a released stable version and should not be used in a production environment. Imaginary numbers are supported directly by Fermat, but combining imaginary and real numbers into complex numbers is handled by this module. To include this module anyway, require the current development state like so: composer require \"samsara/fermat-complex-numbers:dev-master\" The Fermat Complex Numbers module provides support for complex numbers and the mathematical operations that can be performed on them. This is the easiest module to accidentally result in a MissingPackage exception, as doing operations such as add() with two Decimal instances in Fermat can result in a complex number in certain situations. This is unlikely to happen in most applications however, unless your application deals with both imaginary and real numbers at different points. See Also The Complex Numbers section of this documentation contains more detailed information about this module and its behavior.","title":"Fermat Complex Numbers"},{"location":"getting-started/modules/#fermat-linear-algebra","text":"Unstable The Fermat Algebra Expressions module does not have a released stable version and should not be used in a production environment. To include this module anyway, require the current development state like so: composer require \"samsara/fermat-algebra-expressions:dev-master\" The Fermat Algebra Expressions module provides support for objects which represent entire algebraic functions, instead of only specific values. This is particularly useful in situations where you want to know the derivatives or integrals of simple algebraic expressions, such a polynomials. See Also The Algebra Expressions section of this documentation contains more detailed information about this module and its behavior.","title":"Fermat Linear Algebra"},{"location":"getting-started/mutability/","text":"Mutability In PHP Mutability is a property of instances of objects in object oriented languages. It refers to whether or not a method on the object changes the data referenced by that object's pointer (or in the case of PHP, its zval). If the method changes the data referenced by the object's zval, it is considered to be mutable. If the method does not change the data referenced, it is considered immutable. In general, mutable objects have no memory of their previous states and evolve with the code as more operations are performed on them. Most objects that represent database results are mutable, such as those used in Doctrine or Eloquent. This reflects two properties of database results: A change in the data should still point to the same database entry. There should only ever be one set of data associated with a single database entry. Thus, mutability is not a situation where all objects should be one way or the other, rather it depends on what the meaning of the data contained in the object is. In PHP, mutability comes with the additional issue of scoping. For most purposes, objects can be treated as if they are passed by-reference at all times. See Also The PHP Documentation contains examples on the specifics of how objects are passed between scopes. While it isn't exactly the same as passing by reference, it behaves in a very similar way in most situations. See the php.net page for more information. This is not an issue for some applications, mainly those where all operations are treated as atomic. However, this is not the case for many mathematical operations. Mutability In Fermat Because of these factors, mutability in Fermat is generally left up to the developer using the library. Both mutable and immutable implementations are provided for most values, and the developer using Fermat is asked to choose which type they want at the time it is created. Mutables Are For Niche Use-Cases In This Library Although there are real use-cases for having a mutable numeric value, as detailed within this page, mutables generally make little sense for numeric types, such as integer or float . The values in this library should be treated more like numeric types that have fluent object interfaces than like normal PHP objects. For this reason, most developers in most situations should use the immutable types provided in this library. Immutables are returned automatically in all situations where the library generates or creates a number, such as from the SequenceProvider or from Numbers::makePi() . Unless you are absolutely certain that your use-case calls for a mutable numeric, it is generally safer to use the immutable values. Mutables have been provided to support specific behaviors seen for native integer and float types, namely reassignment operators like += and /= . The exceptions to this rule are usually noted within this documentation, and nearly always represent an underlying data-structure that should always be treated one way or the other. In other cases, such as with implementations of the Coordinate abstract class, the reasons for making all the value classes one way or the other are related to the underlying math concepts they are meant to represent having some of the same properties as database results: that they should always point to the same dataset and that there should only ever be one representation of a given dataset. Choosing Between The Two Which format you use is entirely up to you, but there are some situations that lend themselves more to one instead of the other. First, lets look at the differences in your code that using one or the other might cause by taking the number 5 and adding 10. Example 1: Basic Usage Of Both Immutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 $balance = new ImmutableDecimal ( 5 ); 6 7 $newBalance = $balance -> add ( 10 ); 8 9 echo 'Current Balance: ' . $newBalance -> getValue (); 10 // Prints: 'Current Balance: 15' Mutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\MutableDecimal ; 4 5 $balance = new MutableDecimal ( 5 ); 6 7 $balance -> add ( 10 ); 8 9 echo 'Current Balance: ' . $balance -> getValue (); 10 // Prints: 'Current Balance: 15' How To Create Equivalence Between the Two In general, you can get the behavior of mutable objects with immutable objects by reassigning the new value to the same variable. This allows the state of the variable to evolve throughout the program, and results in the instance that was referenced in the previous line having its zval count reduced to zero. This allows garbage collection in PHP to periodically clean up all your orphaned instances. So then, why ever use immutable objects? It seems like using immutables will use a much larger amount of memory while doing the same exact thing. Well, consider the next example. Example 2: Side Effects Immutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 $oldBalance = new ImmutableDecimal ( 5 ); 6 $deposit = new ImmutableDecimal ( 10 ); 7 8 $newBalance = $oldBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 5 15 // Deposit: 10 16 // Current Balance: 15 Mutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\MutableDecimal ; 4 5 $oldBalance = new MutableDecimal ( 5 ); 6 $deposit = new MutableDecimal ( 10 ); 7 8 $newBalance = $oldBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 15 15 // Deposit: 10 16 // Current Balance: 15 Side Effects and Consistency As we can see from the second set of examples, assigning a value from a mutable function call can have side effects beyond the variable assignment . In fact, preserving the value of the original object requires a lot of attention to detail in the calling code. To achieve the same result as the immutable example with the mutable example, we would need to make a whole new object just for the calculation, which would look something like this: Example 3: Mutables Used Without Side Effects 1 <?php 2 use Samsara\\Fermat\\Values\\MutableDecimal ; 3 4 $oldBalance = new MutableDecimal ( 5 ); 5 $deposit = new MutableDecimal ( 10 ); 6 7 $newBalance = new MutableDecimal ( $oldBalance -> getValue ()); 8 $newBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 5 15 // Deposit: 10 16 // Current Balance: 15 Creating a new object on the fly to perform a calculation is in fact exactly how the implementation of immutables in Fermat is accomplished. Internally, any time a calculation has been performed, the new string with the resulting answer is stored in a newly created instance, instead of the instance that initiated the calculation. This can be seen if you look at the different implementations of the setValue() abstract method in the ImmutableDecimal and MutableDecimal classes. Implementations Of setValue() ImmutableDecimal 1 <?php 2 class ImmutableDecimal { 3 protected function setValue ( $value , $scale = null , $base = 10 ) 4 { 5 /* omitted transformations and sanity checks */ 6 7 return new ImmutableDecimal ( $value , $scale , $base ); 8 } 9 } MutableDecimal 1 <?php 2 class MutableDecimal { 3 protected function setValue ( $value , $scale = null , $base = 10 ) 4 { 5 /* omitted transformations and sanity checks */ 6 7 $this -> value = $this -> translateValue ( $value ); 8 9 return $this ; 10 } 11 } The ImmutableDecimal implementation returns a new instance, while the MutableDecimal implementation sets the internal $value property directly and returns the current instance. This is the only meaningful difference between the two classes. setValue() As A Protected Method For both mutable and immutable values, the setValue() method has a visibility of protected , preventing the calling scope from using it. This is intentional, as the values in these objects are meant to represent something closer to a memory address than a normal variable. Allowing setValue() to be called directly, even for mutable objects, could lead to some of the same problems that make memory address safety an issue for desktop applications. Each instance can instead be seen as a Finite-State Machine that evolves according to the state transitions defined on the object, i.e. the mathematical methods that are available on that class. This correctly reflects how math itself works, and helps prevent the developer from accidentally \"breaking\" math by inadvertantly inserting erroneous data in the middle of a series of calculations. In this way, the immutable values act as time saving measures and sanity preserving measures in the case that you want to ensure side effects don't occur. Instead of manually creating new instances for every calculation and running the risk of forgetting on one line in a large program, you can simply request an instance of ImmutableDecimal and it will do so automatically. The downside to this is that the newly created object is not referenced anywhere except in the return value. Without a reference, the object becomes inaccessible if you do not assign the returned result to a variable in the calling scope. Guidelines On When To Use Each Again, the exact usage of either is up to the developer, and it is possible to accomplish the same end result with either if the right design patterns are used. However, below is a brief rundown of when each is generally preferable. Mutables May Be Preferred When The number represents a physical state or evolving state that can only move in one direction, such as with a hashing function The number represents a value which always depends on its previous value, such as recursively calculating a sum, or compiling changes to a total from a ledger of financial entries The number represents a value that has defined state-dependent behavior, such as in a State Machine Immutables May Be Preferred When The number represents data that may be used in multiple, unrelated contexts, such as using a User ID to calculate other values The number represents a concrete state, and the result of the equation will be a derived or dynamically generated value that doesn't actually exist within the data, such as using a population value to estimate average income The number represents a value that may be used multiple times for separate calculations without changing, such as the mean in a normal distribution In general, for any given situation, one of these options will lead to cleaner, simpler, and easier to maintain code, while the other will lead to more fragile, harder to understand, and difficult to maintain code. Which is which depends very much on the specific usage of that piece of data within your application.","title":"Mutable vs. Immutable"},{"location":"getting-started/mutability/#mutability-in-php","text":"Mutability is a property of instances of objects in object oriented languages. It refers to whether or not a method on the object changes the data referenced by that object's pointer (or in the case of PHP, its zval). If the method changes the data referenced by the object's zval, it is considered to be mutable. If the method does not change the data referenced, it is considered immutable. In general, mutable objects have no memory of their previous states and evolve with the code as more operations are performed on them. Most objects that represent database results are mutable, such as those used in Doctrine or Eloquent. This reflects two properties of database results: A change in the data should still point to the same database entry. There should only ever be one set of data associated with a single database entry. Thus, mutability is not a situation where all objects should be one way or the other, rather it depends on what the meaning of the data contained in the object is. In PHP, mutability comes with the additional issue of scoping. For most purposes, objects can be treated as if they are passed by-reference at all times. See Also The PHP Documentation contains examples on the specifics of how objects are passed between scopes. While it isn't exactly the same as passing by reference, it behaves in a very similar way in most situations. See the php.net page for more information. This is not an issue for some applications, mainly those where all operations are treated as atomic. However, this is not the case for many mathematical operations.","title":"Mutability In PHP"},{"location":"getting-started/mutability/#mutability-in-fermat","text":"Because of these factors, mutability in Fermat is generally left up to the developer using the library. Both mutable and immutable implementations are provided for most values, and the developer using Fermat is asked to choose which type they want at the time it is created. Mutables Are For Niche Use-Cases In This Library Although there are real use-cases for having a mutable numeric value, as detailed within this page, mutables generally make little sense for numeric types, such as integer or float . The values in this library should be treated more like numeric types that have fluent object interfaces than like normal PHP objects. For this reason, most developers in most situations should use the immutable types provided in this library. Immutables are returned automatically in all situations where the library generates or creates a number, such as from the SequenceProvider or from Numbers::makePi() . Unless you are absolutely certain that your use-case calls for a mutable numeric, it is generally safer to use the immutable values. Mutables have been provided to support specific behaviors seen for native integer and float types, namely reassignment operators like += and /= . The exceptions to this rule are usually noted within this documentation, and nearly always represent an underlying data-structure that should always be treated one way or the other. In other cases, such as with implementations of the Coordinate abstract class, the reasons for making all the value classes one way or the other are related to the underlying math concepts they are meant to represent having some of the same properties as database results: that they should always point to the same dataset and that there should only ever be one representation of a given dataset.","title":"Mutability In Fermat"},{"location":"getting-started/mutability/#choosing-between-the-two","text":"Which format you use is entirely up to you, but there are some situations that lend themselves more to one instead of the other. First, lets look at the differences in your code that using one or the other might cause by taking the number 5 and adding 10. Example 1: Basic Usage Of Both Immutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 $balance = new ImmutableDecimal ( 5 ); 6 7 $newBalance = $balance -> add ( 10 ); 8 9 echo 'Current Balance: ' . $newBalance -> getValue (); 10 // Prints: 'Current Balance: 15' Mutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\MutableDecimal ; 4 5 $balance = new MutableDecimal ( 5 ); 6 7 $balance -> add ( 10 ); 8 9 echo 'Current Balance: ' . $balance -> getValue (); 10 // Prints: 'Current Balance: 15'","title":"Choosing Between The Two"},{"location":"getting-started/mutability/#how-to-create-equivalence-between-the-two","text":"In general, you can get the behavior of mutable objects with immutable objects by reassigning the new value to the same variable. This allows the state of the variable to evolve throughout the program, and results in the instance that was referenced in the previous line having its zval count reduced to zero. This allows garbage collection in PHP to periodically clean up all your orphaned instances. So then, why ever use immutable objects? It seems like using immutables will use a much larger amount of memory while doing the same exact thing. Well, consider the next example. Example 2: Side Effects Immutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 $oldBalance = new ImmutableDecimal ( 5 ); 6 $deposit = new ImmutableDecimal ( 10 ); 7 8 $newBalance = $oldBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 5 15 // Deposit: 10 16 // Current Balance: 15 Mutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\MutableDecimal ; 4 5 $oldBalance = new MutableDecimal ( 5 ); 6 $deposit = new MutableDecimal ( 10 ); 7 8 $newBalance = $oldBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 15 15 // Deposit: 10 16 // Current Balance: 15","title":"How To Create Equivalence Between the Two"},{"location":"getting-started/mutability/#side-effects-and-consistency","text":"As we can see from the second set of examples, assigning a value from a mutable function call can have side effects beyond the variable assignment . In fact, preserving the value of the original object requires a lot of attention to detail in the calling code. To achieve the same result as the immutable example with the mutable example, we would need to make a whole new object just for the calculation, which would look something like this: Example 3: Mutables Used Without Side Effects 1 <?php 2 use Samsara\\Fermat\\Values\\MutableDecimal ; 3 4 $oldBalance = new MutableDecimal ( 5 ); 5 $deposit = new MutableDecimal ( 10 ); 6 7 $newBalance = new MutableDecimal ( $oldBalance -> getValue ()); 8 $newBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 5 15 // Deposit: 10 16 // Current Balance: 15 Creating a new object on the fly to perform a calculation is in fact exactly how the implementation of immutables in Fermat is accomplished. Internally, any time a calculation has been performed, the new string with the resulting answer is stored in a newly created instance, instead of the instance that initiated the calculation. This can be seen if you look at the different implementations of the setValue() abstract method in the ImmutableDecimal and MutableDecimal classes. Implementations Of setValue() ImmutableDecimal 1 <?php 2 class ImmutableDecimal { 3 protected function setValue ( $value , $scale = null , $base = 10 ) 4 { 5 /* omitted transformations and sanity checks */ 6 7 return new ImmutableDecimal ( $value , $scale , $base ); 8 } 9 } MutableDecimal 1 <?php 2 class MutableDecimal { 3 protected function setValue ( $value , $scale = null , $base = 10 ) 4 { 5 /* omitted transformations and sanity checks */ 6 7 $this -> value = $this -> translateValue ( $value ); 8 9 return $this ; 10 } 11 } The ImmutableDecimal implementation returns a new instance, while the MutableDecimal implementation sets the internal $value property directly and returns the current instance. This is the only meaningful difference between the two classes. setValue() As A Protected Method For both mutable and immutable values, the setValue() method has a visibility of protected , preventing the calling scope from using it. This is intentional, as the values in these objects are meant to represent something closer to a memory address than a normal variable. Allowing setValue() to be called directly, even for mutable objects, could lead to some of the same problems that make memory address safety an issue for desktop applications. Each instance can instead be seen as a Finite-State Machine that evolves according to the state transitions defined on the object, i.e. the mathematical methods that are available on that class. This correctly reflects how math itself works, and helps prevent the developer from accidentally \"breaking\" math by inadvertantly inserting erroneous data in the middle of a series of calculations. In this way, the immutable values act as time saving measures and sanity preserving measures in the case that you want to ensure side effects don't occur. Instead of manually creating new instances for every calculation and running the risk of forgetting on one line in a large program, you can simply request an instance of ImmutableDecimal and it will do so automatically. The downside to this is that the newly created object is not referenced anywhere except in the return value. Without a reference, the object becomes inaccessible if you do not assign the returned result to a variable in the calling scope.","title":"Side Effects and Consistency"},{"location":"getting-started/mutability/#guidelines-on-when-to-use-each","text":"Again, the exact usage of either is up to the developer, and it is possible to accomplish the same end result with either if the right design patterns are used. However, below is a brief rundown of when each is generally preferable.","title":"Guidelines On When To Use Each"},{"location":"getting-started/mutability/#mutables-may-be-preferred-when","text":"The number represents a physical state or evolving state that can only move in one direction, such as with a hashing function The number represents a value which always depends on its previous value, such as recursively calculating a sum, or compiling changes to a total from a ledger of financial entries The number represents a value that has defined state-dependent behavior, such as in a State Machine","title":"Mutables May Be Preferred When"},{"location":"getting-started/mutability/#immutables-may-be-preferred-when","text":"The number represents data that may be used in multiple, unrelated contexts, such as using a User ID to calculate other values The number represents a concrete state, and the result of the equation will be a derived or dynamically generated value that doesn't actually exist within the data, such as using a population value to estimate average income The number represents a value that may be used multiple times for separate calculations without changing, such as the mean in a normal distribution In general, for any given situation, one of these options will lead to cleaner, simpler, and easier to maintain code, while the other will lead to more fragile, harder to understand, and difficult to maintain code. Which is which depends very much on the specific usage of that piece of data within your application.","title":"Immutables May Be Preferred When"},{"location":"getting-started/using-factories/","text":".katex img { object-fit: fill; padding: unset; display: block; position: absolute; width: 100%; height: inherit; } Fermat provides factory classes to make it easier to get instances of the various Value classes. The available factories are: Collections Numbers All factories are classes that have only static methods and constants. The Collections Factory Class The Collections factory class currently has no methods or constants, and exists as a placeholder. The Numbers Factory Class The Numbers factory class provides a way to use the Value classes which implement the SimpleNumberInterface in Fermat without being as specific as those classes may require. Consider the following code: Available Factory Methods The following factory methods are available on the Numbers class. Numbers::make(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to create $value The value to create the instance with $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type created with the provided arguments as parameters This factory method returns an instance of DecimalInterface or FractionInterface , depending on the $type given and the $value provided. Type Can Be An Instance Instead of providing a fully qualified class name for $type , you can provide an instance of a supported object. The make() function will attempt to force the $value into that type. Type Must Be A Supported FQCN or Class If $type is the fully qualified class name or instance of an object other than ImmutableDecimal , MutableDecimal , ImmutableFraction , or MutableFraction , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeFromBase10(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to create $value The value to create the instance with $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type created with the provided arguments as parameters This factory method will created a base-10 instance of $type using the provided $value , then convert that value in the $base provided. This allows you to provide a $value in base-10, but get an instance in a different base. Numbers::makeOrDont(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to ensure $value The original value which was provided $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type with the provided $value ; if a new instance is created, it has the given $scale and $base This factory method will coerce the given $value into the requested $type . Unlike using direct instantiation , this factory will perform all the correct conversions on the various possible values necessary to ensure a valid instance is constructed. If the provided $value already matches the requested $type , then it is returned without modification. This makes the makeOrDont() factory ideal for accepting any possible valid constructor value as an input while also guaranteeing that your implementation is working with a particular value. This is how the math operations such as add($num) are able to accept virtually any input directly. Arrays of Values An array can be provided as the $value argument to this function. If it is, then a recursive call on Numbers::makeOrDont() is made. This will be done at any level of nested arrays. Low Cost Function Call This factory method returns the provided value after only making a call to is_object() and a single use of instanceof if the provided $value matches the requested $type . In general, it is written to build the requested $type in the most efficient way possible given the provided inputs. This makes calls to this factory method very low cost from both a memory and computation perspective if you need the value to be a guaranteed instance of a particular class. Mixed Argument Limitations The $values argument is listed in this documentation as mixed . In fact, the valid input types are: An integer A float A string that contains only a single number in base 10 A string that contains only a single number in base 10 with the i character at the end, denoting an imaginary value An object that implements NumberInterface If the provided $value matches none of these, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeFractionFromString(string $type, string $value, int $base = 10) $type The type of SimpleNumberInterface implementation to ensure $value The original value which was provided $base The base of the instance created return An instance of the specified FractionInterface class with the provided arguments as parameters; translates the string $value into the correct constructor arguments This factory method will take a string as its input and provide an instance of either ImmutableFraction or MutableFraction depending on the value given for $type . Type Must Be A Supported FQCN If $type is the fully qualified class name of an object other than ImmutableFraction or MutableFraction , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Value Must Contain at Most One Fraction Bar '/' If $value contains more than one fraction bar, which is assumed to be represented by the character / , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makePi(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number pi ( \u03c0 \\pi \u03c0 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::PI constant. If a scale of greater than 100 is requested, then a call is made to ConstantProvider::makePi() which computes digits of pi using the most efficient computational method currently available. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeTau(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number tau ( \u03c4 \\tau \u03c4 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::TAU constant. If a scale of greater than 100 is requested, then a call is made to Numbers::makePi() which uses the methods described above, after which the result is multiplied by 2. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::make2Pi(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 2pi ( 2 \u03c0 2\\pi 2 \u03c0 ) as an instance of ImmutableNumber to the requested $scale . This factory method is an alias for Numbers::makeTau() . Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeE(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return Euler's number ( e e e ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::E constant. If a scale of greater than 100 is requested, then a call is made to ConstantProvider::makeE() which uses a fast converging series to calculate digits of e. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeGoldenRatio(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The golden ratio ( \u03c6 \\varphi \u03c6 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::GOLDEN_RATION constant. Scale Must Be 1-100 If a scale of less than 1 or greater than 100 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeNaturalLog10(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The natural log of 10 as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::LN_10 constant. If a scale of greater than 100 is requested, then an exception is thrown. Scale Must Be 1-100 If a scale of less than 1 or greater than 100 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeOne(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 1 as an instance of ImmutableNumber to the requested $scale . If $scale is null, then the instance returned will have a scale of 100. Numbers::makeZero(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 0 as an instance of ImmutableNumber to the requested $scale . If $scale is null, then the instance returned will have a scale of 100. Static Methods The Numbers factory class also has two static methods that work as a global variable for the Fermat library. Numbers::getDefaultCalcMode() return The current value of the protected parameter Numbers::$defaultCalcMode By default, this value is set to Selectable::CALC_MODE_PRECISION , resulting in the arbitrary scale implementations being used for all math functions. For Internal Use This function is meant to be called within the constructors of values that implement the NumberInterface and which use the provided arithmetic traits. It is likely to have limited utility outside of these situations. Numbers::setDefaultCalcMode(int $mode) $mode The calculation mode integer; expected to match constant values on Selectable return Void This static method sets the protected parameter Numbers::$defaultCalcMode to the provided $mode . The Fermat library assumes that only values which are constants on the Selectable class are used as inputs for this function. Using other values for $mode may be possible in the event you are extending the Fermat classes with your own implementations, however an unknown $mode will cause the classes provided in this library to fall back to Selectable::CALC_MODE_PRECISION . This behavior could be changed by overriding the methods defined in the ArithmeticSelectionTrait . See Also For more information on the calculation modes available in Fermat, see the page on Calculation Modes . For more information on extending these values, please see the documentation in the \"Extending\" section.","title":"Using The Factories"},{"location":"getting-started/using-factories/#the-collections-factory-class","text":"The Collections factory class currently has no methods or constants, and exists as a placeholder.","title":"The Collections Factory Class"},{"location":"getting-started/using-factories/#the-numbers-factory-class","text":"The Numbers factory class provides a way to use the Value classes which implement the SimpleNumberInterface in Fermat without being as specific as those classes may require. Consider the following code:","title":"The Numbers Factory Class"},{"location":"getting-started/using-factories/#available-factory-methods","text":"The following factory methods are available on the Numbers class. Numbers::make(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to create $value The value to create the instance with $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type created with the provided arguments as parameters This factory method returns an instance of DecimalInterface or FractionInterface , depending on the $type given and the $value provided. Type Can Be An Instance Instead of providing a fully qualified class name for $type , you can provide an instance of a supported object. The make() function will attempt to force the $value into that type. Type Must Be A Supported FQCN or Class If $type is the fully qualified class name or instance of an object other than ImmutableDecimal , MutableDecimal , ImmutableFraction , or MutableFraction , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeFromBase10(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to create $value The value to create the instance with $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type created with the provided arguments as parameters This factory method will created a base-10 instance of $type using the provided $value , then convert that value in the $base provided. This allows you to provide a $value in base-10, but get an instance in a different base. Numbers::makeOrDont(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to ensure $value The original value which was provided $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type with the provided $value ; if a new instance is created, it has the given $scale and $base This factory method will coerce the given $value into the requested $type . Unlike using direct instantiation , this factory will perform all the correct conversions on the various possible values necessary to ensure a valid instance is constructed. If the provided $value already matches the requested $type , then it is returned without modification. This makes the makeOrDont() factory ideal for accepting any possible valid constructor value as an input while also guaranteeing that your implementation is working with a particular value. This is how the math operations such as add($num) are able to accept virtually any input directly. Arrays of Values An array can be provided as the $value argument to this function. If it is, then a recursive call on Numbers::makeOrDont() is made. This will be done at any level of nested arrays. Low Cost Function Call This factory method returns the provided value after only making a call to is_object() and a single use of instanceof if the provided $value matches the requested $type . In general, it is written to build the requested $type in the most efficient way possible given the provided inputs. This makes calls to this factory method very low cost from both a memory and computation perspective if you need the value to be a guaranteed instance of a particular class. Mixed Argument Limitations The $values argument is listed in this documentation as mixed . In fact, the valid input types are: An integer A float A string that contains only a single number in base 10 A string that contains only a single number in base 10 with the i character at the end, denoting an imaginary value An object that implements NumberInterface If the provided $value matches none of these, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeFractionFromString(string $type, string $value, int $base = 10) $type The type of SimpleNumberInterface implementation to ensure $value The original value which was provided $base The base of the instance created return An instance of the specified FractionInterface class with the provided arguments as parameters; translates the string $value into the correct constructor arguments This factory method will take a string as its input and provide an instance of either ImmutableFraction or MutableFraction depending on the value given for $type . Type Must Be A Supported FQCN If $type is the fully qualified class name of an object other than ImmutableFraction or MutableFraction , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Value Must Contain at Most One Fraction Bar '/' If $value contains more than one fraction bar, which is assumed to be represented by the character / , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makePi(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number pi ( \u03c0 \\pi \u03c0 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::PI constant. If a scale of greater than 100 is requested, then a call is made to ConstantProvider::makePi() which computes digits of pi using the most efficient computational method currently available. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeTau(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number tau ( \u03c4 \\tau \u03c4 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::TAU constant. If a scale of greater than 100 is requested, then a call is made to Numbers::makePi() which uses the methods described above, after which the result is multiplied by 2. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::make2Pi(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 2pi ( 2 \u03c0 2\\pi 2 \u03c0 ) as an instance of ImmutableNumber to the requested $scale . This factory method is an alias for Numbers::makeTau() . Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeE(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return Euler's number ( e e e ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::E constant. If a scale of greater than 100 is requested, then a call is made to ConstantProvider::makeE() which uses a fast converging series to calculate digits of e. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeGoldenRatio(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The golden ratio ( \u03c6 \\varphi \u03c6 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::GOLDEN_RATION constant. Scale Must Be 1-100 If a scale of less than 1 or greater than 100 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeNaturalLog10(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The natural log of 10 as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::LN_10 constant. If a scale of greater than 100 is requested, then an exception is thrown. Scale Must Be 1-100 If a scale of less than 1 or greater than 100 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeOne(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 1 as an instance of ImmutableNumber to the requested $scale . If $scale is null, then the instance returned will have a scale of 100. Numbers::makeZero(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 0 as an instance of ImmutableNumber to the requested $scale . If $scale is null, then the instance returned will have a scale of 100.","title":"Available Factory Methods"},{"location":"getting-started/using-factories/#static-methods","text":"The Numbers factory class also has two static methods that work as a global variable for the Fermat library. Numbers::getDefaultCalcMode() return The current value of the protected parameter Numbers::$defaultCalcMode By default, this value is set to Selectable::CALC_MODE_PRECISION , resulting in the arbitrary scale implementations being used for all math functions. For Internal Use This function is meant to be called within the constructors of values that implement the NumberInterface and which use the provided arithmetic traits. It is likely to have limited utility outside of these situations. Numbers::setDefaultCalcMode(int $mode) $mode The calculation mode integer; expected to match constant values on Selectable return Void This static method sets the protected parameter Numbers::$defaultCalcMode to the provided $mode . The Fermat library assumes that only values which are constants on the Selectable class are used as inputs for this function. Using other values for $mode may be possible in the event you are extending the Fermat classes with your own implementations, however an unknown $mode will cause the classes provided in this library to fall back to Selectable::CALC_MODE_PRECISION . This behavior could be changed by overriding the methods defined in the ArithmeticSelectionTrait . See Also For more information on the calculation modes available in Fermat, see the page on Calculation Modes . For more information on extending these values, please see the documentation in the \"Extending\" section.","title":"Static Methods"},{"location":"modules/algebra-expressions/about/","text":"","title":"Algebra Expressions"},{"location":"modules/complex-numbers/about/","text":"","title":"Complex Numbers"},{"location":"modules/complex-numbers/factory-class/","text":"The ComplexNumbers Factory Class The Samsara\\Fermat\\ComplexNumbers factory class allows you to create instances of the Value classes which implement the ComplexNumberInterface . Available Constants The following constants are available on the ComplexNumbers class. ComplexNumbers::IMMUTABLE_COMPLEX type string value The fully qualified class name of the ImmutableComplexNumber class. ComplexNumbers::MUTABLE_COMPLEX type string value The fully qualified class name of the MutableComplexNumber class. Available Factory Methods The following factory methods are available on the ComplexNumbers class. ComplexNumbers::make(string $type, string|array|NumberCollectionInterface $value) $type The type (mutable or immutable) of ComplexNumber to create $value The initial value of the created instance; see notes below return The instance created from the given inputs; the instance will extend ComplexNumber and implement the ComplexNumberInterface If the value is a string , it is assumed to be in the format: REAL+IMAGINARY or REAL-IMAGINARY Note In string format, the input for this factory method MAY have a minus sign in front of the real part, but MUST have either a plus or minus sign in front of the imaginary part. 1 The sign is applied to the number that follows and is stored in the `ImmutableDecimal` for that number. You may also provide either an array or a NumberCollection that have exactly two values which implement the SimpleNumberInterface . Warning The real part must have a key of 0 , and the imaginary part must have a key of 1 in the given array or NumberCollection .","title":"The ComplexNumbers Factory Class"},{"location":"modules/complex-numbers/factory-class/#the-complexnumbers-factory-class","text":"The Samsara\\Fermat\\ComplexNumbers factory class allows you to create instances of the Value classes which implement the ComplexNumberInterface .","title":"The ComplexNumbers Factory Class"},{"location":"modules/complex-numbers/factory-class/#available-constants","text":"The following constants are available on the ComplexNumbers class. ComplexNumbers::IMMUTABLE_COMPLEX type string value The fully qualified class name of the ImmutableComplexNumber class. ComplexNumbers::MUTABLE_COMPLEX type string value The fully qualified class name of the MutableComplexNumber class.","title":"Available Constants"},{"location":"modules/complex-numbers/factory-class/#available-factory-methods","text":"The following factory methods are available on the ComplexNumbers class. ComplexNumbers::make(string $type, string|array|NumberCollectionInterface $value) $type The type (mutable or immutable) of ComplexNumber to create $value The initial value of the created instance; see notes below return The instance created from the given inputs; the instance will extend ComplexNumber and implement the ComplexNumberInterface If the value is a string , it is assumed to be in the format: REAL+IMAGINARY or REAL-IMAGINARY Note In string format, the input for this factory method MAY have a minus sign in front of the real part, but MUST have either a plus or minus sign in front of the imaginary part. 1 The sign is applied to the number that follows and is stored in the `ImmutableDecimal` for that number. You may also provide either an array or a NumberCollection that have exactly two values which implement the SimpleNumberInterface . Warning The real part must have a key of 0 , and the imaginary part must have a key of 1 in the given array or NumberCollection .","title":"Available Factory Methods"},{"location":"modules/coordinate-systems/about/","text":"The Fermat Coordinate Systems Module This module provides objects related to the geometry of different coordinate systems, and how they relate to each other.","title":"Coordinate Systems"},{"location":"modules/coordinate-systems/about/#the-fermat-coordinate-systems-module","text":"This module provides objects related to the geometry of different coordinate systems, and how they relate to each other.","title":"The Fermat Coordinate Systems Module"},{"location":"modules/linear-algebra/about/","text":"","title":"Linear Algebra"},{"location":"modules/linear-algebra/matrix-factory/","text":"The Matrices Factory Class The Samsara\\Fermat\\Matrices factory class provides access to several pre-built matrices that may be useful in common situations. Available Constants The following constants are available on the Matrices class. Matrices::IMMUTABLE_MATRIX type string value The fully qualified class name of the ImmutableMatrix class. Matrices::MUTABLE_MATRIX type string value The fully qualified class name of the MutableMatrix class. Available Factory Methods The following factory methods are available on the Matrices class. Matrices::zeroMatrix(string $type, int $rows, int $columns) $type The type (mutable or immutable) of Matrix to create $rows The number of rows the generated matrix should have $columns The number of columns the generated matrix should have return An instance of the specified matrix type with the given dimensions where all values in the matrix are the number zero For Example A zero matrix of two rows and three columns would look like: 1 ``` 2 [0 0 0] 3 [0 0 0] 4 ``` Matrices::onesMatrix(string $type, int $rows, int $columns) $type The type (mutable or immutable) of Matrix to create $rows The number of rows the generated matrix should have $columns The number of columns the generated matrix should have return An instance of the specified matrix type with the given dimensions where all values in the matrix are the number one For Example A ones matrix of two rows and three columns would look like: 1 ``` 2 [1 1 1] 3 [1 1 1] 4 ``` Matrices::identityMatrix(string $type, int $size) $type The type (mutable or immutable) of Matrix to create $size The number of rows and columns the generated matrix should have return A square matrix where the dimensions match the integer given in $size . This matrix is an identity matrix, which is often used in matrix math, where the diagonal consists of ones, and all other values are zero For Example An identity matrix of size three would look like: 1 ``` 2 [1 0 0] 3 [0 1 0] 4 [0 0 1] 5 ``` Matrices::cofactorMatrix(string $type, int $size) $type The type (mutable or immutable) of Matrix to create $size The number of rows and columns the generated matrix should have return A square matrix where the dimensions match the integer given in $size . The matrix is filled with alternating values of 1 and -1 in a checkerboard pattern, starting with positive 1 in position [0, 0]. When multiplied by another matrix, this will swap the sign of every other value in the matrix. For Example A cofactor matrix of size three would look like: 1 ``` 2 [+ - +] 3 [- + -] 4 [+ - +] 5 ```","title":"The Matrices Factory Class"},{"location":"modules/linear-algebra/matrix-factory/#the-matrices-factory-class","text":"The Samsara\\Fermat\\Matrices factory class provides access to several pre-built matrices that may be useful in common situations.","title":"The Matrices Factory Class"},{"location":"modules/linear-algebra/matrix-factory/#available-constants","text":"The following constants are available on the Matrices class. Matrices::IMMUTABLE_MATRIX type string value The fully qualified class name of the ImmutableMatrix class. Matrices::MUTABLE_MATRIX type string value The fully qualified class name of the MutableMatrix class.","title":"Available Constants"},{"location":"modules/linear-algebra/matrix-factory/#available-factory-methods","text":"The following factory methods are available on the Matrices class. Matrices::zeroMatrix(string $type, int $rows, int $columns) $type The type (mutable or immutable) of Matrix to create $rows The number of rows the generated matrix should have $columns The number of columns the generated matrix should have return An instance of the specified matrix type with the given dimensions where all values in the matrix are the number zero For Example A zero matrix of two rows and three columns would look like: 1 ``` 2 [0 0 0] 3 [0 0 0] 4 ``` Matrices::onesMatrix(string $type, int $rows, int $columns) $type The type (mutable or immutable) of Matrix to create $rows The number of rows the generated matrix should have $columns The number of columns the generated matrix should have return An instance of the specified matrix type with the given dimensions where all values in the matrix are the number one For Example A ones matrix of two rows and three columns would look like: 1 ``` 2 [1 1 1] 3 [1 1 1] 4 ``` Matrices::identityMatrix(string $type, int $size) $type The type (mutable or immutable) of Matrix to create $size The number of rows and columns the generated matrix should have return A square matrix where the dimensions match the integer given in $size . This matrix is an identity matrix, which is often used in matrix math, where the diagonal consists of ones, and all other values are zero For Example An identity matrix of size three would look like: 1 ``` 2 [1 0 0] 3 [0 1 0] 4 [0 0 1] 5 ``` Matrices::cofactorMatrix(string $type, int $size) $type The type (mutable or immutable) of Matrix to create $size The number of rows and columns the generated matrix should have return A square matrix where the dimensions match the integer given in $size . The matrix is filled with alternating values of 1 and -1 in a checkerboard pattern, starting with positive 1 in position [0, 0]. When multiplied by another matrix, this will swap the sign of every other value in the matrix. For Example A cofactor matrix of size three would look like: 1 ``` 2 [+ - +] 3 [- + -] 4 [+ - +] 5 ```","title":"Available Factory Methods"},{"location":"modules/stats/about/","text":".katex img { object-fit: fill; padding: unset; display: block; position: absolute; width: 100%; height: inherit; } The Fermat Stats Module This module provides various mathematical objects and functions to help a program perform complex statistical calculations, most often useful in scientific, data processing, and simulation based programs. Using Poisson Distributions, it is relatively easy to create an application that simulates sports matches. Using Normal Distributions, it becomes easy to generate data points that have properties weighted according to parameters that depend on the overall population of points. While many programs don't see a benefit from utilizing statistical operations and functions, the ones that do benefit from it immensely. Key Concepts This section details the key concepts of the library to understand how to create your program using it. This does not cover the key mathematical concepts within statistics that this program implements. Distributions Within Fermat Stats, a Distribution is an object which extends the Distribution Type and implements the DistributionInterface . While the parameters of a concrete distribution varies depending on what mathematical concept it represents, all distributions generally have a parameter that describes the 'most likely outcome', and a parameter that describes the 'likelihood of being a different outcome'. Generally, the likelihood decreases the further you are from the 'most likely outcome'. For most types of mathematical distributions, the 'most likely outcome' is related to the mean or average of the distribution, and the 'likelihood of being a different outcome' is related to the variance or standard deviation. In Normal Distributions, the Mean and Standard Deviation are the two parameters, which are then combined with the Gauss Error Function and a variety of other mathematical functions to give us the properties of a normal distribution. Poisson and Exponential distributions however are based on a different concept, time to recurrence. These are more useful in situations where you might be figuring out the chance of seeing a '100 year flood' within the next 10 years, for instance. Because of their different constructions and different purposes, the Distributions within Fermat Stats share a less common interface than, for instance, the Number and ComplexNumber classes. StatsProvider The StatsProvider contains several statistics static functions that allow the direct arbitrary precision calculation of some of the most complex formulas in statistics. Of note, there is an implementation within the StatsProvider of the Inverse Gauss Error Function, usually written as e r f \u2212 1 ( x ) {erf}^{-1}(x) er f \u2212 1 ( x ) . This function in particular is horrendously complicated to formulate in a way that preserves arbitrary precision and is still conformal to the needs of a computer programming language. It may be the situation in some cases that this single function implementation is worth installing the entire library and module.","title":"Stats"},{"location":"modules/stats/about/#the-fermat-stats-module","text":"This module provides various mathematical objects and functions to help a program perform complex statistical calculations, most often useful in scientific, data processing, and simulation based programs. Using Poisson Distributions, it is relatively easy to create an application that simulates sports matches. Using Normal Distributions, it becomes easy to generate data points that have properties weighted according to parameters that depend on the overall population of points. While many programs don't see a benefit from utilizing statistical operations and functions, the ones that do benefit from it immensely.","title":"The Fermat Stats Module"},{"location":"modules/stats/about/#key-concepts","text":"This section details the key concepts of the library to understand how to create your program using it. This does not cover the key mathematical concepts within statistics that this program implements.","title":"Key Concepts"},{"location":"modules/stats/about/#distributions","text":"Within Fermat Stats, a Distribution is an object which extends the Distribution Type and implements the DistributionInterface . While the parameters of a concrete distribution varies depending on what mathematical concept it represents, all distributions generally have a parameter that describes the 'most likely outcome', and a parameter that describes the 'likelihood of being a different outcome'. Generally, the likelihood decreases the further you are from the 'most likely outcome'. For most types of mathematical distributions, the 'most likely outcome' is related to the mean or average of the distribution, and the 'likelihood of being a different outcome' is related to the variance or standard deviation. In Normal Distributions, the Mean and Standard Deviation are the two parameters, which are then combined with the Gauss Error Function and a variety of other mathematical functions to give us the properties of a normal distribution. Poisson and Exponential distributions however are based on a different concept, time to recurrence. These are more useful in situations where you might be figuring out the chance of seeing a '100 year flood' within the next 10 years, for instance. Because of their different constructions and different purposes, the Distributions within Fermat Stats share a less common interface than, for instance, the Number and ComplexNumber classes.","title":"Distributions"},{"location":"modules/stats/about/#statsprovider","text":"The StatsProvider contains several statistics static functions that allow the direct arbitrary precision calculation of some of the most complex formulas in statistics. Of note, there is an implementation within the StatsProvider of the Inverse Gauss Error Function, usually written as e r f \u2212 1 ( x ) {erf}^{-1}(x) er f \u2212 1 ( x ) . This function in particular is horrendously complicated to formulate in a way that preserves arbitrary precision and is still conformal to the needs of a computer programming language. It may be the situation in some cases that this single function implementation is worth installing the entire library and module.","title":"StatsProvider"},{"location":"performance/arithmetic/","text":"Arithmetic Performance Below are the arithmetic operations available in Fermat and performance information about using them. add() add Native Mode Ops/sec 150,000 EINOs 565 Auto Mode Ops/sec 155,000 EINOs 550 Precision Mode Ops/sec 150,000 EINOs 565 Characteristics Scale Sensitivity Low Notes: None subtract() subtract Native Mode Ops/sec 150,000 EINOs 565 Auto Mode Ops/sec 155,000 EINOs 550 Precision Mode Ops/sec 150,000 EINOs 565 Characteristics Scale Sensitivity Low Notes: None multiply() multiply Native Mode Ops/sec 150,000 EINOs 565 Auto Mode Ops/sec 155,000 EINOs 550 Precision Mode Ops/sec 150,000 EINOs 565 Characteristics Scale Sensitivity Low Notes: None divide() divide Native Mode Ops/sec 150,000 EINOs 565 Auto Mode Ops/sec 125,000 EINOs 680 Precision Mode Ops/sec 150,000 EINOs 565 Characteristics Scale Sensitivity High Notes: Precision mode performance is around 25,000 Ops/sec at a scale setting of 50. pow() pow Native Mode Ops/sec 150,000 EINOs 565 Auto Mode Ops/sec 125,000 EINOs 680 Precision Mode Ops/sec 150,000 EINOs 565 Characteristics Scale Sensitivity Low - Extreme Note: Scale sensitivity is low if the exponent is an integer, however scale sensitivity is extreme if the exponent has a decimal component. Precision mode performance is around 6,500 Ops/sec at a scale setting of 50 with a decimal exponent. sqrt() sqrt Native Mode Ops/sec 300,000 EINOs 150 Auto Mode Ops/sec 125,000 EINOs 360 Precision Mode Ops/sec 250,000 EINOs 180 Characteristics Scale Sensitivity Low Notes:","title":"Arithmetic"},{"location":"performance/arithmetic/#arithmetic-performance","text":"Below are the arithmetic operations available in Fermat and performance information about using them. add()","title":"Arithmetic Performance"},{"location":"performance/arithmetic/#add","text":"Native Mode Ops/sec 150,000 EINOs 565 Auto Mode Ops/sec 155,000 EINOs 550 Precision Mode Ops/sec 150,000 EINOs 565 Characteristics Scale Sensitivity Low Notes: None subtract()","title":"add"},{"location":"performance/arithmetic/#subtract","text":"Native Mode Ops/sec 150,000 EINOs 565 Auto Mode Ops/sec 155,000 EINOs 550 Precision Mode Ops/sec 150,000 EINOs 565 Characteristics Scale Sensitivity Low Notes: None multiply()","title":"subtract"},{"location":"performance/arithmetic/#multiply","text":"Native Mode Ops/sec 150,000 EINOs 565 Auto Mode Ops/sec 155,000 EINOs 550 Precision Mode Ops/sec 150,000 EINOs 565 Characteristics Scale Sensitivity Low Notes: None divide()","title":"multiply"},{"location":"performance/arithmetic/#divide","text":"Native Mode Ops/sec 150,000 EINOs 565 Auto Mode Ops/sec 125,000 EINOs 680 Precision Mode Ops/sec 150,000 EINOs 565 Characteristics Scale Sensitivity High Notes: Precision mode performance is around 25,000 Ops/sec at a scale setting of 50. pow()","title":"divide"},{"location":"performance/arithmetic/#pow","text":"Native Mode Ops/sec 150,000 EINOs 565 Auto Mode Ops/sec 125,000 EINOs 680 Precision Mode Ops/sec 150,000 EINOs 565 Characteristics Scale Sensitivity Low - Extreme Note: Scale sensitivity is low if the exponent is an integer, however scale sensitivity is extreme if the exponent has a decimal component. Precision mode performance is around 6,500 Ops/sec at a scale setting of 50 with a decimal exponent. sqrt()","title":"pow"},{"location":"performance/arithmetic/#sqrt","text":"Native Mode Ops/sec 300,000 EINOs 150 Auto Mode Ops/sec 125,000 EINOs 360 Precision Mode Ops/sec 250,000 EINOs 180 Characteristics Scale Sensitivity Low Notes:","title":"sqrt"},{"location":"performance/logarithms/","text":"Logarithms Performance Below are the logarithmic operations available in Fermat and performance information about using them. ln() ln Native Mode Ops/sec 100,000 EINOs 350 Auto Mode Ops/sec 50,000 EINOs 700 Precision Mode Ops/sec 50,000 EINOs 700 Characteristics Scale Sensitivity High Note: This operation suffers enormously if ext-decimal is not available. log10() log10 Native Mode Ops/sec 100,000 EINOs 320 Auto Mode Ops/sec 40,000 EINOs 800 Precision Mode Ops/sec 40,000 EINOs 800 Characteristics Scale Sensitivity High Note: This operation suffers enormously if ext-decimal is not available. exp() exp Native Mode Ops/sec 100,000 EINOs 350 Auto Mode Ops/sec 80,000 EINOs 435 Precision Mode Ops/sec 80,000 EINOs 435 Characteristics Scale Sensitivity High Note: This operation suffers enormously if ext-decimal is not available.","title":"Logarithms"},{"location":"performance/logarithms/#logarithms-performance","text":"Below are the logarithmic operations available in Fermat and performance information about using them. ln()","title":"Logarithms Performance"},{"location":"performance/logarithms/#ln","text":"Native Mode Ops/sec 100,000 EINOs 350 Auto Mode Ops/sec 50,000 EINOs 700 Precision Mode Ops/sec 50,000 EINOs 700 Characteristics Scale Sensitivity High Note: This operation suffers enormously if ext-decimal is not available. log10()","title":"ln"},{"location":"performance/logarithms/#log10","text":"Native Mode Ops/sec 100,000 EINOs 320 Auto Mode Ops/sec 40,000 EINOs 800 Precision Mode Ops/sec 40,000 EINOs 800 Characteristics Scale Sensitivity High Note: This operation suffers enormously if ext-decimal is not available. exp()","title":"log10"},{"location":"performance/logarithms/#exp","text":"Native Mode Ops/sec 100,000 EINOs 350 Auto Mode Ops/sec 80,000 EINOs 435 Precision Mode Ops/sec 80,000 EINOs 435 Characteristics Scale Sensitivity High Note: This operation suffers enormously if ext-decimal is not available.","title":"exp"},{"location":"performance/overview/","text":"Performance The performance of Fermat depends very sensitively on the extensions installed, the settings you have configured for your objects, and the values which you are calculating for. The Fermat library is benchmarked in many scenarios, and the details of performance for the different kinds of math supported are detailed within this section. Installed Extensions The Fermat library requires the GMP and BCMath extensions to be available, and both are listed as requirements in the composer.json file for the library. If the Decimal extension is installed, it is used in place of the BCMath extension, and offers a 5-10x performance improvement. If the Ds extension is installed, then it is used in place of arrays for the NumberCollection class as well as for the Coordinate Systems Module . This provides substantial memory and read/write performance in most circumstances. Scale Sensitivity The performance metrics in this documentation are for the default scale setting of 10. All calculations are negatively impacted by using a larger value for scale, however different operations have different sensitivity to scale. As such, the \"Scale Sensitivity\" factor in the documentation provides some idea of how the performance might be impacted by using larger scales. A \"Scale Sensitivity\" of Low means that the performance can be expected to stay within the same range given, even if the scale is within 10 - 1000. A \"Scale Sensistivity\" of Moderate means that the performance can be expected to stay within the same range given, so long as the scale is within 10 - 100. A \"Scale Sensistivity\" of High means that the performance can be expected to stay within the same range given, so long as the scale is within 10 - 20. A \"Scale Sensitivity\" of Extreme means that the performance cannot be expected to remain within the same range given, even if scale is increased by only a factor of 2. Scale Sensitivity Applies to Precision Mode The Native Calculation Mode does not suffer from any scale sensitivity, since your requested scale is ignored when this mode is used. However, that also means that the result given does not necessarily have the scale you requested. The Auto Calculation Mode often, but not always, has lower sensitivity to scale. Performance Metrics Within this section, performance metrics are provided in two forms, and shown for each of the calculation modes. For example: ... Ops/sec These are provided in a range, and represent the number of times you could expect to call that calculation per second within a loop for common value ranges. The actual number of operations per second that you can realize in your circumstances depend on your system configuration and hardware. These benchmarks were performed using a Ryzen 3900. This value does not include any overhead for creating additional objects, changing values each loop, or anything of that nature. They represent the pure calculation speed of the algorithms used and the operations performed during the calculation itself. Equivalent Inline Native Operations (EINOs) This represents how many native PHP operations you would need in your code to take the same amount of time as the operation does within Fermat. For Example === Fermat 1 <?php 2 3 $value = $fermatValue -> add ( 5 ); === EINO 1 <?php 2 3 $value = 3 + 5 ; Another way of putting this is if you removed Fermat from your application and performed all of the math yourself directly in your code using the functions and operators available in PHP core, you would be able to perform that calculation X times without slowing down your application. It is important to note that this comparison is only valid for a scale setting of 10 and for small numbers (less than 10,000 for most operations) . Outside of those bounds, the EINOs would begin to give rounding and mathematical errors that may impact the correctness of your program. For Example 1 <?php 2 3 // This gets converted to a float in PHP 4 $num1 = PHP_INT_MAX + 1 ; 5 6 // The float does not have enough precision to change here 7 $num2 = $num1 + 1 ; 8 9 // This statement is evaluated as true 10 if ( $num1 == $num2 ) { 11 echo \"Uh oh.\" ; 12 } 13 14 // Prints: Uh oh.","title":"Overview"},{"location":"performance/overview/#performance","text":"The performance of Fermat depends very sensitively on the extensions installed, the settings you have configured for your objects, and the values which you are calculating for. The Fermat library is benchmarked in many scenarios, and the details of performance for the different kinds of math supported are detailed within this section.","title":"Performance"},{"location":"performance/overview/#installed-extensions","text":"The Fermat library requires the GMP and BCMath extensions to be available, and both are listed as requirements in the composer.json file for the library. If the Decimal extension is installed, it is used in place of the BCMath extension, and offers a 5-10x performance improvement. If the Ds extension is installed, then it is used in place of arrays for the NumberCollection class as well as for the Coordinate Systems Module . This provides substantial memory and read/write performance in most circumstances.","title":"Installed Extensions"},{"location":"performance/overview/#scale-sensitivity","text":"The performance metrics in this documentation are for the default scale setting of 10. All calculations are negatively impacted by using a larger value for scale, however different operations have different sensitivity to scale. As such, the \"Scale Sensitivity\" factor in the documentation provides some idea of how the performance might be impacted by using larger scales. A \"Scale Sensitivity\" of Low means that the performance can be expected to stay within the same range given, even if the scale is within 10 - 1000. A \"Scale Sensistivity\" of Moderate means that the performance can be expected to stay within the same range given, so long as the scale is within 10 - 100. A \"Scale Sensistivity\" of High means that the performance can be expected to stay within the same range given, so long as the scale is within 10 - 20. A \"Scale Sensitivity\" of Extreme means that the performance cannot be expected to remain within the same range given, even if scale is increased by only a factor of 2. Scale Sensitivity Applies to Precision Mode The Native Calculation Mode does not suffer from any scale sensitivity, since your requested scale is ignored when this mode is used. However, that also means that the result given does not necessarily have the scale you requested. The Auto Calculation Mode often, but not always, has lower sensitivity to scale.","title":"Scale Sensitivity"},{"location":"performance/overview/#performance-metrics","text":"Within this section, performance metrics are provided in two forms, and shown for each of the calculation modes. For example: ...","title":"Performance Metrics"},{"location":"performance/overview/#opssec","text":"These are provided in a range, and represent the number of times you could expect to call that calculation per second within a loop for common value ranges. The actual number of operations per second that you can realize in your circumstances depend on your system configuration and hardware. These benchmarks were performed using a Ryzen 3900. This value does not include any overhead for creating additional objects, changing values each loop, or anything of that nature. They represent the pure calculation speed of the algorithms used and the operations performed during the calculation itself.","title":"Ops/sec"},{"location":"performance/overview/#equivalent-inline-native-operations-einos","text":"This represents how many native PHP operations you would need in your code to take the same amount of time as the operation does within Fermat. For Example === Fermat 1 <?php 2 3 $value = $fermatValue -> add ( 5 ); === EINO 1 <?php 2 3 $value = 3 + 5 ; Another way of putting this is if you removed Fermat from your application and performed all of the math yourself directly in your code using the functions and operators available in PHP core, you would be able to perform that calculation X times without slowing down your application. It is important to note that this comparison is only valid for a scale setting of 10 and for small numbers (less than 10,000 for most operations) . Outside of those bounds, the EINOs would begin to give rounding and mathematical errors that may impact the correctness of your program. For Example 1 <?php 2 3 // This gets converted to a float in PHP 4 $num1 = PHP_INT_MAX + 1 ; 5 6 // The float does not have enough precision to change here 7 $num2 = $num1 + 1 ; 8 9 // This statement is evaluated as true 10 if ( $num1 == $num2 ) { 11 echo \"Uh oh.\" ; 12 } 13 14 // Prints: Uh oh.","title":"Equivalent Inline Native Operations (EINOs)"},{"location":"performance/trigonometry/","text":"Trigonometry Performance Below are the logarithmic operations available in Fermat and performance information about using them. sin() sin Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 1,000 EINOs 35,000 Precision Mode Ops/sec 1,000 EINOs 35,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. cos() cos Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 1,000 EINOs 35,000 Precision Mode Ops/sec 1,000 EINOs 35,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. tan() tan Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 750 EINOs 43,750 Precision Mode Ops/sec 1,000 EINOs 35,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. sec() sec Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 750 EINOs 43,750 Precision Mode Ops/sec 750 EINOs 43,750 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. csc() csc Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 1,000 EINOs 35,000 Precision Mode Ops/sec 1,000 EINOs 35,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. cot() cot Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 500 EINOs 70,000 Precision Mode Ops/sec 750 EINOs 43,750 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. sinh() sinh Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. cosh() cosh Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. tanh() tanh Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. sech() sech Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. csch() csch Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. coth() coth Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arcsin() arcsin Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 500 EINOs 62,000 Precision Mode Ops/sec 500 EINOs 62,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arccos() arccos Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 500 EINOs 62,000 Precision Mode Ops/sec 500 EINOs 62,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arctan() arctan Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 10,000 EINOs 3,100 Precision Mode Ops/sec 10,000 EINOs 3,100 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arcsec() arcsec Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 500 EINOs 62,000 Precision Mode Ops/sec 500 EINOs 62,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arccsc() arccsc Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 500 EINOs 62,000 Precision Mode Ops/sec 500 EINOs 62,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arccot() arccot Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 10,000 EINOs 3,100 Precision Mode Ops/sec 10,000 EINOs 3,100 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds.","title":"Trigonometry"},{"location":"performance/trigonometry/#trigonometry-performance","text":"Below are the logarithmic operations available in Fermat and performance information about using them. sin()","title":"Trigonometry Performance"},{"location":"performance/trigonometry/#sin","text":"Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 1,000 EINOs 35,000 Precision Mode Ops/sec 1,000 EINOs 35,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. cos()","title":"sin"},{"location":"performance/trigonometry/#cos","text":"Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 1,000 EINOs 35,000 Precision Mode Ops/sec 1,000 EINOs 35,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. tan()","title":"cos"},{"location":"performance/trigonometry/#tan","text":"Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 750 EINOs 43,750 Precision Mode Ops/sec 1,000 EINOs 35,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. sec()","title":"tan"},{"location":"performance/trigonometry/#sec","text":"Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 750 EINOs 43,750 Precision Mode Ops/sec 750 EINOs 43,750 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. csc()","title":"sec"},{"location":"performance/trigonometry/#csc","text":"Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 1,000 EINOs 35,000 Precision Mode Ops/sec 1,000 EINOs 35,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. cot()","title":"csc"},{"location":"performance/trigonometry/#cot","text":"Native Mode Ops/sec 50,000 EINOs 700 Auto Mode Ops/sec 500 EINOs 70,000 Precision Mode Ops/sec 750 EINOs 43,750 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. sinh()","title":"cot"},{"location":"performance/trigonometry/#sinh","text":"Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. cosh()","title":"sinh"},{"location":"performance/trigonometry/#cosh","text":"Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. tanh()","title":"cosh"},{"location":"performance/trigonometry/#tanh","text":"Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. sech()","title":"tanh"},{"location":"performance/trigonometry/#sech","text":"Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. csch()","title":"sech"},{"location":"performance/trigonometry/#csch","text":"Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. coth()","title":"csch"},{"location":"performance/trigonometry/#coth","text":"Native Mode Ops/sec 50,000 EINOs 500 Auto Mode Ops/sec 7,500 EINOs 3,335 Precision Mode Ops/sec 10,000 EINOs 2,500 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arcsin()","title":"coth"},{"location":"performance/trigonometry/#arcsin","text":"Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 500 EINOs 62,000 Precision Mode Ops/sec 500 EINOs 62,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arccos()","title":"arcsin"},{"location":"performance/trigonometry/#arccos","text":"Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 500 EINOs 62,000 Precision Mode Ops/sec 500 EINOs 62,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arctan()","title":"arccos"},{"location":"performance/trigonometry/#arctan","text":"Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 10,000 EINOs 3,100 Precision Mode Ops/sec 10,000 EINOs 3,100 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arcsec()","title":"arctan"},{"location":"performance/trigonometry/#arcsec","text":"Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 500 EINOs 62,000 Precision Mode Ops/sec 500 EINOs 62,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arccsc()","title":"arcsec"},{"location":"performance/trigonometry/#arccsc","text":"Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 500 EINOs 62,000 Precision Mode Ops/sec 500 EINOs 62,000 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds. arccot()","title":"arccsc"},{"location":"performance/trigonometry/#arccot","text":"Native Mode Ops/sec 25,000 EINOs 1,240 Auto Mode Ops/sec 10,000 EINOs 3,100 Precision Mode Ops/sec 10,000 EINOs 3,100 Characteristics Scale Sensitivity Extreme Note: The efficiency of this algorithm varies by the part of the curve the value is near, as that results in the answer converging at different speeds.","title":"arccot"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/","text":"Samsara\\Fermat\\Types > Coordinate No description available Inheritance Implements CoordinateInterface CoordinateInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available Methods Constructor public Coordinate->__construct(array $data) __construct $data type array description No description available return type mixed (assumed) description No description available Instanced Methods public Coordinate->getAxis($axis) getAxis $axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->numberOfDimensions() numberOfDimensions return type int description No description available public Coordinate->axesValues() axesValues return type array description No description available public Coordinate->getDistanceFromOrigin() getDistanceFromOrigin return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate) distanceTo $coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->asCartesian() asCartesian return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available Inherited Methods public CoordinateInterface->getPolarAngle() getPolarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"Coordinate"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#samsarafermattypes-coordinate","text":"No description available","title":"Samsara\\Fermat\\Types &gt; Coordinate"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#implements","text":"CoordinateInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#coordinateinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available","title":"CoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#constructor","text":"public Coordinate->__construct(array $data)","title":"Constructor"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#__construct","text":"$data type array description No description available return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#instanced-methods","text":"public Coordinate->getAxis($axis)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#getaxis","text":"$axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->numberOfDimensions()","title":"getAxis"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#numberofdimensions","text":"return type int description No description available public Coordinate->axesValues()","title":"numberOfDimensions"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#axesvalues","text":"return type array description No description available public Coordinate->getDistanceFromOrigin()","title":"axesValues"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#getdistancefromorigin","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate)","title":"getDistanceFromOrigin"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#distanceto","text":"$coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->asCartesian()","title":"distanceTo"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#ascartesian","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available","title":"asCartesian"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#inherited-methods","text":"public CoordinateInterface->getPolarAngle()","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Coordinate/#getpolarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"getPolarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/CoordinateInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates > CoordinateInterface No description available Methods Instanced Methods public CoordinateInterface->getAxis($axis) getAxis $axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->axesValues() axesValues return type array description No description available public CoordinateInterface->getDistanceFromOrigin() getDistanceFromOrigin return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->numberOfDimensions() numberOfDimensions return type int description No description available public CoordinateInterface->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate) distanceTo $coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->asCartesian() asCartesian return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public CoordinateInterface->getPolarAngle() getPolarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"CoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/CoordinateInterface/#samsarafermattypesbaseinterfacescoordinates-coordinateinterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates &gt; CoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/CoordinateInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/CoordinateInterface/#instanced-methods","text":"public CoordinateInterface->getAxis($axis)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/CoordinateInterface/#getaxis","text":"$axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->axesValues()","title":"getAxis"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/CoordinateInterface/#axesvalues","text":"return type array description No description available public CoordinateInterface->getDistanceFromOrigin()","title":"axesValues"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/CoordinateInterface/#getdistancefromorigin","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->numberOfDimensions()","title":"getDistanceFromOrigin"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/CoordinateInterface/#numberofdimensions","text":"return type int description No description available public CoordinateInterface->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate)","title":"numberOfDimensions"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/CoordinateInterface/#distanceto","text":"$coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->asCartesian()","title":"distanceTo"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/CoordinateInterface/#ascartesian","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public CoordinateInterface->getPolarAngle()","title":"asCartesian"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/CoordinateInterface/#getpolarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"getPolarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates > ThreeDCoordinateInterface No description available Inheritance Methods Instanced Methods public ThreeDCoordinateInterface->getPlanarAngle() getPlanarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public ThreeDCoordinateInterface->asSpherical() asSpherical return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\SphericalCoordinate description No description available public ThreeDCoordinateInterface->asCylindrical() asCylindrical return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CylindricalCoordinate description No description available Inherited Methods public CoordinateInterface->getAxis($axis) getAxis $axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->axesValues() axesValues return type array description No description available public CoordinateInterface->getDistanceFromOrigin() getDistanceFromOrigin return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->numberOfDimensions() numberOfDimensions return type int description No description available public CoordinateInterface->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate) distanceTo $coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->asCartesian() asCartesian return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public CoordinateInterface->getPolarAngle() getPolarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"ThreeDCoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#samsarafermattypesbaseinterfacescoordinates-threedcoordinateinterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates &gt; ThreeDCoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#instanced-methods","text":"public ThreeDCoordinateInterface->getPlanarAngle()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#getplanarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public ThreeDCoordinateInterface->asSpherical()","title":"getPlanarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#asspherical","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\SphericalCoordinate description No description available public ThreeDCoordinateInterface->asCylindrical()","title":"asSpherical"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#ascylindrical","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CylindricalCoordinate description No description available","title":"asCylindrical"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#inherited-methods","text":"public CoordinateInterface->getAxis($axis)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#getaxis","text":"$axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->axesValues()","title":"getAxis"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#axesvalues","text":"return type array description No description available public CoordinateInterface->getDistanceFromOrigin()","title":"axesValues"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#getdistancefromorigin","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->numberOfDimensions()","title":"getDistanceFromOrigin"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#numberofdimensions","text":"return type int description No description available public CoordinateInterface->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate)","title":"numberOfDimensions"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#distanceto","text":"$coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->asCartesian()","title":"distanceTo"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#ascartesian","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public CoordinateInterface->getPolarAngle()","title":"asCartesian"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/ThreeDCoordinateInterface/#getpolarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"getPolarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates > TwoDCoordinateInterface No description available Inheritance Methods Instanced Methods public TwoDCoordinateInterface->asPolar() asPolar return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\PolarCoordinate description No description available Inherited Methods public CoordinateInterface->getAxis($axis) getAxis $axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->axesValues() axesValues return type array description No description available public CoordinateInterface->getDistanceFromOrigin() getDistanceFromOrigin return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->numberOfDimensions() numberOfDimensions return type int description No description available public CoordinateInterface->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate) distanceTo $coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->asCartesian() asCartesian return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public CoordinateInterface->getPolarAngle() getPolarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"TwoDCoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#samsarafermattypesbaseinterfacescoordinates-twodcoordinateinterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates &gt; TwoDCoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#instanced-methods","text":"public TwoDCoordinateInterface->asPolar()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#aspolar","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\PolarCoordinate description No description available","title":"asPolar"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#inherited-methods","text":"public CoordinateInterface->getAxis($axis)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#getaxis","text":"$axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->axesValues()","title":"getAxis"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#axesvalues","text":"return type array description No description available public CoordinateInterface->getDistanceFromOrigin()","title":"axesValues"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#getdistancefromorigin","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->numberOfDimensions()","title":"getDistanceFromOrigin"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#numberofdimensions","text":"return type int description No description available public CoordinateInterface->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate)","title":"numberOfDimensions"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#distanceto","text":"$coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CoordinateInterface->asCartesian()","title":"distanceTo"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#ascartesian","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public CoordinateInterface->getPolarAngle()","title":"asCartesian"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Types/Base/Interfaces/Coordinates/TwoDCoordinateInterface/#getpolarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"getPolarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/","text":"Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems > CartesianCoordinate No description available Inheritance Extends Samsara\\Fermat\\Types\\Coordinate Implements CoordinateInterface CoordinateInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available TwoDCoordinateInterface TwoDCoordinateInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available ThreeDCoordinateInterface ThreeDCoordinateInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available Methods Constructor public CartesianCoordinate->__construct($x, null $y, null $z) __construct $x description No description available $y type null description No description available $z type null description No description available return type mixed (assumed) description No description available __construct() Description: CartesianCoordinate constructor. Instanced Methods public CartesianCoordinate->getAxis($axis) getAxis $axis description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CartesianCoordinate->getDistanceFromOrigin() getDistanceFromOrigin return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CartesianCoordinate->distanceTo(CoordinateInterface $coordinate) distanceTo $coordinate type CoordinateInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CartesianCoordinate->asCartesian() asCartesian return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public CartesianCoordinate->getPolarAngle() getPolarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CartesianCoordinate->getPlanarAngle() getPlanarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CartesianCoordinate->asSpherical() asSpherical return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\SphericalCoordinate description No description available public CartesianCoordinate->asCylindrical() asCylindrical return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CylindricalCoordinate description No description available public CartesianCoordinate->asPolar() asPolar return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\PolarCoordinate description No description available Inherited Methods public Coordinate->numberOfDimensions() numberOfDimensions return type int description No description available public Coordinate->axesValues() axesValues return type array description No description available This documentation was generated with Roster .","title":"CartesianCoordinate"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#samsarafermatvaluesgeometrycoordinatesystems-cartesiancoordinate","text":"No description available","title":"Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems &gt; CartesianCoordinate"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#extends","text":"Samsara\\Fermat\\Types\\Coordinate","title":"Extends"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#implements","text":"CoordinateInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#coordinateinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available TwoDCoordinateInterface","title":"CoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#twodcoordinateinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available ThreeDCoordinateInterface","title":"TwoDCoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#threedcoordinateinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available","title":"ThreeDCoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#constructor","text":"public CartesianCoordinate->__construct($x, null $y, null $z)","title":"Constructor"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#__construct","text":"$x description No description available $y type null description No description available $z type null description No description available return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#instanced-methods","text":"public CartesianCoordinate->getAxis($axis)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#getaxis","text":"$axis description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CartesianCoordinate->getDistanceFromOrigin()","title":"getAxis"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#getdistancefromorigin","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CartesianCoordinate->distanceTo(CoordinateInterface $coordinate)","title":"getDistanceFromOrigin"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#distanceto","text":"$coordinate type CoordinateInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CartesianCoordinate->asCartesian()","title":"distanceTo"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#ascartesian","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public CartesianCoordinate->getPolarAngle()","title":"asCartesian"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#getpolarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CartesianCoordinate->getPlanarAngle()","title":"getPolarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#getplanarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CartesianCoordinate->asSpherical()","title":"getPlanarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#asspherical","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\SphericalCoordinate description No description available public CartesianCoordinate->asCylindrical()","title":"asSpherical"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#ascylindrical","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CylindricalCoordinate description No description available public CartesianCoordinate->asPolar()","title":"asCylindrical"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#aspolar","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\PolarCoordinate description No description available","title":"asPolar"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#inherited-methods","text":"public Coordinate->numberOfDimensions()","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#numberofdimensions","text":"return type int description No description available public Coordinate->axesValues()","title":"numberOfDimensions"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CartesianCoordinate/#axesvalues","text":"return type array description No description available This documentation was generated with Roster .","title":"axesValues"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/","text":"Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems > CylindricalCoordinate No description available Inheritance Extends Samsara\\Fermat\\Types\\Coordinate Implements CoordinateInterface CoordinateInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available ThreeDCoordinateInterface ThreeDCoordinateInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available Methods Constructor public CylindricalCoordinate->__construct($r, $theta, $z) __construct $r description No description available $theta description No description available $z description No description available return type mixed (assumed) description No description available Instanced Methods public CylindricalCoordinate->getDistanceFromOrigin() getDistanceFromOrigin return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CylindricalCoordinate->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate) distanceTo $coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CylindricalCoordinate->getPolarAngle() getPolarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CylindricalCoordinate->getPlanarAngle() getPlanarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CylindricalCoordinate->asCartesian() asCartesian return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public CylindricalCoordinate->asSpherical() asSpherical return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\SphericalCoordinate description No description available public CylindricalCoordinate->asCylindrical() asCylindrical return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CylindricalCoordinate description No description available Inherited Methods public Coordinate->getAxis($axis) getAxis $axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->numberOfDimensions() numberOfDimensions return type int description No description available public Coordinate->axesValues() axesValues return type array description No description available This documentation was generated with Roster .","title":"CylindricalCoordinate"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#samsarafermatvaluesgeometrycoordinatesystems-cylindricalcoordinate","text":"No description available","title":"Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems &gt; CylindricalCoordinate"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#extends","text":"Samsara\\Fermat\\Types\\Coordinate","title":"Extends"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#implements","text":"CoordinateInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#coordinateinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available ThreeDCoordinateInterface","title":"CoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#threedcoordinateinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available","title":"ThreeDCoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#constructor","text":"public CylindricalCoordinate->__construct($r, $theta, $z)","title":"Constructor"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#__construct","text":"$r description No description available $theta description No description available $z description No description available return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#instanced-methods","text":"public CylindricalCoordinate->getDistanceFromOrigin()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#getdistancefromorigin","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CylindricalCoordinate->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate)","title":"getDistanceFromOrigin"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#distanceto","text":"$coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CylindricalCoordinate->getPolarAngle()","title":"distanceTo"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#getpolarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CylindricalCoordinate->getPlanarAngle()","title":"getPolarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#getplanarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public CylindricalCoordinate->asCartesian()","title":"getPlanarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#ascartesian","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public CylindricalCoordinate->asSpherical()","title":"asCartesian"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#asspherical","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\SphericalCoordinate description No description available public CylindricalCoordinate->asCylindrical()","title":"asSpherical"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#ascylindrical","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CylindricalCoordinate description No description available","title":"asCylindrical"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#inherited-methods","text":"public Coordinate->getAxis($axis)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#getaxis","text":"$axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->numberOfDimensions()","title":"getAxis"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#numberofdimensions","text":"return type int description No description available public Coordinate->axesValues()","title":"numberOfDimensions"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/CylindricalCoordinate/#axesvalues","text":"return type array description No description available This documentation was generated with Roster .","title":"axesValues"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/","text":"Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems > PolarCoordinate No description available Inheritance Extends Samsara\\Fermat\\Types\\Coordinate Implements CoordinateInterface CoordinateInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available TwoDCoordinateInterface TwoDCoordinateInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available Methods Constructor public PolarCoordinate->__construct($rho, $theta) __construct $rho description No description available $theta description No description available return type mixed (assumed) description No description available Instanced Methods public PolarCoordinate->getDistanceFromOrigin() getDistanceFromOrigin return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public PolarCoordinate->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate) distanceTo $coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public PolarCoordinate->asCartesian() asCartesian return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public PolarCoordinate->getPolarAngle() getPolarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public PolarCoordinate->asPolar() asPolar return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\PolarCoordinate description No description available Inherited Methods public Coordinate->getAxis($axis) getAxis $axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->numberOfDimensions() numberOfDimensions return type int description No description available public Coordinate->axesValues() axesValues return type array description No description available This documentation was generated with Roster .","title":"PolarCoordinate"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#samsarafermatvaluesgeometrycoordinatesystems-polarcoordinate","text":"No description available","title":"Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems &gt; PolarCoordinate"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#extends","text":"Samsara\\Fermat\\Types\\Coordinate","title":"Extends"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#implements","text":"CoordinateInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#coordinateinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available TwoDCoordinateInterface","title":"CoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#twodcoordinateinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available","title":"TwoDCoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#constructor","text":"public PolarCoordinate->__construct($rho, $theta)","title":"Constructor"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#__construct","text":"$rho description No description available $theta description No description available return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#instanced-methods","text":"public PolarCoordinate->getDistanceFromOrigin()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#getdistancefromorigin","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public PolarCoordinate->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate)","title":"getDistanceFromOrigin"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#distanceto","text":"$coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public PolarCoordinate->asCartesian()","title":"distanceTo"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#ascartesian","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public PolarCoordinate->getPolarAngle()","title":"asCartesian"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#getpolarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public PolarCoordinate->asPolar()","title":"getPolarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#aspolar","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\PolarCoordinate description No description available","title":"asPolar"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#inherited-methods","text":"public Coordinate->getAxis($axis)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#getaxis","text":"$axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->numberOfDimensions()","title":"getAxis"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#numberofdimensions","text":"return type int description No description available public Coordinate->axesValues()","title":"numberOfDimensions"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/PolarCoordinate/#axesvalues","text":"return type array description No description available This documentation was generated with Roster .","title":"axesValues"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/","text":"Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems > SphericalCoordinate No description available Inheritance Extends Samsara\\Fermat\\Types\\Coordinate Implements CoordinateInterface CoordinateInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available ThreeDCoordinateInterface ThreeDCoordinateInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available Methods Constructor public SphericalCoordinate->__construct($rho, $theta, $phi) __construct $rho description No description available $theta description No description available $phi description No description available return type mixed (assumed) description No description available Instanced Methods public SphericalCoordinate->getDistanceFromOrigin() getDistanceFromOrigin return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public SphericalCoordinate->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate) distanceTo $coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public SphericalCoordinate->getPolarAngle() getPolarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public SphericalCoordinate->getPlanarAngle() getPlanarAngle return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public SphericalCoordinate->asCartesian() asCartesian return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public SphericalCoordinate->asSpherical() asSpherical return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\SphericalCoordinate description No description available public SphericalCoordinate->asCylindrical() asCylindrical return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CylindricalCoordinate description No description available Inherited Methods public Coordinate->getAxis($axis) getAxis $axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->numberOfDimensions() numberOfDimensions return type int description No description available public Coordinate->axesValues() axesValues return type array description No description available This documentation was generated with Roster .","title":"SphericalCoordinate"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#samsarafermatvaluesgeometrycoordinatesystems-sphericalcoordinate","text":"No description available","title":"Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems &gt; SphericalCoordinate"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#extends","text":"Samsara\\Fermat\\Types\\Coordinate","title":"Extends"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#implements","text":"CoordinateInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#coordinateinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available ThreeDCoordinateInterface","title":"CoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#threedcoordinateinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates description No description available","title":"ThreeDCoordinateInterface"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#constructor","text":"public SphericalCoordinate->__construct($rho, $theta, $phi)","title":"Constructor"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#__construct","text":"$rho description No description available $theta description No description available $phi description No description available return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#instanced-methods","text":"public SphericalCoordinate->getDistanceFromOrigin()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#getdistancefromorigin","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public SphericalCoordinate->distanceTo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface $coordinate)","title":"getDistanceFromOrigin"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#distanceto","text":"$coordinate type Samsara\\Fermat\\Types\\Base\\Interfaces\\Coordinates\\CoordinateInterface description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public SphericalCoordinate->getPolarAngle()","title":"distanceTo"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#getpolarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public SphericalCoordinate->getPlanarAngle()","title":"getPolarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#getplanarangle","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public SphericalCoordinate->asCartesian()","title":"getPlanarAngle"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#ascartesian","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CartesianCoordinate description No description available public SphericalCoordinate->asSpherical()","title":"asCartesian"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#asspherical","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\SphericalCoordinate description No description available public SphericalCoordinate->asCylindrical()","title":"asSpherical"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#ascylindrical","text":"return type Samsara\\Fermat\\Values\\Geometry\\CoordinateSystems\\CylindricalCoordinate description No description available","title":"asCylindrical"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#inherited-methods","text":"public Coordinate->getAxis($axis)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#getaxis","text":"$axis description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Coordinate->numberOfDimensions()","title":"getAxis"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#numberofdimensions","text":"return type int description No description available public Coordinate->axesValues()","title":"numberOfDimensions"},{"location":"roster/latest/Fermat%20Coordinate%20Systems/Values/Geometry/CoordinateSystems/SphericalCoordinate/#axesvalues","text":"return type array description No description available This documentation was generated with Roster .","title":"axesValues"},{"location":"roster/latest/Fermat%20Core/Collections/","text":"Samsara\\Fermat > Collections No description available This documentation was generated with Roster .","title":"Collections"},{"location":"roster/latest/Fermat%20Core/Collections/#samsarafermat-collections","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat &gt; Collections"},{"location":"roster/latest/Fermat%20Core/Numbers/","text":"Samsara\\Fermat > Numbers This class contains useful factory methods to create various numbers, verify the class of a given number, and generally handle all of the formatting necessary to satisfy the various constructors of valid value objects. Variables & Data Class Constants Numbers::MUTABLE MUTABLE value 'Samsara\\Fermat\\Values\\MutableDecimal' Numbers::IMMUTABLE IMMUTABLE value 'Samsara\\Fermat\\Values\\ImmutableDecimal' Numbers::MUTABLE_FRACTION MUTABLE_FRACTION value 'Samsara\\Fermat\\Values\\MutableFraction' Numbers::IMMUTABLE_FRACTION IMMUTABLE_FRACTION value 'Samsara\\Fermat\\Values\\ImmutableFraction' Numbers::PI PI value '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679' Numbers::TAU TAU value '6.283185307179586476925286766559005768394338798750211641949889184615632812572417997256069650684234136' Numbers::E E value '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427' Numbers::GOLDEN_RATIO GOLDEN_RATIO value '1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137' Numbers::LN_10 LN_10 value '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298' Numbers::LN_2 LN_2 value '0.693147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687' Numbers::I_POW_I I_POW_I value '0.2078795763507619085469556198349787700338778416317696080751358830554198772854821397886002778654260353' Methods Static Methods public Numbers::make(mixed $type, mixed $value, int|null $scale, NumberBase $base) make $type type mixed description An instance of FQCN for any Fermat value class. $value type mixed description Any value which is valid for the constructor which will be called. $scale type int|null description The scale setting the created instance should have. $base type NumberBase description The base to create the number in. Note, this is not the same as the base of $value, which is always base-10 return type ImmutableDecimal|MutableDecimal|ImmutableFraction|MutableFraction|NumberInterface|FractionInterface description No description available make() Description: This class will make and return an instance of a concrete value. The main reason for this class is that you can pass an unknown value instance as the type parameter and it will behave as if you passed the FQCN. public Numbers::makeFromBase10($type, $value, int|null $scale, NumberBase $base) makeFromBase10 $type description No description available $value description No description available $scale type int|null description No description available $base type NumberBase description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public Numbers::makeOrDont(string|object $type, int|float|string|array|NumberInterface|DecimalInterface|FractionInterface $value, int|null $scale, NumberBase $base) makeOrDont $type type string|object description No description available $value type int|float|string|array|NumberInterface|DecimalInterface|FractionInterface description No description available $scale type int|null description No description available $base type NumberBase description return type ImmutableDecimal|MutableDecimal|NumberInterface|ImmutableDecimal[]|MutableDecimal[]|NumberInterface[] description No description available public Numbers::makeFractionFromString(string $type, string $value, NumberBase $base) makeFractionFromString $type type string description No description available $value type string description No description available $base type NumberBase description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available public Numbers::makePi(int|null $scale) makePi $scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeTau(null $scale) makeTau $scale type null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::make2Pi(int|null $scale) make2Pi $scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeE(int|null $scale) makeE $scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeGoldenRatio(int|null $scale) makeGoldenRatio $scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeNaturalLog10(int|null $scale) makeNaturalLog10 $scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeNaturalLog2(int|null $scale) makeNaturalLog2 $scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeOne(int|null $scale) makeOne $scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeZero(int|null $scale) makeZero $scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"Numbers"},{"location":"roster/latest/Fermat%20Core/Numbers/#samsarafermat-numbers","text":"This class contains useful factory methods to create various numbers, verify the class of a given number, and generally handle all of the formatting necessary to satisfy the various constructors of valid value objects.","title":"Samsara\\Fermat &gt; Numbers"},{"location":"roster/latest/Fermat%20Core/Numbers/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Numbers/#class-constants","text":"Numbers::MUTABLE","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Numbers/#mutable","text":"value 'Samsara\\Fermat\\Values\\MutableDecimal' Numbers::IMMUTABLE","title":"MUTABLE"},{"location":"roster/latest/Fermat%20Core/Numbers/#immutable","text":"value 'Samsara\\Fermat\\Values\\ImmutableDecimal' Numbers::MUTABLE_FRACTION","title":"IMMUTABLE"},{"location":"roster/latest/Fermat%20Core/Numbers/#mutable_fraction","text":"value 'Samsara\\Fermat\\Values\\MutableFraction' Numbers::IMMUTABLE_FRACTION","title":"MUTABLE_FRACTION"},{"location":"roster/latest/Fermat%20Core/Numbers/#immutable_fraction","text":"value 'Samsara\\Fermat\\Values\\ImmutableFraction' Numbers::PI","title":"IMMUTABLE_FRACTION"},{"location":"roster/latest/Fermat%20Core/Numbers/#pi","text":"value '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679' Numbers::TAU","title":"PI"},{"location":"roster/latest/Fermat%20Core/Numbers/#tau","text":"value '6.283185307179586476925286766559005768394338798750211641949889184615632812572417997256069650684234136' Numbers::E","title":"TAU"},{"location":"roster/latest/Fermat%20Core/Numbers/#e","text":"value '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427' Numbers::GOLDEN_RATIO","title":"E"},{"location":"roster/latest/Fermat%20Core/Numbers/#golden_ratio","text":"value '1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137' Numbers::LN_10","title":"GOLDEN_RATIO"},{"location":"roster/latest/Fermat%20Core/Numbers/#ln_10","text":"value '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298' Numbers::LN_2","title":"LN_10"},{"location":"roster/latest/Fermat%20Core/Numbers/#ln_2","text":"value '0.693147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687' Numbers::I_POW_I","title":"LN_2"},{"location":"roster/latest/Fermat%20Core/Numbers/#i_pow_i","text":"value '0.2078795763507619085469556198349787700338778416317696080751358830554198772854821397886002778654260353'","title":"I_POW_I"},{"location":"roster/latest/Fermat%20Core/Numbers/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Numbers/#static-methods","text":"public Numbers::make(mixed $type, mixed $value, int|null $scale, NumberBase $base)","title":"Static Methods"},{"location":"roster/latest/Fermat%20Core/Numbers/#make","text":"$type type mixed description An instance of FQCN for any Fermat value class. $value type mixed description Any value which is valid for the constructor which will be called. $scale type int|null description The scale setting the created instance should have. $base type NumberBase description The base to create the number in. Note, this is not the same as the base of $value, which is always base-10 return type ImmutableDecimal|MutableDecimal|ImmutableFraction|MutableFraction|NumberInterface|FractionInterface description No description available","title":"make"},{"location":"roster/latest/Fermat%20Core/Numbers/#makefrombase10","text":"$type description No description available $value description No description available $scale type int|null description No description available $base type NumberBase description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public Numbers::makeOrDont(string|object $type, int|float|string|array|NumberInterface|DecimalInterface|FractionInterface $value, int|null $scale, NumberBase $base)","title":"makeFromBase10"},{"location":"roster/latest/Fermat%20Core/Numbers/#makeordont","text":"$type type string|object description No description available $value type int|float|string|array|NumberInterface|DecimalInterface|FractionInterface description No description available $scale type int|null description No description available $base type NumberBase description return type ImmutableDecimal|MutableDecimal|NumberInterface|ImmutableDecimal[]|MutableDecimal[]|NumberInterface[] description No description available public Numbers::makeFractionFromString(string $type, string $value, NumberBase $base)","title":"makeOrDont"},{"location":"roster/latest/Fermat%20Core/Numbers/#makefractionfromstring","text":"$type type string description No description available $value type string description No description available $base type NumberBase description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available public Numbers::makePi(int|null $scale)","title":"makeFractionFromString"},{"location":"roster/latest/Fermat%20Core/Numbers/#makepi","text":"$scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeTau(null $scale)","title":"makePi"},{"location":"roster/latest/Fermat%20Core/Numbers/#maketau","text":"$scale type null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::make2Pi(int|null $scale)","title":"makeTau"},{"location":"roster/latest/Fermat%20Core/Numbers/#make2pi","text":"$scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeE(int|null $scale)","title":"make2Pi"},{"location":"roster/latest/Fermat%20Core/Numbers/#makee","text":"$scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeGoldenRatio(int|null $scale)","title":"makeE"},{"location":"roster/latest/Fermat%20Core/Numbers/#makegoldenratio","text":"$scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeNaturalLog10(int|null $scale)","title":"makeGoldenRatio"},{"location":"roster/latest/Fermat%20Core/Numbers/#makenaturallog10","text":"$scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeNaturalLog2(int|null $scale)","title":"makeNaturalLog10"},{"location":"roster/latest/Fermat%20Core/Numbers/#makenaturallog2","text":"$scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeOne(int|null $scale)","title":"makeNaturalLog2"},{"location":"roster/latest/Fermat%20Core/Numbers/#makeone","text":"$scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Numbers::makeZero(int|null $scale)","title":"makeOne"},{"location":"roster/latest/Fermat%20Core/Numbers/#makezero","text":"$scale type int|null description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"makeZero"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/","text":"Samsara\\Fermat\\Provider > ArithmeticProvider No description available Methods Static Methods public ArithmeticProvider::add(string $number1, string $number2, $scale) add $number1 type string description No description available $number2 type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::subtract(string $left, string $right, $scale) subtract $left type string description No description available $right type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::multiply(string $number1, string $number2, $scale) multiply $number1 type string description No description available $number2 type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::divide(string $numerator, string $denominator, $scale) divide $numerator type string description No description available $denominator type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::pow(string $base, string $exponent, $scale) pow $base type string description No description available $exponent type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::squareRoot(string $number, $scale) squareRoot $number type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::modulo(string $number, $modulo) modulo $number type string description No description available $modulo description No description available return type string description No description available public ArithmeticProvider::compare(string $left, string $right, $scale) compare $left type string description No description available $right type string description No description available $scale description No description available return type int description No description available public ArithmeticProvider::powmod(string $left, string $right, string $modulus, $scale) powmod $left type string description No description available $right type string description No description available $modulus type string description No description available $scale description No description available return type string description No description available This documentation was generated with Roster .","title":"ArithmeticProvider"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#samsarafermatprovider-arithmeticprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; ArithmeticProvider"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#static-methods","text":"public ArithmeticProvider::add(string $number1, string $number2, $scale)","title":"Static Methods"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#add","text":"$number1 type string description No description available $number2 type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::subtract(string $left, string $right, $scale)","title":"add"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#subtract","text":"$left type string description No description available $right type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::multiply(string $number1, string $number2, $scale)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#multiply","text":"$number1 type string description No description available $number2 type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::divide(string $numerator, string $denominator, $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#divide","text":"$numerator type string description No description available $denominator type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::pow(string $base, string $exponent, $scale)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#pow","text":"$base type string description No description available $exponent type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::squareRoot(string $number, $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#squareroot","text":"$number type string description No description available $scale description No description available return type string description No description available public ArithmeticProvider::modulo(string $number, $modulo)","title":"squareRoot"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#modulo","text":"$number type string description No description available $modulo description No description available return type string description No description available public ArithmeticProvider::compare(string $left, string $right, $scale)","title":"modulo"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#compare","text":"$left type string description No description available $right type string description No description available $scale description No description available return type int description No description available public ArithmeticProvider::powmod(string $left, string $right, string $modulus, $scale)","title":"compare"},{"location":"roster/latest/Fermat%20Core/Provider/ArithmeticProvider/#powmod","text":"$left type string description No description available $right type string description No description available $modulus type string description No description available $scale description No description available return type string description No description available This documentation was generated with Roster .","title":"powmod"},{"location":"roster/latest/Fermat%20Core/Provider/BaseConversionProvider/","text":"Samsara\\Fermat\\Provider > BaseConversionProvider No description available Methods Static Methods public BaseConversionProvider::convertFromBaseTen(DecimalInterface $number, NumberBase|null $toBase) convertFromBaseTen $number type DecimalInterface description No description available $toBase type NumberBase|null description No description available return type string description No description available public BaseConversionProvider::convertStringToBaseTen(string $number, NumberBase $fromBase) convertStringToBaseTen $number type string description No description available $fromBase type NumberBase description No description available return type string description No description available This documentation was generated with Roster .","title":"BaseConversionProvider"},{"location":"roster/latest/Fermat%20Core/Provider/BaseConversionProvider/#samsarafermatprovider-baseconversionprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; BaseConversionProvider"},{"location":"roster/latest/Fermat%20Core/Provider/BaseConversionProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Provider/BaseConversionProvider/#static-methods","text":"public BaseConversionProvider::convertFromBaseTen(DecimalInterface $number, NumberBase|null $toBase)","title":"Static Methods"},{"location":"roster/latest/Fermat%20Core/Provider/BaseConversionProvider/#convertfrombaseten","text":"$number type DecimalInterface description No description available $toBase type NumberBase|null description No description available return type string description No description available public BaseConversionProvider::convertStringToBaseTen(string $number, NumberBase $fromBase)","title":"convertFromBaseTen"},{"location":"roster/latest/Fermat%20Core/Provider/BaseConversionProvider/#convertstringtobaseten","text":"$number type string description No description available $fromBase type NumberBase description No description available return type string description No description available This documentation was generated with Roster .","title":"convertStringToBaseTen"},{"location":"roster/latest/Fermat%20Core/Provider/CalculationModeProvider/","text":"Samsara\\Fermat\\Provider > CalculationModeProvider No description available Variables & Data Class Constants CalculationModeProvider::PHP_INT_MAX_HALF PHP_INT_MAX_HALF value 4.6116860184274E+18 Methods Static Methods public CalculationModeProvider::getCurrentMode() getCurrentMode return type Samsara\\Fermat\\Enums\\CalcMode description No description available public CalculationModeProvider::setCurrentMode(CalcMode $currentMode) setCurrentMode $currentMode type CalcMode description No description available return type void description No description available This documentation was generated with Roster .","title":"CalculationModeProvider"},{"location":"roster/latest/Fermat%20Core/Provider/CalculationModeProvider/#samsarafermatprovider-calculationmodeprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; CalculationModeProvider"},{"location":"roster/latest/Fermat%20Core/Provider/CalculationModeProvider/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Provider/CalculationModeProvider/#class-constants","text":"CalculationModeProvider::PHP_INT_MAX_HALF","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Provider/CalculationModeProvider/#php_int_max_half","text":"value 4.6116860184274E+18","title":"PHP_INT_MAX_HALF"},{"location":"roster/latest/Fermat%20Core/Provider/CalculationModeProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Provider/CalculationModeProvider/#static-methods","text":"public CalculationModeProvider::getCurrentMode()","title":"Static Methods"},{"location":"roster/latest/Fermat%20Core/Provider/CalculationModeProvider/#getcurrentmode","text":"return type Samsara\\Fermat\\Enums\\CalcMode description No description available public CalculationModeProvider::setCurrentMode(CalcMode $currentMode)","title":"getCurrentMode"},{"location":"roster/latest/Fermat%20Core/Provider/CalculationModeProvider/#setcurrentmode","text":"$currentMode type CalcMode description No description available return type void description No description available This documentation was generated with Roster .","title":"setCurrentMode"},{"location":"roster/latest/Fermat%20Core/Provider/ConstantProvider/","text":"Samsara\\Fermat\\Provider > ConstantProvider No description available Methods Static Methods public ConstantProvider::makePi(int $digits) makePi $digits type int description No description available return type string description No description available public ConstantProvider::makeE(int $digits) makeE $digits type int description No description available return type string description No description available makeE() Description: Consider also: sum [0 -> INF] { (2n + 2) / (2n + 1)! } This converges faster (though it's unclear if the calculation is actually faster), and can be represented by this set of Fermat calls: SequenceProvider::nthEvenNumber($n + 1)->divide(SequenceProvider::nthOddNumber($n)->factorial()); Perhaps by substituting the nthOddNumber()->factorial() call with something tracked locally, the performance can be improved. Current performance is acceptable even out past 200 digits. public ConstantProvider::makeLn10(int $digits) makeLn10 $digits type int description No description available return type string description No description available makeLn10() Description: The lnScale() implementation is very efficient, so this is probably our best bet for computing more digits of ln(10) to provide. public ConstantProvider::makeLn2(int $digits) makeLn2 $digits type int description No description available return type string description No description available makeLn2() Description: The lnScale() implementation is very efficient, so this is probably our best bet for computing more digits of ln(10) to provide. public ConstantProvider::makeLn1p1(int $digits) makeLn1p1 $digits type int description No description available return type string description No description available This documentation was generated with Roster .","title":"ConstantProvider"},{"location":"roster/latest/Fermat%20Core/Provider/ConstantProvider/#samsarafermatprovider-constantprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; ConstantProvider"},{"location":"roster/latest/Fermat%20Core/Provider/ConstantProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Provider/ConstantProvider/#static-methods","text":"public ConstantProvider::makePi(int $digits)","title":"Static Methods"},{"location":"roster/latest/Fermat%20Core/Provider/ConstantProvider/#makepi","text":"$digits type int description No description available return type string description No description available public ConstantProvider::makeE(int $digits)","title":"makePi"},{"location":"roster/latest/Fermat%20Core/Provider/ConstantProvider/#makee","text":"$digits type int description No description available return type string description No description available","title":"makeE"},{"location":"roster/latest/Fermat%20Core/Provider/ConstantProvider/#makeln10","text":"$digits type int description No description available return type string description No description available","title":"makeLn10"},{"location":"roster/latest/Fermat%20Core/Provider/ConstantProvider/#makeln2","text":"$digits type int description No description available return type string description No description available","title":"makeLn2"},{"location":"roster/latest/Fermat%20Core/Provider/ConstantProvider/#makeln1p1","text":"$digits type int description No description available return type string description No description available This documentation was generated with Roster .","title":"makeLn1p1"},{"location":"roster/latest/Fermat%20Core/Provider/RandomProvider/","text":"Samsara\\Fermat\\Provider > RandomProvider No description available Methods Static Methods public RandomProvider::randomInt(int|string|DecimalInterface $min, int|string|DecimalInterface $max, RandomMode $mode) randomInt $min type int|string|DecimalInterface description No description available $max type int|string|DecimalInterface description No description available $mode type RandomMode description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public RandomProvider::randomDecimal(int $scale, RandomMode $mode) randomDecimal $scale type int description No description available $mode type RandomMode description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public RandomProvider::randomReal(int|string|DecimalInterface $min, int|string|DecimalInterface $max, int $scale, RandomMode $mode) randomReal $min type int|string|DecimalInterface description No description available $max type int|string|DecimalInterface description No description available $scale type int description No description available $mode type RandomMode description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"RandomProvider"},{"location":"roster/latest/Fermat%20Core/Provider/RandomProvider/#samsarafermatprovider-randomprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; RandomProvider"},{"location":"roster/latest/Fermat%20Core/Provider/RandomProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Provider/RandomProvider/#static-methods","text":"public RandomProvider::randomInt(int|string|DecimalInterface $min, int|string|DecimalInterface $max, RandomMode $mode)","title":"Static Methods"},{"location":"roster/latest/Fermat%20Core/Provider/RandomProvider/#randomint","text":"$min type int|string|DecimalInterface description No description available $max type int|string|DecimalInterface description No description available $mode type RandomMode description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public RandomProvider::randomDecimal(int $scale, RandomMode $mode)","title":"randomInt"},{"location":"roster/latest/Fermat%20Core/Provider/RandomProvider/#randomdecimal","text":"$scale type int description No description available $mode type RandomMode description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public RandomProvider::randomReal(int|string|DecimalInterface $min, int|string|DecimalInterface $max, int $scale, RandomMode $mode)","title":"randomDecimal"},{"location":"roster/latest/Fermat%20Core/Provider/RandomProvider/#randomreal","text":"$min type int|string|DecimalInterface description No description available $max type int|string|DecimalInterface description No description available $scale type int description No description available $mode type RandomMode description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"randomReal"},{"location":"roster/latest/Fermat%20Core/Provider/RoundingProvider/","text":"Samsara\\Fermat\\Provider > RoundingProvider No description available Methods Static Methods public RoundingProvider::setRoundingMode(RoundingMode $mode) setRoundingMode $mode type RoundingMode description No description available return type void description No description available public RoundingProvider::getRoundingMode() getRoundingMode return type Samsara\\Fermat\\Enums\\RoundingMode description No description available public RoundingProvider::round(DecimalInterface $decimal, int $places) round $decimal type DecimalInterface description No description available $places type int description No description available return type string description No description available This documentation was generated with Roster .","title":"RoundingProvider"},{"location":"roster/latest/Fermat%20Core/Provider/RoundingProvider/#samsarafermatprovider-roundingprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; RoundingProvider"},{"location":"roster/latest/Fermat%20Core/Provider/RoundingProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Provider/RoundingProvider/#static-methods","text":"public RoundingProvider::setRoundingMode(RoundingMode $mode)","title":"Static Methods"},{"location":"roster/latest/Fermat%20Core/Provider/RoundingProvider/#setroundingmode","text":"$mode type RoundingMode description No description available return type void description No description available public RoundingProvider::getRoundingMode()","title":"setRoundingMode"},{"location":"roster/latest/Fermat%20Core/Provider/RoundingProvider/#getroundingmode","text":"return type Samsara\\Fermat\\Enums\\RoundingMode description No description available public RoundingProvider::round(DecimalInterface $decimal, int $places)","title":"getRoundingMode"},{"location":"roster/latest/Fermat%20Core/Provider/RoundingProvider/#round","text":"$decimal type DecimalInterface description No description available $places type int description No description available return type string description No description available This documentation was generated with Roster .","title":"round"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/","text":"Samsara\\Fermat\\Provider > SequenceProvider No description available Variables & Data Class Constants SequenceProvider::EULER_ZIGZAG EULER_ZIGZAG value array (0 => '1',1 => '1',2 => '1',3 => '2',4 => '5',5 => '16',6 => '61',7 => '272',8 => '1385',9 => '7936',10 => '50521',11 => '353792',12 => '2702765',13 => '22368256',14 => '199360981',15 => '1903757312',16 => '19391512145',17 => '209865342976',18 => '2404879675441',19 => '29088885112832',20 => '370371188237525',21 => '4951498053124096',22 => '69348874393137901',23 => '1015423886506852352',24 => '15514534163557086905',25 => '246921480190207983616',26 => '4087072509293123892361',27 => '70251601603943959887872',28 => '1252259641403629865468285',29 => '23119184187809597841473536',30 => '441543893249023104553682821',31 => '8713962757125169296170811392',32 => '177519391579539289436664789665',33 => '3729407703720529571097509625856',34 => '80723299235887898062168247453281',35 => '1798651693450888780071750349094912',36 => '41222060339517702122347079671259045',37 => '970982810785059112379399707952152576',38 => '23489580527043108252017828576198947741',39 => '583203324917310043943191641625494290432',40 => '14851150718114980017877156781405826684425',41 => '387635983772083031828014624002175135645696',42 => '10364622733519612119397957304745185976310201',43 => '283727921907431909304183316295787837183229952',44 => '7947579422597592703608040510088070619519273805',45 => '227681379129930886488600284336316164603920777216',46 => '6667537516685544977435028474773748197524107684661',47 => '199500252157859031027160499643195658166340757225472',48 => '6096278645568542158691685742876843153976539044435185',49 => '190169564657928428175235445073924928592047775873499136',50 => '6053285248188621896314383785111649088103498225146815121',) Methods Static Methods public SequenceProvider::nthOddNumber(int $n, bool $asCollection, int $collectionSize) nthOddNumber $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available nthOddNumber() Description: OEIS: A005408 public SequenceProvider::nthEvenNumber(int $n, bool $asCollection, int $collectionSize) nthEvenNumber $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available nthEvenNumber() Description: OEIS: A005843 public SequenceProvider::nthPowerNegativeOne(int $n, bool $asCollection, int $collectionSize) nthPowerNegativeOne $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available nthPowerNegativeOne() Description: OEIS: A033999 public SequenceProvider::nthEulerZigzag(int $n, bool $asCollection, int $collectionSize) nthEulerZigzag $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available nthEulerZigzag() Description: OEIS: A000111 public SequenceProvider::nthBernoulliNumber($n, int|null $scale) nthBernoulliNumber $n description No description available $scale type int|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available nthBernoulliNumber() Description: Returns the nth Bernoulli Number, where odd indexes return zero, and B1() is -1/2. This function gets very slow if you demand large precision. public SequenceProvider::nthPrimeNumbers(int $n) nthPrimeNumbers $n type int description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available public SequenceProvider::nthFibonacciNumber(int $n, bool $asCollection, int $collectionSize) nthFibonacciNumber $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type ImmutableDecimal|NumberCollection description No description available nthFibonacciNumber() Description: OEIS: A000045 This uses an implementation of the fast-doubling Karatsuba multiplication algorithm as described by 'Nayuki': https://www.nayuki.io/page/fast-fibonacci-algorithms This documentation was generated with Roster .","title":"SequenceProvider"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#samsarafermatprovider-sequenceprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; SequenceProvider"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#class-constants","text":"SequenceProvider::EULER_ZIGZAG","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#euler_zigzag","text":"value array (0 => '1',1 => '1',2 => '1',3 => '2',4 => '5',5 => '16',6 => '61',7 => '272',8 => '1385',9 => '7936',10 => '50521',11 => '353792',12 => '2702765',13 => '22368256',14 => '199360981',15 => '1903757312',16 => '19391512145',17 => '209865342976',18 => '2404879675441',19 => '29088885112832',20 => '370371188237525',21 => '4951498053124096',22 => '69348874393137901',23 => '1015423886506852352',24 => '15514534163557086905',25 => '246921480190207983616',26 => '4087072509293123892361',27 => '70251601603943959887872',28 => '1252259641403629865468285',29 => '23119184187809597841473536',30 => '441543893249023104553682821',31 => '8713962757125169296170811392',32 => '177519391579539289436664789665',33 => '3729407703720529571097509625856',34 => '80723299235887898062168247453281',35 => '1798651693450888780071750349094912',36 => '41222060339517702122347079671259045',37 => '970982810785059112379399707952152576',38 => '23489580527043108252017828576198947741',39 => '583203324917310043943191641625494290432',40 => '14851150718114980017877156781405826684425',41 => '387635983772083031828014624002175135645696',42 => '10364622733519612119397957304745185976310201',43 => '283727921907431909304183316295787837183229952',44 => '7947579422597592703608040510088070619519273805',45 => '227681379129930886488600284336316164603920777216',46 => '6667537516685544977435028474773748197524107684661',47 => '199500252157859031027160499643195658166340757225472',48 => '6096278645568542158691685742876843153976539044435185',49 => '190169564657928428175235445073924928592047775873499136',50 => '6053285248188621896314383785111649088103498225146815121',)","title":"EULER_ZIGZAG"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#static-methods","text":"public SequenceProvider::nthOddNumber(int $n, bool $asCollection, int $collectionSize)","title":"Static Methods"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#nthoddnumber","text":"$n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available","title":"nthOddNumber"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#nthevennumber","text":"$n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available","title":"nthEvenNumber"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#nthpowernegativeone","text":"$n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available","title":"nthPowerNegativeOne"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#ntheulerzigzag","text":"$n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available","title":"nthEulerZigzag"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#nthbernoullinumber","text":"$n description No description available $scale type int|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available","title":"nthBernoulliNumber"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#nthprimenumbers","text":"$n type int description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available public SequenceProvider::nthFibonacciNumber(int $n, bool $asCollection, int $collectionSize)","title":"nthPrimeNumbers"},{"location":"roster/latest/Fermat%20Core/Provider/SequenceProvider/#nthfibonaccinumber","text":"$n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type ImmutableDecimal|NumberCollection description No description available","title":"nthFibonacciNumber"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/","text":"Samsara\\Fermat\\Provider > SeriesProvider No description available Variables & Data Class Constants SeriesProvider::SUM_MODE_ADD SUM_MODE_ADD value 1 SeriesProvider::SUM_MODE_SUB SUM_MODE_SUB value 2 SeriesProvider::SUM_MODE_ALT_ADD SUM_MODE_ALT_ADD value 3 SeriesProvider::SUM_MODE_ALT_SUB SUM_MODE_ALT_SUB value 4 SeriesProvider::SUM_MODE_ALT_FIRST_ADD SUM_MODE_ALT_FIRST_ADD value 5 SeriesProvider::SUM_MODE_ALT_FIRST_SUB SUM_MODE_ALT_FIRST_SUB value 6 Methods Static Methods public SeriesProvider::maclaurinSeries(SimpleNumberInterface $input, callable $numerator, callable $exponent, callable $denominator, int $startTermAt, int $scale, int $consecutiveDivergeLimit, int $totalDivergeLimit) maclaurinSeries $input type SimpleNumberInterface description No description available $numerator type callable description No description available $exponent type callable description No description available $denominator type callable description No description available $startTermAt type int description No description available $scale type int description No description available $consecutiveDivergeLimit type int description No description available $totalDivergeLimit type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available maclaurinSeries() Description: Creates a series that evaluates the following: SUM[$startTerm -> infinity]( numerator($n) \u00d7 $input^$exponent($n) denominator($n) Where $n is the current term number, starting at $startTerm, and increasing by 1 each loop; where $numerator, exponent, and $denominator are callables that take the term number (as an int) as their only input, and give the value of that section at that term number; and where $input is the x value being considered for the series. The function continues adding terms until a term has MORE leading zeros than the $scale setting. (That is, until it adds zero to the total when considering significant digits.) public SeriesProvider::generalizedContinuedFraction(ContinuedFractionTermInterface $aPart, ContinuedFractionTermInterface $bPart, int $terms, int $scale, int $sumMode) generalizedContinuedFraction $aPart type ContinuedFractionTermInterface description No description available $bPart type ContinuedFractionTermInterface description No description available $terms type int description No description available $scale type int description No description available $sumMode type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available generalizedContinuedFraction() Description: This function processes a generalized continued fraction. In order to use this you must provide two callable classes that implement the ContinuedFractionTermInterface. This interface defines the expected inputs and outputs of the callable used by this function. This function evaluates continued fractions in the form: b0 + (a1 / (b1 + (a2 / (b2 + (a3 / b3 + ...))))) This is a continued fraction in the form used in complex analysis, referred to as a generalized continued fraction. For more information about this, please read the wikipedia article on the subject: https://en.wikipedia.org/wiki/Generalized_continued_fraction](https://en.wikipedia.org/wiki/Generalized_continued_fraction) This documentation was generated with Roster .","title":"SeriesProvider"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#samsarafermatprovider-seriesprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; SeriesProvider"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#class-constants","text":"SeriesProvider::SUM_MODE_ADD","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#sum_mode_add","text":"value 1 SeriesProvider::SUM_MODE_SUB","title":"SUM_MODE_ADD"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#sum_mode_sub","text":"value 2 SeriesProvider::SUM_MODE_ALT_ADD","title":"SUM_MODE_SUB"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#sum_mode_alt_add","text":"value 3 SeriesProvider::SUM_MODE_ALT_SUB","title":"SUM_MODE_ALT_ADD"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#sum_mode_alt_sub","text":"value 4 SeriesProvider::SUM_MODE_ALT_FIRST_ADD","title":"SUM_MODE_ALT_SUB"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#sum_mode_alt_first_add","text":"value 5 SeriesProvider::SUM_MODE_ALT_FIRST_SUB","title":"SUM_MODE_ALT_FIRST_ADD"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#sum_mode_alt_first_sub","text":"value 6","title":"SUM_MODE_ALT_FIRST_SUB"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#static-methods","text":"public SeriesProvider::maclaurinSeries(SimpleNumberInterface $input, callable $numerator, callable $exponent, callable $denominator, int $startTermAt, int $scale, int $consecutiveDivergeLimit, int $totalDivergeLimit)","title":"Static Methods"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#maclaurinseries","text":"$input type SimpleNumberInterface description No description available $numerator type callable description No description available $exponent type callable description No description available $denominator type callable description No description available $startTermAt type int description No description available $scale type int description No description available $consecutiveDivergeLimit type int description No description available $totalDivergeLimit type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available","title":"maclaurinSeries"},{"location":"roster/latest/Fermat%20Core/Provider/SeriesProvider/#generalizedcontinuedfraction","text":"$aPart type ContinuedFractionTermInterface description No description available $bPart type ContinuedFractionTermInterface description No description available $terms type int description No description available $scale type int description No description available $sumMode type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available","title":"generalizedContinuedFraction"},{"location":"roster/latest/Fermat%20Core/Provider/TrigonometryProvider/","text":"Samsara\\Fermat\\Provider > TrigonometryProvider No description available Methods Static Methods public TrigonometryProvider::radiansToDegrees($radians) radiansToDegrees $radians description return type string description No description available public TrigonometryProvider::degreesToRadians($degrees) degreesToRadians $degrees description return type string description No description available This documentation was generated with Roster .","title":"TrigonometryProvider"},{"location":"roster/latest/Fermat%20Core/Provider/TrigonometryProvider/#samsarafermatprovider-trigonometryprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; TrigonometryProvider"},{"location":"roster/latest/Fermat%20Core/Provider/TrigonometryProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Provider/TrigonometryProvider/#static-methods","text":"public TrigonometryProvider::radiansToDegrees($radians)","title":"Static Methods"},{"location":"roster/latest/Fermat%20Core/Provider/TrigonometryProvider/#radianstodegrees","text":"$radians description return type string description No description available public TrigonometryProvider::degreesToRadians($degrees)","title":"radiansToDegrees"},{"location":"roster/latest/Fermat%20Core/Provider/TrigonometryProvider/#degreestoradians","text":"$degrees description return type string description No description available This documentation was generated with Roster .","title":"degreesToRadians"},{"location":"roster/latest/Fermat%20Core/Renderer/KatexRenderer/","text":"Samsara\\Fermat\\Renderer > KatexRenderer No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Renderer > KatexRenderer"},{"location":"roster/latest/Fermat%20Core/Renderer/KatexRenderer/#samsarafermatrenderer-katexrenderer","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Renderer &gt; KatexRenderer"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Interfaces/ComponentInterface/","text":"Samsara\\Fermat\\Renderer\\Components\\Interfaces > ComponentInterface No description available Methods Instanced Methods public ComponentInterface->getOutput() getOutput return type string description No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Renderer\\Components\\Interfaces > ComponentInterface"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Interfaces/ComponentInterface/#samsarafermatrenderercomponentsinterfaces-componentinterface","text":"No description available","title":"Samsara\\Fermat\\Renderer\\Components\\Interfaces &gt; ComponentInterface"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Interfaces/ComponentInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Interfaces/ComponentInterface/#instanced-methods","text":"public ComponentInterface->getOutput()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Interfaces/ComponentInterface/#getoutput","text":"return type string description No description available This documentation was generated with Roster .","title":"getOutput"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Operations/PowOperation/","text":"Samsara\\Fermat\\Renderer\\Components\\Operations > PowOperation No description available Inheritance Implements ComponentInterface ComponentInterface namespace Samsara\\Fermat\\Renderer\\Components\\Interfaces description No description available Methods Constructor public PowOperation->__construct(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface $left, Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface $right) __construct $left type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface description No description available $right type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface description No description available return type mixed (assumed) description No description available Instanced Methods public PowOperation->getOutput() getOutput return type string description No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Renderer\\Components\\Operations > PowOperation"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Operations/PowOperation/#samsarafermatrenderercomponentsoperations-powoperation","text":"No description available","title":"Samsara\\Fermat\\Renderer\\Components\\Operations &gt; PowOperation"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Operations/PowOperation/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Operations/PowOperation/#implements","text":"ComponentInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Operations/PowOperation/#componentinterface","text":"namespace Samsara\\Fermat\\Renderer\\Components\\Interfaces description No description available","title":"ComponentInterface"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Operations/PowOperation/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Operations/PowOperation/#constructor","text":"public PowOperation->__construct(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface $left, Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface $right)","title":"Constructor"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Operations/PowOperation/#__construct","text":"$left type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface description No description available $right type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface description No description available return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Operations/PowOperation/#instanced-methods","text":"public PowOperation->getOutput()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Operations/PowOperation/#getoutput","text":"return type string description No description available This documentation was generated with Roster .","title":"getOutput"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Symbols/ThetaSymbol/","text":"Samsara\\Fermat\\Renderer\\Components\\Symbols > ThetaSymbol No description available Inheritance Implements ComponentInterface ComponentInterface namespace Samsara\\Fermat\\Renderer\\Components\\Interfaces description No description available Methods Instanced Methods public ThetaSymbol->getOutput() getOutput return type string description No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Renderer\\Components\\Symbols > ThetaSymbol"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Symbols/ThetaSymbol/#samsarafermatrenderercomponentssymbols-thetasymbol","text":"No description available","title":"Samsara\\Fermat\\Renderer\\Components\\Symbols &gt; ThetaSymbol"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Symbols/ThetaSymbol/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Symbols/ThetaSymbol/#implements","text":"ComponentInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Symbols/ThetaSymbol/#componentinterface","text":"namespace Samsara\\Fermat\\Renderer\\Components\\Interfaces description No description available","title":"ComponentInterface"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Symbols/ThetaSymbol/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Symbols/ThetaSymbol/#instanced-methods","text":"public ThetaSymbol->getOutput()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Renderer/Components/Symbols/ThetaSymbol/#getoutput","text":"return type string description No description available This documentation was generated with Roster .","title":"getOutput"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/","text":"Samsara\\Fermat\\Types > Decimal No description available Inheritance Extends Samsara\\Fermat\\Types\\Base\\Number Implements Hashable Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable Stringable namespace description No description available DecimalInterface DecimalInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available SimpleNumberInterface SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Has Traits ArithmeticSimpleTrait ArithmeticSimpleTrait namespace Samsara\\Fermat\\Types\\Traits description No description available ComparisonTrait ComparisonTrait namespace Samsara\\Fermat\\Types\\Traits description No description available IntegerMathTrait IntegerMathTrait namespace Samsara\\Fermat\\Types\\Traits description No description available TrigonometrySimpleTrait TrigonometrySimpleTrait namespace Samsara\\Fermat\\Types\\Traits description No description available InverseTrigonometrySimpleTrait InverseTrigonometrySimpleTrait namespace Samsara\\Fermat\\Types\\Traits description No description available LogSimpleTrait LogSimpleTrait namespace Samsara\\Fermat\\Types\\Traits description No description available ScaleTrait ScaleTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available Variables & Data Class Constants Decimal::INFINITY INFINITY value 'INF' Decimal::NEG_INFINITY NEG_INFINITY value '-INF' Methods Constructor public Decimal->__construct($value, int|null $scale, NumberBase $base, bool $baseTenInput) __construct $value description No description available $scale type int|null description No description available $base type NumberBase description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available Instanced Methods public Decimal->modulo($mod) modulo $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase() getBase return type Samsara\\Fermat\\Enums\\NumberBase description No description available getBase() Description: Returns the current base that the value is in. public Decimal->getAsBaseTenRealNumber() getAsBaseTenRealNumber return type string description No description available public Decimal->getValue(NumberBase|null $base) getValue $base type NumberBase|null description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value) compare $value type NumberInterface|int|float|string description No description available return type int description No description available compare() Description: Returns the sort compare integer (-1, 0, 1) for the two numbers. public Decimal->setBase(NumberBase $base) setBase $base type NumberBase description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available setBase() Description: Converts the object to a different base. public Decimal->abs() abs return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available abs() Description: Returns the current object as the absolute value of itself. public Decimal->absValue() absValue return type string description No description available absValue() Description: Returns the string of the absolute value of the current object. public Decimal->isComplex() isComplex return type bool description No description available public Decimal->continuousModulo(NumberInterface|string|int|float $mod) continuousModulo $mod type NumberInterface|string|int|float description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->add($num) add $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->subtract($num) subtract $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->multiply($num) multiply $num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->divide($num, int|null $scale) divide $num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->pow($num) pow $num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Decimal->sqrt(int|null $scale) sqrt $scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Decimal->isEqual(NumberInterface|int|string|float $value) isEqual $value type NumberInterface|int|string|float description No description available return type bool description No description available public Decimal->getScale() getScale return type int description No description available public Decimal->isGreaterThan($value) isGreaterThan $value description No description available return type bool description No description available public Decimal->isLessThan($value) isLessThan $value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value) isGreaterThanOrEqualTo $value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value) isLessThanOrEqualTo $value description No description available return type bool description No description available public Decimal->isNegative() isNegative return type bool description No description available public Decimal->isPositive() isPositive return type bool description No description available public Decimal->isNatural() isNatural return type bool description No description available public Decimal->isWhole() isWhole return type bool description No description available public Decimal->isInt() isInt return type bool description No description available public Decimal->factorial() factorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial() subFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial() doubleFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial() semiFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num) getLeastCommonMultiple $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num) getGreatestCommonDivisor $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime(int|null $certainty) isPrime $certainty type int|null description The certainty level desired. False positive rate = 1 in 4^$certainty. return type bool description No description available isPrime() Description: This function is a PHP implementation of the Miller-Rabin primality test. The default \"certainty\" value of 20 results in a false-positive rate of 1 in 1.10 x 10^12. Presumably, the probability of your hardware failing while this code is running is higher, meaning this should be statistically as certain as a deterministic algorithm on normal computer hardware. public Decimal->getDivisors() getDivisors return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->asPrimeFactors() asPrimeFactors return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(int|null $scale, bool $round) sin $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(int|null $scale, bool $round) cos $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(int|null $scale, bool $round) tan $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(int|null $scale, bool $round) sec $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(int|null $scale, bool $round) csc $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(int|null $scale, bool $round) cot $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(int|null $scale, bool $round) sinh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(int|null $scale, bool $round) cosh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(int|null $scale, bool $round) tanh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(int|null $scale, bool $round) sech $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(int|null $scale, bool $round) csch $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(int|null $scale, bool $round) coth $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(int|null $scale, bool $round) arcsin $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(int|null $scale, bool $round) arccos $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(int|null $scale, bool $round) arctan $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(int|null $scale, bool $round) arcsec $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(int|null $scale, bool $round) arccsc $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(int|null $scale, bool $round) arccot $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, RoundingMode|null $mode) roundToScale $scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale) truncateToScale $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(int|null $scale, bool $round) exp $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round) ln $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round) log10 $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->expScale(int|null $scale) expScale $scale type int|null description No description available return type string description No description available public Decimal->lnScale(int|null $scale) lnScale $scale type int|null description The number of digits which should be accurate return type string description No description available public Decimal->log10Scale(int|null $scale) log10Scale $scale type int|null description No description available return type string description No description available public Decimal->round(int $decimals, RoundingMode|null $mode) round $decimals type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals) truncate $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil() ceil return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor() floor return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros() numberOfLeadingZeros return type int description No description available numberOfLeadingZeros() Description: The number of digits between the radix and the for non-zero digit in the decimal part. public Decimal->numberOfTotalDigits() numberOfTotalDigits return type int description No description available numberOfTotalDigits() Description: The number of digits (excludes the radix). public Decimal->numberOfIntDigits() numberOfIntDigits return type int description No description available numberOfIntDigits() Description: The number of digits in the integer part. public Decimal->numberOfDecimalDigits() numberOfDecimalDigits return type int description No description available numberOfDecimalDigits() Description: The number of digits in the decimal part. public Decimal->numberOfSigDecimalDigits() numberOfSigDecimalDigits return type int description No description available numberOfSigDecimalDigits() Description: The number of digits in the decimal part, excluding leading zeros. public Decimal->asInt() asInt return type int description No description available asInt() Description: Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public Decimal->isFloat() isFloat return type bool description No description available public Decimal->asFloat() asFloat return type float description No description available public Decimal->getDecimalPart() getDecimalPart return type string description No description available public Decimal->getWholePart() getWholePart return type string description No description available Inherited Methods public Number->setMode(CalcMode $mode) setMode $mode type CalcMode description No description available return type self description No description available setMode() Description: Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->getMode() getMode return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag) setExtensions $flag type bool description No description available return type self description No description available setExtensions() Description: Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() __toString return type string description No description available public Number->hash() hash return type string description No description available hash() Description: Implemented to satisfy Hashable implementation public Number->equals(mixed $object) equals $object type mixed description No description available return type bool description No description available equals() Description: Implemented to satisfy Hashable implementation public Number->isImaginary() isImaginary return type bool description No description available isImaginary() Description: This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() isReal return type bool description No description available isReal() Description: This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() asReal return type string description No description available public Number->asComplex() asComplex return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available This documentation was generated with Roster .","title":"Decimal"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#samsarafermattypes-decimal","text":"No description available","title":"Samsara\\Fermat\\Types &gt; Decimal"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#extends","text":"Samsara\\Fermat\\Types\\Base\\Number","title":"Extends"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#implements","text":"Hashable","title":"Implements"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#hashable","text":"namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface","title":"Hashable"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#numberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable","title":"NumberInterface"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#stringable","text":"namespace description No description available DecimalInterface","title":"Stringable"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#decimalinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available SimpleNumberInterface","title":"DecimalInterface"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#simplenumberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available","title":"SimpleNumberInterface"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#has-traits","text":"ArithmeticSimpleTrait","title":"Has Traits"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#arithmeticsimpletrait","text":"namespace Samsara\\Fermat\\Types\\Traits description No description available ComparisonTrait","title":"ArithmeticSimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#comparisontrait","text":"namespace Samsara\\Fermat\\Types\\Traits description No description available IntegerMathTrait","title":"ComparisonTrait"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#integermathtrait","text":"namespace Samsara\\Fermat\\Types\\Traits description No description available TrigonometrySimpleTrait","title":"IntegerMathTrait"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#trigonometrysimpletrait","text":"namespace Samsara\\Fermat\\Types\\Traits description No description available InverseTrigonometrySimpleTrait","title":"TrigonometrySimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#inversetrigonometrysimpletrait","text":"namespace Samsara\\Fermat\\Types\\Traits description No description available LogSimpleTrait","title":"InverseTrigonometrySimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#logsimpletrait","text":"namespace Samsara\\Fermat\\Types\\Traits description No description available ScaleTrait","title":"LogSimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#scaletrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available","title":"ScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#class-constants","text":"Decimal::INFINITY","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#infinity","text":"value 'INF' Decimal::NEG_INFINITY","title":"INFINITY"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#neg_infinity","text":"value '-INF'","title":"NEG_INFINITY"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#constructor","text":"public Decimal->__construct($value, int|null $scale, NumberBase $base, bool $baseTenInput)","title":"Constructor"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#__construct","text":"$value description No description available $scale type int|null description No description available $base type NumberBase description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#instanced-methods","text":"public Decimal->modulo($mod)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#modulo","text":"$mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase()","title":"modulo"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#getbase","text":"return type Samsara\\Fermat\\Enums\\NumberBase description No description available","title":"getBase"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#getasbasetenrealnumber","text":"return type string description No description available public Decimal->getValue(NumberBase|null $base)","title":"getAsBaseTenRealNumber"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#getvalue","text":"$base type NumberBase|null description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value)","title":"getValue"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#compare","text":"$value type NumberInterface|int|float|string description No description available return type int description No description available","title":"compare"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#setbase","text":"$base type NumberBase description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available","title":"setBase"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#abs","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available","title":"abs"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#absvalue","text":"return type string description No description available","title":"absValue"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#iscomplex","text":"return type bool description No description available public Decimal->continuousModulo(NumberInterface|string|int|float $mod)","title":"isComplex"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#continuousmodulo","text":"$mod type NumberInterface|string|int|float description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->add($num)","title":"continuousModulo"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#add","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#subtract","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#multiply","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#divide","text":"$num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#pow","text":"$num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Decimal->sqrt(int|null $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#sqrt","text":"$scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Decimal->isEqual(NumberInterface|int|string|float $value)","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#isequal","text":"$value type NumberInterface|int|string|float description No description available return type bool description No description available public Decimal->getScale()","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#getscale","text":"return type int description No description available public Decimal->isGreaterThan($value)","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#isgreaterthan","text":"$value description No description available return type bool description No description available public Decimal->isLessThan($value)","title":"isGreaterThan"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#islessthan","text":"$value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value)","title":"isLessThan"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#isgreaterthanorequalto","text":"$value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value)","title":"isGreaterThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#islessthanorequalto","text":"$value description No description available return type bool description No description available public Decimal->isNegative()","title":"isLessThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#isnegative","text":"return type bool description No description available public Decimal->isPositive()","title":"isNegative"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#ispositive","text":"return type bool description No description available public Decimal->isNatural()","title":"isPositive"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#isnatural","text":"return type bool description No description available public Decimal->isWhole()","title":"isNatural"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#iswhole","text":"return type bool description No description available public Decimal->isInt()","title":"isWhole"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#isint","text":"return type bool description No description available public Decimal->factorial()","title":"isInt"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#factorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial()","title":"factorial"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#subfactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial()","title":"subFactorial"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#doublefactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial()","title":"doubleFactorial"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#semifactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num)","title":"semiFactorial"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#getleastcommonmultiple","text":"$num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num)","title":"getLeastCommonMultiple"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#getgreatestcommondivisor","text":"$num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime(int|null $certainty)","title":"getGreatestCommonDivisor"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#isprime","text":"$certainty type int|null description The certainty level desired. False positive rate = 1 in 4^$certainty. return type bool description No description available","title":"isPrime"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#getdivisors","text":"return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->asPrimeFactors()","title":"getDivisors"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#asprimefactors","text":"return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(int|null $scale, bool $round)","title":"asPrimeFactors"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#sin","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(int|null $scale, bool $round)","title":"sin"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#cos","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(int|null $scale, bool $round)","title":"cos"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#tan","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(int|null $scale, bool $round)","title":"tan"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#sec","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(int|null $scale, bool $round)","title":"sec"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#csc","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(int|null $scale, bool $round)","title":"csc"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#cot","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(int|null $scale, bool $round)","title":"cot"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#sinh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(int|null $scale, bool $round)","title":"sinh"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#cosh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(int|null $scale, bool $round)","title":"cosh"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#tanh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(int|null $scale, bool $round)","title":"tanh"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#sech","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(int|null $scale, bool $round)","title":"sech"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#csch","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(int|null $scale, bool $round)","title":"csch"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#coth","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(int|null $scale, bool $round)","title":"coth"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#arcsin","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(int|null $scale, bool $round)","title":"arcsin"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#arccos","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(int|null $scale, bool $round)","title":"arccos"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#arctan","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(int|null $scale, bool $round)","title":"arctan"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#arcsec","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(int|null $scale, bool $round)","title":"arcsec"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#arccsc","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(int|null $scale, bool $round)","title":"arccsc"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#arccot","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, RoundingMode|null $mode)","title":"arccot"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#roundtoscale","text":"$scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale)","title":"roundToScale"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#truncatetoscale","text":"$scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(int|null $scale, bool $round)","title":"truncateToScale"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#exp","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round)","title":"exp"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#ln","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round)","title":"ln"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#log10","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->expScale(int|null $scale)","title":"log10"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#expscale","text":"$scale type int|null description No description available return type string description No description available public Decimal->lnScale(int|null $scale)","title":"expScale"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#lnscale","text":"$scale type int|null description The number of digits which should be accurate return type string description No description available public Decimal->log10Scale(int|null $scale)","title":"lnScale"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#log10scale","text":"$scale type int|null description No description available return type string description No description available public Decimal->round(int $decimals, RoundingMode|null $mode)","title":"log10Scale"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#round","text":"$decimals type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals)","title":"round"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#truncate","text":"$decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil()","title":"truncate"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#ceil","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor()","title":"ceil"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#floor","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros()","title":"floor"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#numberofleadingzeros","text":"return type int description No description available","title":"numberOfLeadingZeros"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#numberoftotaldigits","text":"return type int description No description available","title":"numberOfTotalDigits"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#numberofintdigits","text":"return type int description No description available","title":"numberOfIntDigits"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#numberofdecimaldigits","text":"return type int description No description available","title":"numberOfDecimalDigits"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#numberofsigdecimaldigits","text":"return type int description No description available","title":"numberOfSigDecimalDigits"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#asint","text":"return type int description No description available","title":"asInt"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#isfloat","text":"return type bool description No description available public Decimal->asFloat()","title":"isFloat"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#asfloat","text":"return type float description No description available public Decimal->getDecimalPart()","title":"asFloat"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#getdecimalpart","text":"return type string description No description available public Decimal->getWholePart()","title":"getDecimalPart"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#getwholepart","text":"return type string description No description available","title":"getWholePart"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#inherited-methods","text":"public Number->setMode(CalcMode $mode)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#setmode","text":"$mode type CalcMode description No description available return type self description No description available","title":"setMode"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#getmode","text":"return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag)","title":"getMode"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#setextensions","text":"$flag type bool description No description available return type self description No description available","title":"setExtensions"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#__tostring","text":"return type string description No description available public Number->hash()","title":"__toString"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#hash","text":"return type string description No description available","title":"hash"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#equals","text":"$object type mixed description No description available return type bool description No description available","title":"equals"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#isimaginary","text":"return type bool description No description available","title":"isImaginary"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#isreal","text":"return type bool description No description available","title":"isReal"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#asreal","text":"return type string description No description available public Number->asComplex()","title":"asReal"},{"location":"roster/latest/Fermat%20Core/Types/Decimal/#ascomplex","text":"return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available This documentation was generated with Roster .","title":"asComplex"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/","text":"Samsara\\Fermat\\Types > Fraction No description available Inheritance Extends Samsara\\Fermat\\Types\\Base\\Number Implements Hashable Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable Stringable namespace description No description available FractionInterface FractionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available SimpleNumberInterface SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Has Traits ArithmeticSimpleTrait ArithmeticSimpleTrait namespace Samsara\\Fermat\\Types\\Traits description No description available ComparisonTrait ComparisonTrait namespace Samsara\\Fermat\\Types\\Traits description No description available Variables & Data Class Constants Fraction::INFINITY INFINITY value 'INF' Fraction::NEG_INFINITY NEG_INFINITY value '-INF' Methods Constructor public Fraction->__construct($numerator, $denominator, NumberBase $base) __construct $numerator description No description available $denominator description No description available $base type NumberBase description return type mixed (assumed) description No description available __construct() Description: Fraction constructor. Instanced Methods public Fraction->getValue() getValue return type string description No description available public Fraction->getScale() getScale return type ?int description No description available public Fraction->getNumerator() getNumerator return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->getDenominator() getDenominator return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->isComplex() isComplex return type bool description No description available public Fraction->simplify() simplify return type FractionInterface|Fraction description No description available public Fraction->abs() abs return type $this|Base\\Interfaces\\Numbers\\DecimalInterface|FractionInterface|NumberInterface|Fraction description No description available public Fraction->absValue() absValue return type string description No description available public Fraction->compare($value) compare $value description No description available return type int description No description available public Fraction->asDecimal($scale) asDecimal $scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor() getGreatestCommonDivisor return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(FractionInterface $fraction) getSmallestCommonDenominator $fraction type FractionInterface description No description available return type NumberInterface description No description available public Fraction->getAsBaseTenRealNumber() getAsBaseTenRealNumber return type string description No description available public Fraction->add($num) add $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->subtract($num) subtract $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->multiply($num) multiply $num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->divide($num, int|null $scale) divide $num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->pow($num) pow $num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Fraction->sqrt(int|null $scale) sqrt $scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Fraction->isEqual(NumberInterface|int|string|float $value) isEqual $value type NumberInterface|int|string|float description No description available return type bool description No description available public Fraction->isGreaterThan($value) isGreaterThan $value description No description available return type bool description No description available public Fraction->isLessThan($value) isLessThan $value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value) isGreaterThanOrEqualTo $value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value) isLessThanOrEqualTo $value description No description available return type bool description No description available public Fraction->isNegative() isNegative return type bool description No description available public Fraction->isPositive() isPositive return type bool description No description available public Fraction->isNatural() isNatural return type bool description No description available public Fraction->isWhole() isWhole return type bool description No description available public Fraction->isInt() isInt return type bool description No description available Inherited Methods public Number->setMode(CalcMode $mode) setMode $mode type CalcMode description No description available return type self description No description available setMode() Description: Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->getMode() getMode return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag) setExtensions $flag type bool description No description available return type self description No description available setExtensions() Description: Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() __toString return type string description No description available public Number->hash() hash return type string description No description available hash() Description: Implemented to satisfy Hashable implementation public Number->equals(mixed $object) equals $object type mixed description No description available return type bool description No description available equals() Description: Implemented to satisfy Hashable implementation public Number->isImaginary() isImaginary return type bool description No description available isImaginary() Description: This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() isReal return type bool description No description available isReal() Description: This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() asReal return type string description No description available public Number->asComplex() asComplex return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Number->getBase() getBase return type Samsara\\Fermat\\Enums\\NumberBase description No description available This documentation was generated with Roster .","title":"Fraction"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#samsarafermattypes-fraction","text":"No description available","title":"Samsara\\Fermat\\Types &gt; Fraction"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#extends","text":"Samsara\\Fermat\\Types\\Base\\Number","title":"Extends"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#implements","text":"Hashable","title":"Implements"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#hashable","text":"namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface","title":"Hashable"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#numberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable","title":"NumberInterface"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#stringable","text":"namespace description No description available FractionInterface","title":"Stringable"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#fractioninterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available SimpleNumberInterface","title":"FractionInterface"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#simplenumberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available","title":"SimpleNumberInterface"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#has-traits","text":"ArithmeticSimpleTrait","title":"Has Traits"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#arithmeticsimpletrait","text":"namespace Samsara\\Fermat\\Types\\Traits description No description available ComparisonTrait","title":"ArithmeticSimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#comparisontrait","text":"namespace Samsara\\Fermat\\Types\\Traits description No description available","title":"ComparisonTrait"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#class-constants","text":"Fraction::INFINITY","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#infinity","text":"value 'INF' Fraction::NEG_INFINITY","title":"INFINITY"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#neg_infinity","text":"value '-INF'","title":"NEG_INFINITY"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#constructor","text":"public Fraction->__construct($numerator, $denominator, NumberBase $base)","title":"Constructor"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#__construct","text":"$numerator description No description available $denominator description No description available $base type NumberBase description return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#instanced-methods","text":"public Fraction->getValue()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#getvalue","text":"return type string description No description available public Fraction->getScale()","title":"getValue"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#getscale","text":"return type ?int description No description available public Fraction->getNumerator()","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#getnumerator","text":"return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->getDenominator()","title":"getNumerator"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#getdenominator","text":"return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->isComplex()","title":"getDenominator"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#iscomplex","text":"return type bool description No description available public Fraction->simplify()","title":"isComplex"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#simplify","text":"return type FractionInterface|Fraction description No description available public Fraction->abs()","title":"simplify"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#abs","text":"return type $this|Base\\Interfaces\\Numbers\\DecimalInterface|FractionInterface|NumberInterface|Fraction description No description available public Fraction->absValue()","title":"abs"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#absvalue","text":"return type string description No description available public Fraction->compare($value)","title":"absValue"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#compare","text":"$value description No description available return type int description No description available public Fraction->asDecimal($scale)","title":"compare"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#asdecimal","text":"$scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor()","title":"asDecimal"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#getgreatestcommondivisor","text":"return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(FractionInterface $fraction)","title":"getGreatestCommonDivisor"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#getsmallestcommondenominator","text":"$fraction type FractionInterface description No description available return type NumberInterface description No description available public Fraction->getAsBaseTenRealNumber()","title":"getSmallestCommonDenominator"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#getasbasetenrealnumber","text":"return type string description No description available public Fraction->add($num)","title":"getAsBaseTenRealNumber"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#add","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#subtract","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#multiply","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#divide","text":"$num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#pow","text":"$num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Fraction->sqrt(int|null $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#sqrt","text":"$scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Fraction->isEqual(NumberInterface|int|string|float $value)","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#isequal","text":"$value type NumberInterface|int|string|float description No description available return type bool description No description available public Fraction->isGreaterThan($value)","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#isgreaterthan","text":"$value description No description available return type bool description No description available public Fraction->isLessThan($value)","title":"isGreaterThan"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#islessthan","text":"$value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value)","title":"isLessThan"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#isgreaterthanorequalto","text":"$value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value)","title":"isGreaterThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#islessthanorequalto","text":"$value description No description available return type bool description No description available public Fraction->isNegative()","title":"isLessThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#isnegative","text":"return type bool description No description available public Fraction->isPositive()","title":"isNegative"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#ispositive","text":"return type bool description No description available public Fraction->isNatural()","title":"isPositive"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#isnatural","text":"return type bool description No description available public Fraction->isWhole()","title":"isNatural"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#iswhole","text":"return type bool description No description available public Fraction->isInt()","title":"isWhole"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#isint","text":"return type bool description No description available","title":"isInt"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#inherited-methods","text":"public Number->setMode(CalcMode $mode)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#setmode","text":"$mode type CalcMode description No description available return type self description No description available","title":"setMode"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#getmode","text":"return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag)","title":"getMode"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#setextensions","text":"$flag type bool description No description available return type self description No description available","title":"setExtensions"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#__tostring","text":"return type string description No description available public Number->hash()","title":"__toString"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#hash","text":"return type string description No description available","title":"hash"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#equals","text":"$object type mixed description No description available return type bool description No description available","title":"equals"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#isimaginary","text":"return type bool description No description available","title":"isImaginary"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#isreal","text":"return type bool description No description available","title":"isReal"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#asreal","text":"return type string description No description available public Number->asComplex()","title":"asReal"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#ascomplex","text":"return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Number->getBase()","title":"asComplex"},{"location":"roster/latest/Fermat%20Core/Types/Fraction/#getbase","text":"return type Samsara\\Fermat\\Enums\\NumberBase description No description available This documentation was generated with Roster .","title":"getBase"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/","text":"Samsara\\Fermat\\Types > NumberCollection No description available Inheritance Implements NumberCollectionInterface NumberCollectionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups description No description available ArrayAccess ArrayAccess namespace description No description available IteratorAggregate IteratorAggregate namespace description No description available Traversable Traversable namespace description No description available Methods Constructor public NumberCollection->__construct(array $numbers) __construct $numbers type array description No description available return type mixed (assumed) description No description available __construct() Description: NumberCollection constructor. Instanced Methods public NumberCollection->collect(array $numbers) collect $numbers type array description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->count() count return type int description No description available public NumberCollection->toArray() toArray return type array description No description available public NumberCollection->selectScale() selectScale return type int description No description available public NumberCollection->push(NumberInterface $number) push $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->pop() pop return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->unshift(NumberInterface $number) unshift $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->shift() shift return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->filterByKeys(array $filters) filterByKeys $filters type array description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available public NumberCollection->sort() sort return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->reverse() reverse return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->add($number) add $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->subtract($number) subtract $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->multiply($number) multiply $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->divide($number) divide $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->pow($number) pow $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available pow() Description: Raises each element in the collection to the exponent $number public NumberCollection->exp($base) exp $base description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available exp() Description: Replaces each element in the collection with $base to the power of that value. If no base is given, Euler's number is assumed to be the base (as is assumed in most cases where an exp() function is encountered in math) public NumberCollection->get(int $key) get $key type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->getRandom() getRandom return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->sum() sum return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->mean() mean return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public NumberCollection->average() average return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public NumberCollection->makeNormalDistribution() makeNormalDistribution return type Samsara\\Fermat\\Provider\\Distribution\\Normal description No description available public NumberCollection->makePoissonDistribution() makePoissonDistribution return type Samsara\\Fermat\\Provider\\Distribution\\Poisson description No description available public NumberCollection->makeExponentialDistribution() makeExponentialDistribution return type Samsara\\Fermat\\Provider\\Distribution\\Exponential description No description available public NumberCollection->makePolynomialFunction() makePolynomialFunction return type Samsara\\Fermat\\Values\\Algebra\\PolynomialFunction description No description available public NumberCollection->offsetExists($offset) offsetExists $offset description No description available return type bool description No description available public NumberCollection->offsetGet($offset) offsetGet $offset description No description available return type mixed description No description available public NumberCollection->offsetSet($offset, $value) offsetSet $offset description No description available $value description No description available return type void description No description available public NumberCollection->offsetUnset($offset) offsetUnset $offset description No description available return type void description No description available public NumberCollection->getIterator() getIterator return type Traversable description No description available This documentation was generated with Roster .","title":"NumberCollection"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#samsarafermattypes-numbercollection","text":"No description available","title":"Samsara\\Fermat\\Types &gt; NumberCollection"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#implements","text":"NumberCollectionInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#numbercollectioninterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups description No description available ArrayAccess","title":"NumberCollectionInterface"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#arrayaccess","text":"namespace description No description available IteratorAggregate","title":"ArrayAccess"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#iteratoraggregate","text":"namespace description No description available Traversable","title":"IteratorAggregate"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#traversable","text":"namespace description No description available","title":"Traversable"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#constructor","text":"public NumberCollection->__construct(array $numbers)","title":"Constructor"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#__construct","text":"$numbers type array description No description available return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#instanced-methods","text":"public NumberCollection->collect(array $numbers)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#collect","text":"$numbers type array description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->count()","title":"collect"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#count","text":"return type int description No description available public NumberCollection->toArray()","title":"count"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#toarray","text":"return type array description No description available public NumberCollection->selectScale()","title":"toArray"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#selectscale","text":"return type int description No description available public NumberCollection->push(NumberInterface $number)","title":"selectScale"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#push","text":"$number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->pop()","title":"push"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#pop","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->unshift(NumberInterface $number)","title":"pop"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#unshift","text":"$number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->shift()","title":"unshift"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#shift","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->filterByKeys(array $filters)","title":"shift"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#filterbykeys","text":"$filters type array description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available public NumberCollection->sort()","title":"filterByKeys"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#sort","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->reverse()","title":"sort"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#reverse","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->add($number)","title":"reverse"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#add","text":"$number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->subtract($number)","title":"add"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#subtract","text":"$number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->multiply($number)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#multiply","text":"$number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->divide($number)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#divide","text":"$number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->pow($number)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#pow","text":"$number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available","title":"pow"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#exp","text":"$base description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available","title":"exp"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#get","text":"$key type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->getRandom()","title":"get"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#getrandom","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->sum()","title":"getRandom"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#sum","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->mean()","title":"sum"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#mean","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public NumberCollection->average()","title":"mean"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#average","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public NumberCollection->makeNormalDistribution()","title":"average"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#makenormaldistribution","text":"return type Samsara\\Fermat\\Provider\\Distribution\\Normal description No description available public NumberCollection->makePoissonDistribution()","title":"makeNormalDistribution"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#makepoissondistribution","text":"return type Samsara\\Fermat\\Provider\\Distribution\\Poisson description No description available public NumberCollection->makeExponentialDistribution()","title":"makePoissonDistribution"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#makeexponentialdistribution","text":"return type Samsara\\Fermat\\Provider\\Distribution\\Exponential description No description available public NumberCollection->makePolynomialFunction()","title":"makeExponentialDistribution"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#makepolynomialfunction","text":"return type Samsara\\Fermat\\Values\\Algebra\\PolynomialFunction description No description available public NumberCollection->offsetExists($offset)","title":"makePolynomialFunction"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#offsetexists","text":"$offset description No description available return type bool description No description available public NumberCollection->offsetGet($offset)","title":"offsetExists"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#offsetget","text":"$offset description No description available return type mixed description No description available public NumberCollection->offsetSet($offset, $value)","title":"offsetGet"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#offsetset","text":"$offset description No description available $value description No description available return type void description No description available public NumberCollection->offsetUnset($offset)","title":"offsetSet"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#offsetunset","text":"$offset description No description available return type void description No description available public NumberCollection->getIterator()","title":"offsetUnset"},{"location":"roster/latest/Fermat%20Core/Types/NumberCollection/#getiterator","text":"return type Traversable description No description available This documentation was generated with Roster .","title":"getIterator"},{"location":"roster/latest/Fermat%20Core/Types/Tuple/","text":"Samsara\\Fermat\\Types > Tuple No description available Methods Constructor public Tuple->__construct($data) __construct $data description No description available return type mixed (assumed) description No description available Instanced Methods public Tuple->get(int $index) get $index type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Tuple->set(int $index, ImmutableDecimal $value) set $index type int description No description available $value type ImmutableDecimal description return type self description No description available public Tuple->all() all return type array description No description available public Tuple->size() size return type int description No description available public Tuple->hasIndex(int $index) hasIndex $index type int description No description available return type bool description No description available This documentation was generated with Roster .","title":"Tuple"},{"location":"roster/latest/Fermat%20Core/Types/Tuple/#samsarafermattypes-tuple","text":"No description available","title":"Samsara\\Fermat\\Types &gt; Tuple"},{"location":"roster/latest/Fermat%20Core/Types/Tuple/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Tuple/#constructor","text":"public Tuple->__construct($data)","title":"Constructor"},{"location":"roster/latest/Fermat%20Core/Types/Tuple/#__construct","text":"$data description No description available return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Core/Types/Tuple/#instanced-methods","text":"public Tuple->get(int $index)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Tuple/#get","text":"$index type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Tuple->set(int $index, ImmutableDecimal $value)","title":"get"},{"location":"roster/latest/Fermat%20Core/Types/Tuple/#set","text":"$index type int description No description available $value type ImmutableDecimal description return type self description No description available public Tuple->all()","title":"set"},{"location":"roster/latest/Fermat%20Core/Types/Tuple/#all","text":"return type array description No description available public Tuple->size()","title":"all"},{"location":"roster/latest/Fermat%20Core/Types/Tuple/#size","text":"return type int description No description available public Tuple->hasIndex(int $index)","title":"size"},{"location":"roster/latest/Fermat%20Core/Types/Tuple/#hasindex","text":"$index type int description No description available return type bool description No description available This documentation was generated with Roster .","title":"hasIndex"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/","text":"Samsara\\Fermat\\Types\\Base > Number No description available Inheritance Implements Hashable Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable Stringable namespace description No description available Variables & Data Class Constants Number::INFINITY INFINITY value 'INF' Number::NEG_INFINITY NEG_INFINITY value '-INF' Methods Constructor public Number->__construct() __construct return type mixed (assumed) description No description available Instanced Methods public Number->setMode(CalcMode $mode) setMode $mode type CalcMode description No description available return type self description No description available setMode() Description: Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->getMode() getMode return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->getValue() getValue return type string description No description available getValue() Description: Returns the current value as a string. public Number->setExtensions(bool $flag) setExtensions $flag type bool description No description available return type self description No description available setExtensions() Description: Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() __toString return type string description No description available public Number->hash() hash return type string description No description available hash() Description: Implemented to satisfy Hashable implementation public Number->equals(mixed $object) equals $object type mixed description No description available return type bool description No description available equals() Description: Implemented to satisfy Hashable implementation public Number->isImaginary() isImaginary return type bool description No description available isImaginary() Description: This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() isReal return type bool description No description available isReal() Description: This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() asReal return type string description No description available public Number->getAsBaseTenRealNumber() getAsBaseTenRealNumber return type string description No description available public Number->isComplex() isComplex return type bool description No description available public Number->asComplex() asComplex return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Number->getBase() getBase return type Samsara\\Fermat\\Enums\\NumberBase description No description available Inherited Methods public NumberInterface->abs() abs return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() absValue return type string description No description available public NumberInterface->add($num) add $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) subtract $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) multiply $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) divide $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) pow $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) sqrt $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(float|int|string|NumberInterface $value) isEqual $value type float|int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() getScale return type ?int description No description available This documentation was generated with Roster .","title":"Number"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#samsarafermattypesbase-number","text":"No description available","title":"Samsara\\Fermat\\Types\\Base &gt; Number"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#implements","text":"Hashable","title":"Implements"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#hashable","text":"namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface","title":"Hashable"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#numberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable","title":"NumberInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#stringable","text":"namespace description No description available","title":"Stringable"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#class-constants","text":"Number::INFINITY","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#infinity","text":"value 'INF' Number::NEG_INFINITY","title":"INFINITY"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#neg_infinity","text":"value '-INF'","title":"NEG_INFINITY"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#constructor","text":"public Number->__construct()","title":"Constructor"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#__construct","text":"return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#instanced-methods","text":"public Number->setMode(CalcMode $mode)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#setmode","text":"$mode type CalcMode description No description available return type self description No description available","title":"setMode"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#getmode","text":"return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->getValue()","title":"getMode"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#getvalue","text":"return type string description No description available","title":"getValue"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#setextensions","text":"$flag type bool description No description available return type self description No description available","title":"setExtensions"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#__tostring","text":"return type string description No description available public Number->hash()","title":"__toString"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#hash","text":"return type string description No description available","title":"hash"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#equals","text":"$object type mixed description No description available return type bool description No description available","title":"equals"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#isimaginary","text":"return type bool description No description available","title":"isImaginary"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#isreal","text":"return type bool description No description available","title":"isReal"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#asreal","text":"return type string description No description available public Number->getAsBaseTenRealNumber()","title":"asReal"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#getasbasetenrealnumber","text":"return type string description No description available public Number->isComplex()","title":"getAsBaseTenRealNumber"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#iscomplex","text":"return type bool description No description available public Number->asComplex()","title":"isComplex"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#ascomplex","text":"return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Number->getBase()","title":"asComplex"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#getbase","text":"return type Samsara\\Fermat\\Enums\\NumberBase description No description available","title":"getBase"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#inherited-methods","text":"public NumberInterface->abs()","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#abs","text":"return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue()","title":"abs"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#absvalue","text":"return type string description No description available public NumberInterface->add($num)","title":"absValue"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#add","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#subtract","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#multiply","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#divide","text":"$num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#pow","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#sqrt","text":"$scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(float|int|string|NumberInterface $value)","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#isequal","text":"$value type float|int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale()","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Types/Base/Number/#getscale","text":"return type ?int description No description available This documentation was generated with Roster .","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Types/Base/Selectable/","text":"Samsara\\Fermat\\Types\\Base > Selectable No description available Variables & Data Class Constants Selectable::CALC_MODE_FALLBACK CALC_MODE_FALLBACK value 0 Selectable::CALC_MODE_PRECISION CALC_MODE_PRECISION value 1 Selectable::CALC_MODE_NATIVE CALC_MODE_NATIVE value 2 This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Base > Selectable"},{"location":"roster/latest/Fermat%20Core/Types/Base/Selectable/#samsarafermattypesbase-selectable","text":"No description available","title":"Samsara\\Fermat\\Types\\Base &gt; Selectable"},{"location":"roster/latest/Fermat%20Core/Types/Base/Selectable/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Types/Base/Selectable/#class-constants","text":"Selectable::CALC_MODE_FALLBACK","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Types/Base/Selectable/#calc_mode_fallback","text":"value 0 Selectable::CALC_MODE_PRECISION","title":"CALC_MODE_FALLBACK"},{"location":"roster/latest/Fermat%20Core/Types/Base/Selectable/#calc_mode_precision","text":"value 1 Selectable::CALC_MODE_NATIVE","title":"CALC_MODE_PRECISION"},{"location":"roster/latest/Fermat%20Core/Types/Base/Selectable/#calc_mode_native","text":"value 2 This documentation was generated with Roster .","title":"CALC_MODE_NATIVE"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Callables/ContinuedFractionTermInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Callables > ContinuedFractionTermInterface No description available Methods Instanced Methods public ContinuedFractionTermInterface->__invoke(int $n) __invoke $n type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"ContinuedFractionTermInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Callables/ContinuedFractionTermInterface/#samsarafermattypesbaseinterfacescallables-continuedfractionterminterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Callables &gt; ContinuedFractionTermInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Callables/ContinuedFractionTermInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Callables/ContinuedFractionTermInterface/#instanced-methods","text":"public ContinuedFractionTermInterface->__invoke(int $n)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Callables/ContinuedFractionTermInterface/#__invoke","text":"$n type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"__invoke"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Characteristics/BaseConversionInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Characteristics > BaseConversionInterface No description available Methods Instanced Methods public BaseConversionInterface->convertToBase(int $base) convertToBase $base type int description return type DecimalInterface description No description available public BaseConversionInterface->getBase() getBase return type int description No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Characteristics > BaseConversionInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Characteristics/BaseConversionInterface/#samsarafermattypesbaseinterfacescharacteristics-baseconversioninterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Characteristics &gt; BaseConversionInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Characteristics/BaseConversionInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Characteristics/BaseConversionInterface/#instanced-methods","text":"public BaseConversionInterface->convertToBase(int $base)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Characteristics/BaseConversionInterface/#converttobase","text":"$base type int description return type DecimalInterface description No description available public BaseConversionInterface->getBase()","title":"convertToBase"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Characteristics/BaseConversionInterface/#getbase","text":"return type int description No description available This documentation was generated with Roster .","title":"getBase"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups > NumberCollectionInterface No description available Methods Instanced Methods public NumberCollectionInterface->collect(array $numbers) collect $numbers type array description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->count() count return type int description No description available public NumberCollectionInterface->toArray() toArray return type array description No description available public NumberCollectionInterface->push(NumberInterface $number) push $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->pop() pop return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->unshift(NumberInterface $number) unshift $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->shift() shift return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->sort() sort return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->reverse() reverse return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->multiply($number) multiply $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->divide($number) divide $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->add($number) add $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->subtract($number) subtract $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->pow($number) pow $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->exp($number) exp $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->get(int $key) get $key type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->getRandom() getRandom return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->sum() sum return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->mean() mean return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->makeNormalDistribution() makeNormalDistribution return type Samsara\\Fermat\\Provider\\Distribution\\Normal description No description available public NumberCollectionInterface->makePoissonDistribution() makePoissonDistribution return type Samsara\\Fermat\\Provider\\Distribution\\Poisson description No description available public NumberCollectionInterface->makeExponentialDistribution() makeExponentialDistribution return type Samsara\\Fermat\\Provider\\Distribution\\Exponential description No description available public NumberCollectionInterface->makePolynomialFunction() makePolynomialFunction return type Samsara\\Fermat\\Values\\Algebra\\PolynomialFunction description No description available This documentation was generated with Roster .","title":"NumberCollectionInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#samsarafermattypesbaseinterfacesgroups-numbercollectioninterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups &gt; NumberCollectionInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#instanced-methods","text":"public NumberCollectionInterface->collect(array $numbers)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#collect","text":"$numbers type array description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->count()","title":"collect"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#count","text":"return type int description No description available public NumberCollectionInterface->toArray()","title":"count"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#toarray","text":"return type array description No description available public NumberCollectionInterface->push(NumberInterface $number)","title":"toArray"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#push","text":"$number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->pop()","title":"push"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#pop","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->unshift(NumberInterface $number)","title":"pop"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#unshift","text":"$number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->shift()","title":"unshift"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#shift","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->sort()","title":"shift"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#sort","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->reverse()","title":"sort"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#reverse","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->multiply($number)","title":"reverse"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#multiply","text":"$number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->divide($number)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#divide","text":"$number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->add($number)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#add","text":"$number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->subtract($number)","title":"add"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#subtract","text":"$number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->pow($number)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#pow","text":"$number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->exp($number)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#exp","text":"$number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->get(int $key)","title":"exp"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#get","text":"$key type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->getRandom()","title":"get"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#getrandom","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->sum()","title":"getRandom"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#sum","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->mean()","title":"sum"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#mean","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->makeNormalDistribution()","title":"mean"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#makenormaldistribution","text":"return type Samsara\\Fermat\\Provider\\Distribution\\Normal description No description available public NumberCollectionInterface->makePoissonDistribution()","title":"makeNormalDistribution"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#makepoissondistribution","text":"return type Samsara\\Fermat\\Provider\\Distribution\\Poisson description No description available public NumberCollectionInterface->makeExponentialDistribution()","title":"makePoissonDistribution"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#makeexponentialdistribution","text":"return type Samsara\\Fermat\\Provider\\Distribution\\Exponential description No description available public NumberCollectionInterface->makePolynomialFunction()","title":"makeExponentialDistribution"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Groups/NumberCollectionInterface/#makepolynomialfunction","text":"return type Samsara\\Fermat\\Values\\Algebra\\PolynomialFunction description No description available This documentation was generated with Roster .","title":"makePolynomialFunction"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers > DecimalInterface No description available Inheritance Methods Instanced Methods public DecimalInterface->modulo($mod) modulo $mod description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->continuousModulo(NumberInterface|string|int|float $mod) continuousModulo $mod type NumberInterface|string|int|float description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->getLeastCommonMultiple($num) getLeastCommonMultiple $num description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->getGreatestCommonDivisor($num) getGreatestCommonDivisor $num description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->isNatural() isNatural return type bool description No description available public DecimalInterface->isWhole() isWhole return type bool description No description available public DecimalInterface->isInt() isInt return type bool description No description available public DecimalInterface->asInt() asInt return type int description No description available public DecimalInterface->isFloat() isFloat return type bool description No description available public DecimalInterface->asFloat() asFloat return type float description No description available public DecimalInterface->getDecimalPart() getDecimalPart return type string description No description available public DecimalInterface->getWholePart() getWholePart return type string description No description available public DecimalInterface->isPrime() isPrime return type bool description No description available public DecimalInterface->getDivisors() getDivisors return type Samsara\\Fermat\\Types\\NumberCollection description No description available public DecimalInterface->asPrimeFactors() asPrimeFactors return type Samsara\\Fermat\\Types\\NumberCollection description No description available public DecimalInterface->ceil() ceil return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->floor() floor return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->factorial() factorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->subFactorial() subFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->doubleFactorial() doubleFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->semiFactorial() semiFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sin(int|null $scale, bool $round) sin $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cos(int|null $scale, bool $round) cos $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->tan(int|null $scale, bool $round) tan $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cot(int|null $scale, bool $round) cot $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sec(int|null $scale, bool $round) sec $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->csc(int|null $scale, bool $round) csc $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arcsin(int|null $scale, bool $round) arcsin $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccos(int|null $scale, bool $round) arccos $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arctan(int|null $scale, bool $round) arctan $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccot(int|null $scale, bool $round) arccot $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arcsec(int|null $scale, bool $round) arcsec $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccsc(int|null $scale, bool $round) arccsc $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sinh(int|null $scale, bool $round) sinh $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cosh(int|null $scale, bool $round) cosh $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->tanh(int|null $scale, bool $round) tanh $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->coth(int|null $scale, bool $round) coth $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sech(int|null $scale, bool $round) sech $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->csch(int|null $scale, bool $round) csch $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->ln(int|null $scale, bool $round) ln $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->log10(int|null $scale, bool $round) log10 $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->exp(int|null $scale, bool $round) exp $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->round(int $decimals, RoundingMode|null $mode) round $decimals type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->truncate(int $decimals) truncate $decimals type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->roundToScale(int $scale, RoundingMode|null $mode) roundToScale $scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->truncateToScale($scale) truncateToScale $scale description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->getBase() getBase return type Samsara\\Fermat\\Enums\\NumberBase description No description available public DecimalInterface->numberOfLeadingZeros() numberOfLeadingZeros return type int description No description available public DecimalInterface->numberOfTotalDigits() numberOfTotalDigits return type int description No description available public DecimalInterface->numberOfIntDigits() numberOfIntDigits return type int description No description available public DecimalInterface->numberOfDecimalDigits() numberOfDecimalDigits return type int description No description available public DecimalInterface->numberOfSigDecimalDigits() numberOfSigDecimalDigits return type int description No description available Inherited Methods public SimpleNumberInterface->compare($value) compare $value description return type int description No description available public SimpleNumberInterface->isNegative() isNegative return type bool description No description available public SimpleNumberInterface->isPositive() isPositive return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber() getAsBaseTenRealNumber return type string description No description available public SimpleNumberInterface->getValue() getValue return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value) isGreaterThan $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value) isLessThan $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value) isGreaterThanOrEqualTo $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value) isLessThanOrEqualTo $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->abs() abs return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() absValue return type string description No description available public NumberInterface->add($num) add $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) subtract $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) multiply $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) divide $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) pow $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) sqrt $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(float|int|string|NumberInterface $value) isEqual $value type float|int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() getScale return type ?int description No description available public NumberInterface->isImaginary() isImaginary return type bool description No description available public NumberInterface->isReal() isReal return type bool description No description available public NumberInterface->asReal() asReal return type string description No description available public NumberInterface->isComplex() isComplex return type bool description No description available public NumberInterface->asComplex() asComplex return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available This documentation was generated with Roster .","title":"DecimalInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#samsarafermattypesbaseinterfacesnumbers-decimalinterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers &gt; DecimalInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#instanced-methods","text":"public DecimalInterface->modulo($mod)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#modulo","text":"$mod description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->continuousModulo(NumberInterface|string|int|float $mod)","title":"modulo"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#continuousmodulo","text":"$mod type NumberInterface|string|int|float description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->getLeastCommonMultiple($num)","title":"continuousModulo"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#getleastcommonmultiple","text":"$num description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->getGreatestCommonDivisor($num)","title":"getLeastCommonMultiple"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#getgreatestcommondivisor","text":"$num description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->isNatural()","title":"getGreatestCommonDivisor"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#isnatural","text":"return type bool description No description available public DecimalInterface->isWhole()","title":"isNatural"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#iswhole","text":"return type bool description No description available public DecimalInterface->isInt()","title":"isWhole"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#isint","text":"return type bool description No description available public DecimalInterface->asInt()","title":"isInt"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#asint","text":"return type int description No description available public DecimalInterface->isFloat()","title":"asInt"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#isfloat","text":"return type bool description No description available public DecimalInterface->asFloat()","title":"isFloat"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#asfloat","text":"return type float description No description available public DecimalInterface->getDecimalPart()","title":"asFloat"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#getdecimalpart","text":"return type string description No description available public DecimalInterface->getWholePart()","title":"getDecimalPart"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#getwholepart","text":"return type string description No description available public DecimalInterface->isPrime()","title":"getWholePart"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#isprime","text":"return type bool description No description available public DecimalInterface->getDivisors()","title":"isPrime"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#getdivisors","text":"return type Samsara\\Fermat\\Types\\NumberCollection description No description available public DecimalInterface->asPrimeFactors()","title":"getDivisors"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#asprimefactors","text":"return type Samsara\\Fermat\\Types\\NumberCollection description No description available public DecimalInterface->ceil()","title":"asPrimeFactors"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#ceil","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->floor()","title":"ceil"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#floor","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->factorial()","title":"floor"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#factorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->subFactorial()","title":"factorial"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#subfactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->doubleFactorial()","title":"subFactorial"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#doublefactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->semiFactorial()","title":"doubleFactorial"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#semifactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sin(int|null $scale, bool $round)","title":"semiFactorial"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#sin","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cos(int|null $scale, bool $round)","title":"sin"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#cos","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->tan(int|null $scale, bool $round)","title":"cos"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#tan","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cot(int|null $scale, bool $round)","title":"tan"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#cot","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sec(int|null $scale, bool $round)","title":"cot"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#sec","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->csc(int|null $scale, bool $round)","title":"sec"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#csc","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arcsin(int|null $scale, bool $round)","title":"csc"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#arcsin","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccos(int|null $scale, bool $round)","title":"arcsin"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#arccos","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arctan(int|null $scale, bool $round)","title":"arccos"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#arctan","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccot(int|null $scale, bool $round)","title":"arctan"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#arccot","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arcsec(int|null $scale, bool $round)","title":"arccot"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#arcsec","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccsc(int|null $scale, bool $round)","title":"arcsec"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#arccsc","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sinh(int|null $scale, bool $round)","title":"arccsc"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#sinh","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cosh(int|null $scale, bool $round)","title":"sinh"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#cosh","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->tanh(int|null $scale, bool $round)","title":"cosh"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#tanh","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->coth(int|null $scale, bool $round)","title":"tanh"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#coth","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sech(int|null $scale, bool $round)","title":"coth"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#sech","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->csch(int|null $scale, bool $round)","title":"sech"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#csch","text":"$scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->ln(int|null $scale, bool $round)","title":"csch"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#ln","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->log10(int|null $scale, bool $round)","title":"ln"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#log10","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->exp(int|null $scale, bool $round)","title":"log10"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#exp","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->round(int $decimals, RoundingMode|null $mode)","title":"exp"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#round","text":"$decimals type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->truncate(int $decimals)","title":"round"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#truncate","text":"$decimals type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->roundToScale(int $scale, RoundingMode|null $mode)","title":"truncate"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#roundtoscale","text":"$scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->truncateToScale($scale)","title":"roundToScale"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#truncatetoscale","text":"$scale description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->getBase()","title":"truncateToScale"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#getbase","text":"return type Samsara\\Fermat\\Enums\\NumberBase description No description available public DecimalInterface->numberOfLeadingZeros()","title":"getBase"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#numberofleadingzeros","text":"return type int description No description available public DecimalInterface->numberOfTotalDigits()","title":"numberOfLeadingZeros"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#numberoftotaldigits","text":"return type int description No description available public DecimalInterface->numberOfIntDigits()","title":"numberOfTotalDigits"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#numberofintdigits","text":"return type int description No description available public DecimalInterface->numberOfDecimalDigits()","title":"numberOfIntDigits"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#numberofdecimaldigits","text":"return type int description No description available public DecimalInterface->numberOfSigDecimalDigits()","title":"numberOfDecimalDigits"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#numberofsigdecimaldigits","text":"return type int description No description available","title":"numberOfSigDecimalDigits"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#inherited-methods","text":"public SimpleNumberInterface->compare($value)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#compare","text":"$value description return type int description No description available public SimpleNumberInterface->isNegative()","title":"compare"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#isnegative","text":"return type bool description No description available public SimpleNumberInterface->isPositive()","title":"isNegative"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#ispositive","text":"return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber()","title":"isPositive"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#getasbasetenrealnumber","text":"return type string description No description available public SimpleNumberInterface->getValue()","title":"getAsBaseTenRealNumber"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#getvalue","text":"return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value)","title":"getValue"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#isgreaterthan","text":"$value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value)","title":"isGreaterThan"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#islessthan","text":"$value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value)","title":"isLessThan"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#isgreaterthanorequalto","text":"$value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value)","title":"isGreaterThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#islessthanorequalto","text":"$value type int|string|NumberInterface description return type bool description No description available public NumberInterface->abs()","title":"isLessThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#abs","text":"return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue()","title":"abs"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#absvalue","text":"return type string description No description available public NumberInterface->add($num)","title":"absValue"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#add","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#subtract","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#multiply","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#divide","text":"$num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#pow","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#sqrt","text":"$scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(float|int|string|NumberInterface $value)","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#isequal","text":"$value type float|int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale()","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#getscale","text":"return type ?int description No description available public NumberInterface->isImaginary()","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#isimaginary","text":"return type bool description No description available public NumberInterface->isReal()","title":"isImaginary"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#isreal","text":"return type bool description No description available public NumberInterface->asReal()","title":"isReal"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#asreal","text":"return type string description No description available public NumberInterface->isComplex()","title":"asReal"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#iscomplex","text":"return type bool description No description available public NumberInterface->asComplex()","title":"isComplex"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/DecimalInterface/#ascomplex","text":"return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available This documentation was generated with Roster .","title":"asComplex"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers > FractionInterface No description available Inheritance Methods Instanced Methods public FractionInterface->simplify() simplify return type FractionInterface description No description available public FractionInterface->getNumerator() getNumerator return type DecimalInterface description No description available public FractionInterface->getDenominator() getDenominator return type DecimalInterface description No description available public FractionInterface->getSmallestCommonDenominator(FractionInterface $fraction) getSmallestCommonDenominator $fraction type FractionInterface description return type DecimalInterface description No description available public FractionInterface->asDecimal() asDecimal return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available Inherited Methods public SimpleNumberInterface->compare($value) compare $value description return type int description No description available public SimpleNumberInterface->isNegative() isNegative return type bool description No description available public SimpleNumberInterface->isPositive() isPositive return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber() getAsBaseTenRealNumber return type string description No description available public SimpleNumberInterface->getValue() getValue return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value) isGreaterThan $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value) isLessThan $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value) isGreaterThanOrEqualTo $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value) isLessThanOrEqualTo $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->abs() abs return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() absValue return type string description No description available public NumberInterface->add($num) add $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) subtract $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) multiply $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) divide $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) pow $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) sqrt $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(float|int|string|NumberInterface $value) isEqual $value type float|int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() getScale return type ?int description No description available public NumberInterface->isImaginary() isImaginary return type bool description No description available public NumberInterface->isReal() isReal return type bool description No description available public NumberInterface->asReal() asReal return type string description No description available public NumberInterface->isComplex() isComplex return type bool description No description available public NumberInterface->asComplex() asComplex return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available This documentation was generated with Roster .","title":"FractionInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#samsarafermattypesbaseinterfacesnumbers-fractioninterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers &gt; FractionInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#instanced-methods","text":"public FractionInterface->simplify()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#simplify","text":"return type FractionInterface description No description available public FractionInterface->getNumerator()","title":"simplify"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#getnumerator","text":"return type DecimalInterface description No description available public FractionInterface->getDenominator()","title":"getNumerator"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#getdenominator","text":"return type DecimalInterface description No description available public FractionInterface->getSmallestCommonDenominator(FractionInterface $fraction)","title":"getDenominator"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#getsmallestcommondenominator","text":"$fraction type FractionInterface description return type DecimalInterface description No description available public FractionInterface->asDecimal()","title":"getSmallestCommonDenominator"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#asdecimal","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available","title":"asDecimal"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#inherited-methods","text":"public SimpleNumberInterface->compare($value)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#compare","text":"$value description return type int description No description available public SimpleNumberInterface->isNegative()","title":"compare"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#isnegative","text":"return type bool description No description available public SimpleNumberInterface->isPositive()","title":"isNegative"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#ispositive","text":"return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber()","title":"isPositive"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#getasbasetenrealnumber","text":"return type string description No description available public SimpleNumberInterface->getValue()","title":"getAsBaseTenRealNumber"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#getvalue","text":"return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value)","title":"getValue"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#isgreaterthan","text":"$value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value)","title":"isGreaterThan"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#islessthan","text":"$value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value)","title":"isLessThan"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#isgreaterthanorequalto","text":"$value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value)","title":"isGreaterThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#islessthanorequalto","text":"$value type int|string|NumberInterface description return type bool description No description available public NumberInterface->abs()","title":"isLessThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#abs","text":"return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue()","title":"abs"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#absvalue","text":"return type string description No description available public NumberInterface->add($num)","title":"absValue"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#add","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#subtract","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#multiply","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#divide","text":"$num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#pow","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#sqrt","text":"$scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(float|int|string|NumberInterface $value)","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#isequal","text":"$value type float|int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale()","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#getscale","text":"return type ?int description No description available public NumberInterface->isImaginary()","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#isimaginary","text":"return type bool description No description available public NumberInterface->isReal()","title":"isImaginary"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#isreal","text":"return type bool description No description available public NumberInterface->asReal()","title":"isReal"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#asreal","text":"return type string description No description available public NumberInterface->isComplex()","title":"asReal"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#iscomplex","text":"return type bool description No description available public NumberInterface->asComplex()","title":"isComplex"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/FractionInterface/#ascomplex","text":"return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available This documentation was generated with Roster .","title":"asComplex"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers > NumberInterface No description available Methods Instanced Methods public NumberInterface->abs() abs return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() absValue return type string description No description available public NumberInterface->add($num) add $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) subtract $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) multiply $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) divide $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) pow $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) sqrt $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(float|int|string|NumberInterface $value) isEqual $value type float|int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() getScale return type ?int description No description available public NumberInterface->isImaginary() isImaginary return type bool description No description available public NumberInterface->isReal() isReal return type bool description No description available public NumberInterface->asReal() asReal return type string description No description available public NumberInterface->isComplex() isComplex return type bool description No description available public NumberInterface->asComplex() asComplex return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public NumberInterface->getValue() getValue return type string description No description available getValue() Description: Returns the current value as a string. This documentation was generated with Roster .","title":"NumberInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#samsarafermattypesbaseinterfacesnumbers-numberinterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers &gt; NumberInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#instanced-methods","text":"public NumberInterface->abs()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#abs","text":"return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue()","title":"abs"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#absvalue","text":"return type string description No description available public NumberInterface->add($num)","title":"absValue"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#add","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#subtract","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#multiply","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#divide","text":"$num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#pow","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#sqrt","text":"$scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(float|int|string|NumberInterface $value)","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#isequal","text":"$value type float|int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale()","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#getscale","text":"return type ?int description No description available public NumberInterface->isImaginary()","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#isimaginary","text":"return type bool description No description available public NumberInterface->isReal()","title":"isImaginary"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#isreal","text":"return type bool description No description available public NumberInterface->asReal()","title":"isReal"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#asreal","text":"return type string description No description available public NumberInterface->isComplex()","title":"asReal"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#iscomplex","text":"return type bool description No description available public NumberInterface->asComplex()","title":"isComplex"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#ascomplex","text":"return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public NumberInterface->getValue()","title":"asComplex"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/NumberInterface/#getvalue","text":"return type string description No description available","title":"getValue"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers > SimpleNumberInterface No description available Inheritance Methods Instanced Methods public SimpleNumberInterface->compare($value) compare $value description return type int description No description available public SimpleNumberInterface->isNegative() isNegative return type bool description No description available public SimpleNumberInterface->isPositive() isPositive return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber() getAsBaseTenRealNumber return type string description No description available public SimpleNumberInterface->getValue() getValue return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value) isGreaterThan $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value) isLessThan $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value) isGreaterThanOrEqualTo $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value) isLessThanOrEqualTo $value type int|string|NumberInterface description return type bool description No description available Inherited Methods public NumberInterface->abs() abs return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() absValue return type string description No description available public NumberInterface->add($num) add $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) subtract $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) multiply $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) divide $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) pow $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) sqrt $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(float|int|string|NumberInterface $value) isEqual $value type float|int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() getScale return type ?int description No description available public NumberInterface->isImaginary() isImaginary return type bool description No description available public NumberInterface->isReal() isReal return type bool description No description available public NumberInterface->asReal() asReal return type string description No description available public NumberInterface->isComplex() isComplex return type bool description No description available public NumberInterface->asComplex() asComplex return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available This documentation was generated with Roster .","title":"SimpleNumberInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#samsarafermattypesbaseinterfacesnumbers-simplenumberinterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers &gt; SimpleNumberInterface"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#instanced-methods","text":"public SimpleNumberInterface->compare($value)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#compare","text":"$value description return type int description No description available public SimpleNumberInterface->isNegative()","title":"compare"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#isnegative","text":"return type bool description No description available public SimpleNumberInterface->isPositive()","title":"isNegative"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#ispositive","text":"return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber()","title":"isPositive"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#getasbasetenrealnumber","text":"return type string description No description available public SimpleNumberInterface->getValue()","title":"getAsBaseTenRealNumber"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#getvalue","text":"return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value)","title":"getValue"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#isgreaterthan","text":"$value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value)","title":"isGreaterThan"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#islessthan","text":"$value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value)","title":"isLessThan"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#isgreaterthanorequalto","text":"$value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value)","title":"isGreaterThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#islessthanorequalto","text":"$value type int|string|NumberInterface description return type bool description No description available","title":"isLessThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#inherited-methods","text":"public NumberInterface->abs()","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#abs","text":"return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue()","title":"abs"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#absvalue","text":"return type string description No description available public NumberInterface->add($num)","title":"absValue"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#add","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#subtract","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#multiply","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#divide","text":"$num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#pow","text":"$num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#sqrt","text":"$scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(float|int|string|NumberInterface $value)","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#isequal","text":"$value type float|int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale()","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#getscale","text":"return type ?int description No description available public NumberInterface->isImaginary()","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#isimaginary","text":"return type bool description No description available public NumberInterface->isReal()","title":"isImaginary"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#isreal","text":"return type bool description No description available public NumberInterface->asReal()","title":"isReal"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#asreal","text":"return type string description No description available public NumberInterface->isComplex()","title":"asReal"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#iscomplex","text":"return type bool description No description available public NumberInterface->asComplex()","title":"isComplex"},{"location":"roster/latest/Fermat%20Core/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#ascomplex","text":"return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available This documentation was generated with Roster .","title":"asComplex"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/","text":"Samsara\\Fermat\\Types\\Traits > ArithmeticSimpleTrait No description available Inheritance Has Traits ArithmeticSelectionTrait ArithmeticSelectionTrait namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available ArithmeticScaleTrait ArithmeticScaleTrait namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available ArithmeticNativeTrait ArithmeticNativeTrait namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available ArithmeticGMPTrait ArithmeticGMPTrait namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available Methods Instanced Methods public ArithmeticSimpleTrait->add($num) add $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public ArithmeticSimpleTrait->subtract($num) subtract $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public ArithmeticSimpleTrait->multiply($num) multiply $num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public ArithmeticSimpleTrait->divide($num, int|null $scale) divide $num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public ArithmeticSimpleTrait->pow($num) pow $num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public ArithmeticSimpleTrait->sqrt(int|null $scale) sqrt $scale type int|null description No description available return type DecimalInterface|Fraction description No description available This documentation was generated with Roster .","title":"ArithmeticSimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#samsarafermattypestraits-arithmeticsimpletrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits &gt; ArithmeticSimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#has-traits","text":"ArithmeticSelectionTrait","title":"Has Traits"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#arithmeticselectiontrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available ArithmeticScaleTrait","title":"ArithmeticSelectionTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#arithmeticscaletrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available ArithmeticNativeTrait","title":"ArithmeticScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#arithmeticnativetrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available ArithmeticGMPTrait","title":"ArithmeticNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#arithmeticgmptrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available","title":"ArithmeticGMPTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#instanced-methods","text":"public ArithmeticSimpleTrait->add($num)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#add","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public ArithmeticSimpleTrait->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#subtract","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public ArithmeticSimpleTrait->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#multiply","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public ArithmeticSimpleTrait->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#divide","text":"$num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public ArithmeticSimpleTrait->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#pow","text":"$num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public ArithmeticSimpleTrait->sqrt(int|null $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ArithmeticSimpleTrait/#sqrt","text":"$scale type int|null description No description available return type DecimalInterface|Fraction description No description available This documentation was generated with Roster .","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/","text":"Samsara\\Fermat\\Types\\Traits > ComparisonTrait No description available Methods Instanced Methods public ComparisonTrait->isEqual(NumberInterface|int|string|float $value) isEqual $value type NumberInterface|int|string|float description No description available return type bool description No description available public ComparisonTrait->isGreaterThan($value) isGreaterThan $value description No description available return type bool description No description available public ComparisonTrait->isLessThan($value) isLessThan $value description No description available return type bool description No description available public ComparisonTrait->isGreaterThanOrEqualTo($value) isGreaterThanOrEqualTo $value description No description available return type bool description No description available public ComparisonTrait->isLessThanOrEqualTo($value) isLessThanOrEqualTo $value description No description available return type bool description No description available public ComparisonTrait->isNegative() isNegative return type bool description No description available public ComparisonTrait->isPositive() isPositive return type bool description No description available public ComparisonTrait->isNatural() isNatural return type bool description No description available public ComparisonTrait->isWhole() isWhole return type bool description No description available public ComparisonTrait->isInt() isInt return type bool description No description available This documentation was generated with Roster .","title":"ComparisonTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#samsarafermattypestraits-comparisontrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits &gt; ComparisonTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#instanced-methods","text":"public ComparisonTrait->isEqual(NumberInterface|int|string|float $value)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#isequal","text":"$value type NumberInterface|int|string|float description No description available return type bool description No description available public ComparisonTrait->isGreaterThan($value)","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#isgreaterthan","text":"$value description No description available return type bool description No description available public ComparisonTrait->isLessThan($value)","title":"isGreaterThan"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#islessthan","text":"$value description No description available return type bool description No description available public ComparisonTrait->isGreaterThanOrEqualTo($value)","title":"isLessThan"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#isgreaterthanorequalto","text":"$value description No description available return type bool description No description available public ComparisonTrait->isLessThanOrEqualTo($value)","title":"isGreaterThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#islessthanorequalto","text":"$value description No description available return type bool description No description available public ComparisonTrait->isNegative()","title":"isLessThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#isnegative","text":"return type bool description No description available public ComparisonTrait->isPositive()","title":"isNegative"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#ispositive","text":"return type bool description No description available public ComparisonTrait->isNatural()","title":"isPositive"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#isnatural","text":"return type bool description No description available public ComparisonTrait->isWhole()","title":"isNatural"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#iswhole","text":"return type bool description No description available public ComparisonTrait->isInt()","title":"isWhole"},{"location":"roster/latest/Fermat%20Core/Types/Traits/ComparisonTrait/#isint","text":"return type bool description No description available This documentation was generated with Roster .","title":"isInt"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/","text":"Samsara\\Fermat\\Types\\Traits > IntegerMathTrait No description available Methods Instanced Methods public IntegerMathTrait->factorial() factorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->subFactorial() subFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->doubleFactorial() doubleFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->semiFactorial() semiFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->getLeastCommonMultiple($num) getLeastCommonMultiple $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->getGreatestCommonDivisor($num) getGreatestCommonDivisor $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->isPrime(int|null $certainty) isPrime $certainty type int|null description The certainty level desired. False positive rate = 1 in 4^$certainty. return type bool description No description available isPrime() Description: This function is a PHP implementation of the Miller-Rabin primality test. The default \"certainty\" value of 20 results in a false-positive rate of 1 in 1.10 x 10^12. Presumably, the probability of your hardware failing while this code is running is higher, meaning this should be statistically as certain as a deterministic algorithm on normal computer hardware. public IntegerMathTrait->getDivisors() getDivisors return type Samsara\\Fermat\\Types\\NumberCollection description No description available public IntegerMathTrait->asPrimeFactors() asPrimeFactors return type Samsara\\Fermat\\Types\\NumberCollection description No description available This documentation was generated with Roster .","title":"IntegerMathTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#samsarafermattypestraits-integermathtrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits &gt; IntegerMathTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#instanced-methods","text":"public IntegerMathTrait->factorial()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#factorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->subFactorial()","title":"factorial"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#subfactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->doubleFactorial()","title":"subFactorial"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#doublefactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->semiFactorial()","title":"doubleFactorial"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#semifactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->getLeastCommonMultiple($num)","title":"semiFactorial"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#getleastcommonmultiple","text":"$num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->getGreatestCommonDivisor($num)","title":"getLeastCommonMultiple"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#getgreatestcommondivisor","text":"$num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->isPrime(int|null $certainty)","title":"getGreatestCommonDivisor"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#isprime","text":"$certainty type int|null description The certainty level desired. False positive rate = 1 in 4^$certainty. return type bool description No description available","title":"isPrime"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#getdivisors","text":"return type Samsara\\Fermat\\Types\\NumberCollection description No description available public IntegerMathTrait->asPrimeFactors()","title":"getDivisors"},{"location":"roster/latest/Fermat%20Core/Types/Traits/IntegerMathTrait/#asprimefactors","text":"return type Samsara\\Fermat\\Types\\NumberCollection description No description available This documentation was generated with Roster .","title":"asPrimeFactors"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/","text":"Samsara\\Fermat\\Types\\Traits > InverseTrigonometrySimpleTrait No description available Inheritance Has Traits InverseTrigonometryNativeTrait InverseTrigonometryNativeTrait namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available InverseTrigonometryScaleTrait InverseTrigonometryScaleTrait namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available InverseTrigonometrySelectionTrait InverseTrigonometrySelectionTrait namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available Methods Instanced Methods public InverseTrigonometrySimpleTrait->arcsin(int|null $scale, bool $round) arcsin $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->arccos(int|null $scale, bool $round) arccos $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->arctan(int|null $scale, bool $round) arctan $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->arcsec(int|null $scale, bool $round) arcsec $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->arccsc(int|null $scale, bool $round) arccsc $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->arccot(int|null $scale, bool $round) arccot $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->roundToScale(int $scale, RoundingMode|null $mode) roundToScale $scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->truncateToScale(int $scale) truncateToScale $scale type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->getScale() getScale return type ?int description No description available This documentation was generated with Roster .","title":"InverseTrigonometrySimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#samsarafermattypestraits-inversetrigonometrysimpletrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits &gt; InverseTrigonometrySimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#has-traits","text":"InverseTrigonometryNativeTrait","title":"Has Traits"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#inversetrigonometrynativetrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available InverseTrigonometryScaleTrait","title":"InverseTrigonometryNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#inversetrigonometryscaletrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available InverseTrigonometrySelectionTrait","title":"InverseTrigonometryScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#inversetrigonometryselectiontrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available","title":"InverseTrigonometrySelectionTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#instanced-methods","text":"public InverseTrigonometrySimpleTrait->arcsin(int|null $scale, bool $round)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#arcsin","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->arccos(int|null $scale, bool $round)","title":"arcsin"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#arccos","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->arctan(int|null $scale, bool $round)","title":"arccos"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#arctan","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->arcsec(int|null $scale, bool $round)","title":"arctan"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#arcsec","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->arccsc(int|null $scale, bool $round)","title":"arcsec"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#arccsc","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->arccot(int|null $scale, bool $round)","title":"arccsc"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#arccot","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->roundToScale(int $scale, RoundingMode|null $mode)","title":"arccot"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#roundtoscale","text":"$scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->truncateToScale(int $scale)","title":"roundToScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#truncatetoscale","text":"$scale type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometrySimpleTrait->getScale()","title":"truncateToScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/InverseTrigonometrySimpleTrait/#getscale","text":"return type ?int description No description available This documentation was generated with Roster .","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/","text":"Samsara\\Fermat\\Types\\Traits > LogSimpleTrait No description available Inheritance Has Traits LogNativeTrait LogNativeTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available LogScaleTrait LogScaleTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available LogSelectionTrait LogSelectionTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available Methods Instanced Methods public LogSimpleTrait->exp(int|null $scale, bool $round) exp $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogSimpleTrait->ln(int|null $scale, bool $round) ln $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogSimpleTrait->log10(int|null $scale, bool $round) log10 $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogSimpleTrait->expScale(int|null $scale) expScale $scale type int|null description No description available return type string description No description available public LogSimpleTrait->lnScale(int|null $scale) lnScale $scale type int|null description The number of digits which should be accurate return type string description No description available public LogSimpleTrait->log10Scale(int|null $scale) log10Scale $scale type int|null description No description available return type string description No description available This documentation was generated with Roster .","title":"LogSimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#samsarafermattypestraits-logsimpletrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits &gt; LogSimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#has-traits","text":"LogNativeTrait","title":"Has Traits"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#lognativetrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available LogScaleTrait","title":"LogNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#logscaletrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available LogSelectionTrait","title":"LogScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#logselectiontrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available","title":"LogSelectionTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#instanced-methods","text":"public LogSimpleTrait->exp(int|null $scale, bool $round)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#exp","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogSimpleTrait->ln(int|null $scale, bool $round)","title":"exp"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#ln","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogSimpleTrait->log10(int|null $scale, bool $round)","title":"ln"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#log10","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogSimpleTrait->expScale(int|null $scale)","title":"log10"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#expscale","text":"$scale type int|null description No description available return type string description No description available public LogSimpleTrait->lnScale(int|null $scale)","title":"expScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#lnscale","text":"$scale type int|null description The number of digits which should be accurate return type string description No description available public LogSimpleTrait->log10Scale(int|null $scale)","title":"lnScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/LogSimpleTrait/#log10scale","text":"$scale type int|null description No description available return type string description No description available This documentation was generated with Roster .","title":"log10Scale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/","text":"Samsara\\Fermat\\Types\\Traits > TrigonometrySimpleTrait No description available Inheritance Has Traits TrigonometrySelectionTrait TrigonometrySelectionTrait namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available TrigonometryScaleTrait TrigonometryScaleTrait namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available TrigonometryNativeTrait TrigonometryNativeTrait namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available Methods Instanced Methods public TrigonometrySimpleTrait->sin(int|null $scale, bool $round) sin $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->cos(int|null $scale, bool $round) cos $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->tan(int|null $scale, bool $round) tan $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->sec(int|null $scale, bool $round) sec $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->csc(int|null $scale, bool $round) csc $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->cot(int|null $scale, bool $round) cot $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->sinh(int|null $scale, bool $round) sinh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->cosh(int|null $scale, bool $round) cosh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->tanh(int|null $scale, bool $round) tanh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->sech(int|null $scale, bool $round) sech $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->csch(int|null $scale, bool $round) csch $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->coth(int|null $scale, bool $round) coth $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available This documentation was generated with Roster .","title":"TrigonometrySimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#samsarafermattypestraits-trigonometrysimpletrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits &gt; TrigonometrySimpleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#has-traits","text":"TrigonometrySelectionTrait","title":"Has Traits"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#trigonometryselectiontrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available TrigonometryScaleTrait","title":"TrigonometrySelectionTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#trigonometryscaletrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available TrigonometryNativeTrait","title":"TrigonometryScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#trigonometrynativetrait","text":"namespace Samsara\\Fermat\\Types\\Traits\\Trigonometry description No description available","title":"TrigonometryNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#instanced-methods","text":"public TrigonometrySimpleTrait->sin(int|null $scale, bool $round)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#sin","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->cos(int|null $scale, bool $round)","title":"sin"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#cos","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->tan(int|null $scale, bool $round)","title":"cos"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#tan","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->sec(int|null $scale, bool $round)","title":"tan"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#sec","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->csc(int|null $scale, bool $round)","title":"sec"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#csc","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->cot(int|null $scale, bool $round)","title":"csc"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#cot","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->sinh(int|null $scale, bool $round)","title":"cot"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#sinh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->cosh(int|null $scale, bool $round)","title":"sinh"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#cosh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->tanh(int|null $scale, bool $round)","title":"cosh"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#tanh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->sech(int|null $scale, bool $round)","title":"tanh"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#sech","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->csch(int|null $scale, bool $round)","title":"sech"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#csch","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometrySimpleTrait->coth(int|null $scale, bool $round)","title":"csch"},{"location":"roster/latest/Fermat%20Core/Types/Traits/TrigonometrySimpleTrait/#coth","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available This documentation was generated with Roster .","title":"coth"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Arithmetic/ArithmeticGMPTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Arithmetic > ArithmeticGMPTrait No description available This documentation was generated with Roster .","title":"ArithmeticGMPTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Arithmetic/ArithmeticGMPTrait/#samsarafermattypestraitsarithmetic-arithmeticgmptrait","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Arithmetic &gt; ArithmeticGMPTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Arithmetic/ArithmeticNativeTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Arithmetic > ArithmeticNativeTrait No description available This documentation was generated with Roster .","title":"ArithmeticNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Arithmetic/ArithmeticNativeTrait/#samsarafermattypestraitsarithmetic-arithmeticnativetrait","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Arithmetic &gt; ArithmeticNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Arithmetic/ArithmeticScaleTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Arithmetic > ArithmeticScaleTrait No description available This documentation was generated with Roster .","title":"ArithmeticScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Arithmetic/ArithmeticScaleTrait/#samsarafermattypestraitsarithmetic-arithmeticscaletrait","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Arithmetic &gt; ArithmeticScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Arithmetic/ArithmeticSelectionTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Arithmetic > ArithmeticSelectionTrait No description available This documentation was generated with Roster .","title":"ArithmeticSelectionTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Arithmetic/ArithmeticSelectionTrait/#samsarafermattypestraitsarithmetic-arithmeticselectiontrait","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Arithmetic &gt; ArithmeticSelectionTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Decimal > InverseTrigonometryTrait No description available Methods Instanced Methods public InverseTrigonometryTrait->arcsin(?int $scale, bool $round) arcsin $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccos(?int $scale, bool $round) arccos $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arctan(?int $scale, bool $round) arctan $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccot(?int $scale, bool $round) arccot $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arcsec(?int $scale, bool $round) arcsec $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccsc(?int $scale, bool $round) arccsc $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->roundToScale(int $scale, ?int $mode) roundToScale $scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->truncateToScale(int $scale) truncateToScale $scale type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->getScale() getScale return type ?int description No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Decimal > InverseTrigonometryTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#samsarafermattypestraitsdecimal-inversetrigonometrytrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Decimal &gt; InverseTrigonometryTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#instanced-methods","text":"public InverseTrigonometryTrait->arcsin(?int $scale, bool $round)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#arcsin","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccos(?int $scale, bool $round)","title":"arcsin"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#arccos","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arctan(?int $scale, bool $round)","title":"arccos"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#arctan","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccot(?int $scale, bool $round)","title":"arctan"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#arccot","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arcsec(?int $scale, bool $round)","title":"arccot"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#arcsec","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccsc(?int $scale, bool $round)","title":"arcsec"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#arccsc","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->roundToScale(int $scale, ?int $mode)","title":"arccsc"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#roundtoscale","text":"$scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->truncateToScale(int $scale)","title":"roundToScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#truncatetoscale","text":"$scale type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->getScale()","title":"truncateToScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/InverseTrigonometryTrait/#getscale","text":"return type ?int description No description available This documentation was generated with Roster .","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogNativeTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Decimal > LogNativeTrait No description available This documentation was generated with Roster .","title":"LogNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogNativeTrait/#samsarafermattypestraitsdecimal-lognativetrait","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Decimal &gt; LogNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogScaleTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Decimal > LogScaleTrait No description available Methods Instanced Methods public LogScaleTrait->expScale(int|null $scale) expScale $scale type int|null description No description available return type string description No description available public LogScaleTrait->lnScale(int|null $scale) lnScale $scale type int|null description The number of digits which should be accurate return type string description No description available public LogScaleTrait->log10Scale(int|null $scale) log10Scale $scale type int|null description No description available return type string description No description available This documentation was generated with Roster .","title":"LogScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogScaleTrait/#samsarafermattypestraitsdecimal-logscaletrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Decimal &gt; LogScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogScaleTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogScaleTrait/#instanced-methods","text":"public LogScaleTrait->expScale(int|null $scale)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogScaleTrait/#expscale","text":"$scale type int|null description No description available return type string description No description available public LogScaleTrait->lnScale(int|null $scale)","title":"expScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogScaleTrait/#lnscale","text":"$scale type int|null description The number of digits which should be accurate return type string description No description available public LogScaleTrait->log10Scale(int|null $scale)","title":"lnScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogScaleTrait/#log10scale","text":"$scale type int|null description No description available return type string description No description available This documentation was generated with Roster .","title":"log10Scale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogSelectionTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Decimal > LogSelectionTrait No description available This documentation was generated with Roster .","title":"LogSelectionTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogSelectionTrait/#samsarafermattypestraitsdecimal-logselectiontrait","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Decimal &gt; LogSelectionTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Decimal > LogTrait No description available Methods Instanced Methods public LogTrait->exp(?int $scale, bool $round) exp $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogTrait->ln(int|null $scale, bool $round) ln $scale type int|null description The number of digits which should be accurate $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogTrait->log10(int|null $scale, bool $round) log10 $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Decimal > LogTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogTrait/#samsarafermattypestraitsdecimal-logtrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Decimal &gt; LogTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogTrait/#instanced-methods","text":"public LogTrait->exp(?int $scale, bool $round)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogTrait/#exp","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogTrait->ln(int|null $scale, bool $round)","title":"exp"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogTrait/#ln","text":"$scale type int|null description The number of digits which should be accurate $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogTrait->log10(int|null $scale, bool $round)","title":"ln"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/LogTrait/#log10","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available This documentation was generated with Roster .","title":"log10"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Decimal > ScaleTrait No description available Methods Instanced Methods public ScaleTrait->getScale() getScale return type int description No description available public ScaleTrait->round(int $decimals, RoundingMode|null $mode) round $decimals type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->truncate(int $decimals) truncate $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->roundToScale(int $scale, RoundingMode|null $mode) roundToScale $scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->truncateToScale($scale) truncateToScale $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->ceil() ceil return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->floor() floor return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->numberOfLeadingZeros() numberOfLeadingZeros return type int description No description available numberOfLeadingZeros() Description: The number of digits between the radix and the for non-zero digit in the decimal part. public ScaleTrait->numberOfTotalDigits() numberOfTotalDigits return type int description No description available numberOfTotalDigits() Description: The number of digits (excludes the radix). public ScaleTrait->numberOfIntDigits() numberOfIntDigits return type int description No description available numberOfIntDigits() Description: The number of digits in the integer part. public ScaleTrait->numberOfDecimalDigits() numberOfDecimalDigits return type int description No description available numberOfDecimalDigits() Description: The number of digits in the decimal part. public ScaleTrait->numberOfSigDecimalDigits() numberOfSigDecimalDigits return type int description No description available numberOfSigDecimalDigits() Description: The number of digits in the decimal part, excluding leading zeros. public ScaleTrait->asInt() asInt return type int description No description available asInt() Description: Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public ScaleTrait->isFloat() isFloat return type bool description No description available public ScaleTrait->asFloat() asFloat return type float description No description available public ScaleTrait->getDecimalPart() getDecimalPart return type string description No description available public ScaleTrait->getWholePart() getWholePart return type string description No description available This documentation was generated with Roster .","title":"ScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#samsarafermattypestraitsdecimal-scaletrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Decimal &gt; ScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#instanced-methods","text":"public ScaleTrait->getScale()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#getscale","text":"return type int description No description available public ScaleTrait->round(int $decimals, RoundingMode|null $mode)","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#round","text":"$decimals type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->truncate(int $decimals)","title":"round"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#truncate","text":"$decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->roundToScale(int $scale, RoundingMode|null $mode)","title":"truncate"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#roundtoscale","text":"$scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->truncateToScale($scale)","title":"roundToScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#truncatetoscale","text":"$scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->ceil()","title":"truncateToScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#ceil","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->floor()","title":"ceil"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#floor","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->numberOfLeadingZeros()","title":"floor"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#numberofleadingzeros","text":"return type int description No description available","title":"numberOfLeadingZeros"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#numberoftotaldigits","text":"return type int description No description available","title":"numberOfTotalDigits"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#numberofintdigits","text":"return type int description No description available","title":"numberOfIntDigits"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#numberofdecimaldigits","text":"return type int description No description available","title":"numberOfDecimalDigits"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#numberofsigdecimaldigits","text":"return type int description No description available","title":"numberOfSigDecimalDigits"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#asint","text":"return type int description No description available","title":"asInt"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#isfloat","text":"return type bool description No description available public ScaleTrait->asFloat()","title":"isFloat"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#asfloat","text":"return type float description No description available public ScaleTrait->getDecimalPart()","title":"asFloat"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#getdecimalpart","text":"return type string description No description available public ScaleTrait->getWholePart()","title":"getDecimalPart"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/ScaleTrait/#getwholepart","text":"return type string description No description available This documentation was generated with Roster .","title":"getWholePart"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Decimal > TrigonometryTrait No description available Methods Instanced Methods public TrigonometryTrait->sin(?int $scale, bool $round) sin $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cos(?int $scale, bool $round) cos $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->tan(?int $scale, bool $round) tan $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cot(?int $scale, bool $round) cot $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sec(?int $scale, bool $round) sec $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->csc(?int $scale, bool $round) csc $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sinh(?int $scale, bool $round) sinh $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cosh(?int $scale, bool $round) cosh $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->tanh(?int $scale, bool $round) tanh $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->coth(?int $scale, bool $round) coth $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sech(?int $scale, bool $round) sech $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->csch(?int $scale, bool $round) csch $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Decimal > TrigonometryTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#samsarafermattypestraitsdecimal-trigonometrytrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Decimal &gt; TrigonometryTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#instanced-methods","text":"public TrigonometryTrait->sin(?int $scale, bool $round)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#sin","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cos(?int $scale, bool $round)","title":"sin"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#cos","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->tan(?int $scale, bool $round)","title":"cos"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#tan","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cot(?int $scale, bool $round)","title":"tan"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#cot","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sec(?int $scale, bool $round)","title":"cot"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#sec","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->csc(?int $scale, bool $round)","title":"sec"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#csc","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sinh(?int $scale, bool $round)","title":"csc"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#sinh","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cosh(?int $scale, bool $round)","title":"sinh"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#cosh","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->tanh(?int $scale, bool $round)","title":"cosh"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#tanh","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->coth(?int $scale, bool $round)","title":"tanh"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#coth","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sech(?int $scale, bool $round)","title":"coth"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#sech","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->csch(?int $scale, bool $round)","title":"sech"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Decimal/TrigonometryTrait/#csch","text":"$scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available This documentation was generated with Roster .","title":"csch"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/InverseTrigonometryNativeTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Trigonometry > InverseTrigonometryNativeTrait No description available This documentation was generated with Roster .","title":"InverseTrigonometryNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/InverseTrigonometryNativeTrait/#samsarafermattypestraitstrigonometry-inversetrigonometrynativetrait","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Trigonometry &gt; InverseTrigonometryNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/InverseTrigonometryScaleTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Trigonometry > InverseTrigonometryScaleTrait No description available Methods Instanced Methods public InverseTrigonometryScaleTrait->roundToScale(int $scale, RoundingMode|null $mode) roundToScale $scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryScaleTrait->truncateToScale(int $scale) truncateToScale $scale type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryScaleTrait->getScale() getScale return type ?int description No description available This documentation was generated with Roster .","title":"InverseTrigonometryScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/InverseTrigonometryScaleTrait/#samsarafermattypestraitstrigonometry-inversetrigonometryscaletrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Trigonometry &gt; InverseTrigonometryScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/InverseTrigonometryScaleTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/InverseTrigonometryScaleTrait/#instanced-methods","text":"public InverseTrigonometryScaleTrait->roundToScale(int $scale, RoundingMode|null $mode)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/InverseTrigonometryScaleTrait/#roundtoscale","text":"$scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryScaleTrait->truncateToScale(int $scale)","title":"roundToScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/InverseTrigonometryScaleTrait/#truncatetoscale","text":"$scale type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryScaleTrait->getScale()","title":"truncateToScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/InverseTrigonometryScaleTrait/#getscale","text":"return type ?int description No description available This documentation was generated with Roster .","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/InverseTrigonometrySelectionTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Trigonometry > InverseTrigonometrySelectionTrait No description available This documentation was generated with Roster .","title":"InverseTrigonometrySelectionTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/InverseTrigonometrySelectionTrait/#samsarafermattypestraitstrigonometry-inversetrigonometryselectiontrait","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Trigonometry &gt; InverseTrigonometrySelectionTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/TrigonometryNativeTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Trigonometry > TrigonometryNativeTrait No description available This documentation was generated with Roster .","title":"TrigonometryNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/TrigonometryNativeTrait/#samsarafermattypestraitstrigonometry-trigonometrynativetrait","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Trigonometry &gt; TrigonometryNativeTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/TrigonometryScaleTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Trigonometry > TrigonometryScaleTrait No description available This documentation was generated with Roster .","title":"TrigonometryScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/TrigonometryScaleTrait/#samsarafermattypestraitstrigonometry-trigonometryscaletrait","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Trigonometry &gt; TrigonometryScaleTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/TrigonometrySelectionTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Trigonometry > TrigonometrySelectionTrait No description available This documentation was generated with Roster .","title":"TrigonometrySelectionTrait"},{"location":"roster/latest/Fermat%20Core/Types/Traits/Trigonometry/TrigonometrySelectionTrait/#samsarafermattypestraitstrigonometry-trigonometryselectiontrait","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Types\\Traits\\Trigonometry &gt; TrigonometrySelectionTrait"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/","text":"Samsara\\Fermat\\Values > ImmutableDecimal No description available Inheritance Extends Samsara\\Fermat\\Types\\Decimal Implements SimpleNumberInterface SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available DecimalInterface DecimalInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable Stringable namespace description No description available NumberInterface NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. Variables & Data Class Constants ImmutableDecimal::INFINITY INFINITY value 'INF' ImmutableDecimal::NEG_INFINITY NEG_INFINITY value '-INF' Methods Constructor public Decimal->__construct($value, int|null $scale, NumberBase $base, bool $baseTenInput) __construct $value description No description available $scale type int|null description No description available $base type NumberBase description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available Instanced Methods public ImmutableDecimal->continuousModulo(NumberInterface|string|int|float $mod) continuousModulo $mod type NumberInterface|string|int|float description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available Inherited Methods public Decimal->modulo($mod) modulo $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase() getBase return type Samsara\\Fermat\\Enums\\NumberBase description No description available getBase() Description: Returns the current base that the value is in. public Decimal->getAsBaseTenRealNumber() getAsBaseTenRealNumber return type string description No description available public Decimal->getValue(NumberBase|null $base) getValue $base type NumberBase|null description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value) compare $value type NumberInterface|int|float|string description No description available return type int description No description available compare() Description: Returns the sort compare integer (-1, 0, 1) for the two numbers. public Decimal->setBase(NumberBase $base) setBase $base type NumberBase description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available setBase() Description: Converts the object to a different base. public Decimal->abs() abs return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available abs() Description: Returns the current object as the absolute value of itself. public Decimal->absValue() absValue return type string description No description available absValue() Description: Returns the string of the absolute value of the current object. public Decimal->isComplex() isComplex return type bool description No description available public Number->setMode(CalcMode $mode) setMode $mode type CalcMode description No description available return type self description No description available setMode() Description: Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->getMode() getMode return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag) setExtensions $flag type bool description No description available return type self description No description available setExtensions() Description: Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() __toString return type string description No description available public Number->hash() hash return type string description No description available hash() Description: Implemented to satisfy Hashable implementation public Number->equals(mixed $object) equals $object type mixed description No description available return type bool description No description available equals() Description: Implemented to satisfy Hashable implementation public Number->isImaginary() isImaginary return type bool description No description available isImaginary() Description: This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() isReal return type bool description No description available isReal() Description: This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() asReal return type string description No description available public Number->asComplex() asComplex return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Decimal->add($num) add $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->subtract($num) subtract $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->multiply($num) multiply $num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->divide($num, int|null $scale) divide $num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->pow($num) pow $num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Decimal->sqrt(int|null $scale) sqrt $scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Decimal->isEqual(NumberInterface|int|string|float $value) isEqual $value type NumberInterface|int|string|float description No description available return type bool description No description available public Decimal->getScale() getScale return type int description No description available public Decimal->isGreaterThan($value) isGreaterThan $value description No description available return type bool description No description available public Decimal->isLessThan($value) isLessThan $value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value) isGreaterThanOrEqualTo $value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value) isLessThanOrEqualTo $value description No description available return type bool description No description available public Decimal->isNegative() isNegative return type bool description No description available public Decimal->isPositive() isPositive return type bool description No description available public Decimal->isNatural() isNatural return type bool description No description available public Decimal->isWhole() isWhole return type bool description No description available public Decimal->isInt() isInt return type bool description No description available public Decimal->factorial() factorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial() subFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial() doubleFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial() semiFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num) getLeastCommonMultiple $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num) getGreatestCommonDivisor $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime(int|null $certainty) isPrime $certainty type int|null description The certainty level desired. False positive rate = 1 in 4^$certainty. return type bool description No description available isPrime() Description: This function is a PHP implementation of the Miller-Rabin primality test. The default \"certainty\" value of 20 results in a false-positive rate of 1 in 1.10 x 10^12. Presumably, the probability of your hardware failing while this code is running is higher, meaning this should be statistically as certain as a deterministic algorithm on normal computer hardware. public Decimal->getDivisors() getDivisors return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->asPrimeFactors() asPrimeFactors return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(int|null $scale, bool $round) sin $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(int|null $scale, bool $round) cos $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(int|null $scale, bool $round) tan $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(int|null $scale, bool $round) sec $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(int|null $scale, bool $round) csc $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(int|null $scale, bool $round) cot $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(int|null $scale, bool $round) sinh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(int|null $scale, bool $round) cosh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(int|null $scale, bool $round) tanh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(int|null $scale, bool $round) sech $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(int|null $scale, bool $round) csch $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(int|null $scale, bool $round) coth $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(int|null $scale, bool $round) arcsin $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(int|null $scale, bool $round) arccos $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(int|null $scale, bool $round) arctan $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(int|null $scale, bool $round) arcsec $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(int|null $scale, bool $round) arccsc $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(int|null $scale, bool $round) arccot $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, RoundingMode|null $mode) roundToScale $scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale) truncateToScale $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(int|null $scale, bool $round) exp $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round) ln $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round) log10 $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->expScale(int|null $scale) expScale $scale type int|null description No description available return type string description No description available public Decimal->lnScale(int|null $scale) lnScale $scale type int|null description The number of digits which should be accurate return type string description No description available public Decimal->log10Scale(int|null $scale) log10Scale $scale type int|null description No description available return type string description No description available public Decimal->round(int $decimals, RoundingMode|null $mode) round $decimals type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals) truncate $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil() ceil return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor() floor return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros() numberOfLeadingZeros return type int description No description available numberOfLeadingZeros() Description: The number of digits between the radix and the for non-zero digit in the decimal part. public Decimal->numberOfTotalDigits() numberOfTotalDigits return type int description No description available numberOfTotalDigits() Description: The number of digits (excludes the radix). public Decimal->numberOfIntDigits() numberOfIntDigits return type int description No description available numberOfIntDigits() Description: The number of digits in the integer part. public Decimal->numberOfDecimalDigits() numberOfDecimalDigits return type int description No description available numberOfDecimalDigits() Description: The number of digits in the decimal part. public Decimal->numberOfSigDecimalDigits() numberOfSigDecimalDigits return type int description No description available numberOfSigDecimalDigits() Description: The number of digits in the decimal part, excluding leading zeros. public Decimal->asInt() asInt return type int description No description available asInt() Description: Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public Decimal->isFloat() isFloat return type bool description No description available public Decimal->asFloat() asFloat return type float description No description available public Decimal->getDecimalPart() getDecimalPart return type string description No description available public Decimal->getWholePart() getWholePart return type string description No description available This documentation was generated with Roster .","title":"ImmutableDecimal"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#samsarafermatvalues-immutabledecimal","text":"No description available","title":"Samsara\\Fermat\\Values &gt; ImmutableDecimal"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#extends","text":"Samsara\\Fermat\\Types\\Decimal","title":"Extends"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#implements","text":"SimpleNumberInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#simplenumberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available DecimalInterface","title":"SimpleNumberInterface"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#decimalinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable","title":"DecimalInterface"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#stringable","text":"namespace description No description available NumberInterface","title":"Stringable"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#numberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable","title":"NumberInterface"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#hashable","text":"namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance.","title":"Hashable"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#class-constants","text":"ImmutableDecimal::INFINITY","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#infinity","text":"value 'INF' ImmutableDecimal::NEG_INFINITY","title":"INFINITY"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#neg_infinity","text":"value '-INF'","title":"NEG_INFINITY"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#constructor","text":"public Decimal->__construct($value, int|null $scale, NumberBase $base, bool $baseTenInput)","title":"Constructor"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#__construct","text":"$value description No description available $scale type int|null description No description available $base type NumberBase description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#instanced-methods","text":"public ImmutableDecimal->continuousModulo(NumberInterface|string|int|float $mod)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#continuousmodulo","text":"$mod type NumberInterface|string|int|float description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available","title":"continuousModulo"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#inherited-methods","text":"public Decimal->modulo($mod)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#modulo","text":"$mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase()","title":"modulo"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#getbase","text":"return type Samsara\\Fermat\\Enums\\NumberBase description No description available","title":"getBase"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#getasbasetenrealnumber","text":"return type string description No description available public Decimal->getValue(NumberBase|null $base)","title":"getAsBaseTenRealNumber"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#getvalue","text":"$base type NumberBase|null description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value)","title":"getValue"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#compare","text":"$value type NumberInterface|int|float|string description No description available return type int description No description available","title":"compare"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#setbase","text":"$base type NumberBase description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available","title":"setBase"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#abs","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available","title":"abs"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#absvalue","text":"return type string description No description available","title":"absValue"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#iscomplex","text":"return type bool description No description available public Number->setMode(CalcMode $mode)","title":"isComplex"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#setmode","text":"$mode type CalcMode description No description available return type self description No description available","title":"setMode"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#getmode","text":"return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag)","title":"getMode"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#setextensions","text":"$flag type bool description No description available return type self description No description available","title":"setExtensions"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#__tostring","text":"return type string description No description available public Number->hash()","title":"__toString"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#hash","text":"return type string description No description available","title":"hash"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#equals","text":"$object type mixed description No description available return type bool description No description available","title":"equals"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#isimaginary","text":"return type bool description No description available","title":"isImaginary"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#isreal","text":"return type bool description No description available","title":"isReal"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#asreal","text":"return type string description No description available public Number->asComplex()","title":"asReal"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#ascomplex","text":"return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Decimal->add($num)","title":"asComplex"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#add","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#subtract","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#multiply","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#divide","text":"$num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#pow","text":"$num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Decimal->sqrt(int|null $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#sqrt","text":"$scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Decimal->isEqual(NumberInterface|int|string|float $value)","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#isequal","text":"$value type NumberInterface|int|string|float description No description available return type bool description No description available public Decimal->getScale()","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#getscale","text":"return type int description No description available public Decimal->isGreaterThan($value)","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#isgreaterthan","text":"$value description No description available return type bool description No description available public Decimal->isLessThan($value)","title":"isGreaterThan"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#islessthan","text":"$value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value)","title":"isLessThan"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#isgreaterthanorequalto","text":"$value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value)","title":"isGreaterThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#islessthanorequalto","text":"$value description No description available return type bool description No description available public Decimal->isNegative()","title":"isLessThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#isnegative","text":"return type bool description No description available public Decimal->isPositive()","title":"isNegative"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#ispositive","text":"return type bool description No description available public Decimal->isNatural()","title":"isPositive"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#isnatural","text":"return type bool description No description available public Decimal->isWhole()","title":"isNatural"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#iswhole","text":"return type bool description No description available public Decimal->isInt()","title":"isWhole"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#isint","text":"return type bool description No description available public Decimal->factorial()","title":"isInt"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#factorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial()","title":"factorial"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#subfactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial()","title":"subFactorial"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#doublefactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial()","title":"doubleFactorial"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#semifactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num)","title":"semiFactorial"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#getleastcommonmultiple","text":"$num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num)","title":"getLeastCommonMultiple"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#getgreatestcommondivisor","text":"$num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime(int|null $certainty)","title":"getGreatestCommonDivisor"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#isprime","text":"$certainty type int|null description The certainty level desired. False positive rate = 1 in 4^$certainty. return type bool description No description available","title":"isPrime"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#getdivisors","text":"return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->asPrimeFactors()","title":"getDivisors"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#asprimefactors","text":"return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(int|null $scale, bool $round)","title":"asPrimeFactors"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#sin","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(int|null $scale, bool $round)","title":"sin"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#cos","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(int|null $scale, bool $round)","title":"cos"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#tan","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(int|null $scale, bool $round)","title":"tan"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#sec","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(int|null $scale, bool $round)","title":"sec"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#csc","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(int|null $scale, bool $round)","title":"csc"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#cot","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(int|null $scale, bool $round)","title":"cot"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#sinh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(int|null $scale, bool $round)","title":"sinh"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#cosh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(int|null $scale, bool $round)","title":"cosh"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#tanh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(int|null $scale, bool $round)","title":"tanh"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#sech","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(int|null $scale, bool $round)","title":"sech"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#csch","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(int|null $scale, bool $round)","title":"csch"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#coth","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(int|null $scale, bool $round)","title":"coth"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#arcsin","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(int|null $scale, bool $round)","title":"arcsin"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#arccos","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(int|null $scale, bool $round)","title":"arccos"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#arctan","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(int|null $scale, bool $round)","title":"arctan"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#arcsec","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(int|null $scale, bool $round)","title":"arcsec"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#arccsc","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(int|null $scale, bool $round)","title":"arccsc"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#arccot","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, RoundingMode|null $mode)","title":"arccot"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#roundtoscale","text":"$scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale)","title":"roundToScale"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#truncatetoscale","text":"$scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(int|null $scale, bool $round)","title":"truncateToScale"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#exp","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round)","title":"exp"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#ln","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round)","title":"ln"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#log10","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->expScale(int|null $scale)","title":"log10"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#expscale","text":"$scale type int|null description No description available return type string description No description available public Decimal->lnScale(int|null $scale)","title":"expScale"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#lnscale","text":"$scale type int|null description The number of digits which should be accurate return type string description No description available public Decimal->log10Scale(int|null $scale)","title":"lnScale"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#log10scale","text":"$scale type int|null description No description available return type string description No description available public Decimal->round(int $decimals, RoundingMode|null $mode)","title":"log10Scale"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#round","text":"$decimals type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals)","title":"round"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#truncate","text":"$decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil()","title":"truncate"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#ceil","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor()","title":"ceil"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#floor","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros()","title":"floor"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#numberofleadingzeros","text":"return type int description No description available","title":"numberOfLeadingZeros"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#numberoftotaldigits","text":"return type int description No description available","title":"numberOfTotalDigits"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#numberofintdigits","text":"return type int description No description available","title":"numberOfIntDigits"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#numberofdecimaldigits","text":"return type int description No description available","title":"numberOfDecimalDigits"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#numberofsigdecimaldigits","text":"return type int description No description available","title":"numberOfSigDecimalDigits"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#asint","text":"return type int description No description available","title":"asInt"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#isfloat","text":"return type bool description No description available public Decimal->asFloat()","title":"isFloat"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#asfloat","text":"return type float description No description available public Decimal->getDecimalPart()","title":"asFloat"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#getdecimalpart","text":"return type string description No description available public Decimal->getWholePart()","title":"getDecimalPart"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableDecimal/#getwholepart","text":"return type string description No description available This documentation was generated with Roster .","title":"getWholePart"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/","text":"Samsara\\Fermat\\Values > ImmutableFraction No description available Inheritance Extends Samsara\\Fermat\\Types\\Fraction Implements SimpleNumberInterface SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available FractionInterface FractionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable Stringable namespace description No description available NumberInterface NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. Variables & Data Class Constants ImmutableFraction::INFINITY INFINITY value 'INF' ImmutableFraction::NEG_INFINITY NEG_INFINITY value '-INF' Methods Constructor public Fraction->__construct($numerator, $denominator, NumberBase $base) __construct $numerator description No description available $denominator description No description available $base type NumberBase description return type mixed (assumed) description No description available __construct() Description: Fraction constructor. Inherited Methods public Fraction->getValue() getValue return type string description No description available public Fraction->getScale() getScale return type ?int description No description available public Fraction->getNumerator() getNumerator return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->getDenominator() getDenominator return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->isComplex() isComplex return type bool description No description available public Fraction->simplify() simplify return type FractionInterface|Fraction description No description available public Fraction->abs() abs return type $this|Base\\Interfaces\\Numbers\\DecimalInterface|FractionInterface|NumberInterface|Fraction description No description available public Fraction->absValue() absValue return type string description No description available public Fraction->compare($value) compare $value description No description available return type int description No description available public Fraction->asDecimal($scale) asDecimal $scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor() getGreatestCommonDivisor return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(FractionInterface $fraction) getSmallestCommonDenominator $fraction type FractionInterface description No description available return type NumberInterface description No description available public Fraction->getAsBaseTenRealNumber() getAsBaseTenRealNumber return type string description No description available public Number->setMode(CalcMode $mode) setMode $mode type CalcMode description No description available return type self description No description available setMode() Description: Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->getMode() getMode return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag) setExtensions $flag type bool description No description available return type self description No description available setExtensions() Description: Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() __toString return type string description No description available public Number->hash() hash return type string description No description available hash() Description: Implemented to satisfy Hashable implementation public Number->equals(mixed $object) equals $object type mixed description No description available return type bool description No description available equals() Description: Implemented to satisfy Hashable implementation public Number->isImaginary() isImaginary return type bool description No description available isImaginary() Description: This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() isReal return type bool description No description available isReal() Description: This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() asReal return type string description No description available public Number->asComplex() asComplex return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Number->getBase() getBase return type Samsara\\Fermat\\Enums\\NumberBase description No description available public Fraction->add($num) add $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->subtract($num) subtract $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->multiply($num) multiply $num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->divide($num, int|null $scale) divide $num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->pow($num) pow $num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Fraction->sqrt(int|null $scale) sqrt $scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Fraction->isEqual(NumberInterface|int|string|float $value) isEqual $value type NumberInterface|int|string|float description No description available return type bool description No description available public Fraction->isGreaterThan($value) isGreaterThan $value description No description available return type bool description No description available public Fraction->isLessThan($value) isLessThan $value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value) isGreaterThanOrEqualTo $value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value) isLessThanOrEqualTo $value description No description available return type bool description No description available public Fraction->isNegative() isNegative return type bool description No description available public Fraction->isPositive() isPositive return type bool description No description available public Fraction->isNatural() isNatural return type bool description No description available public Fraction->isWhole() isWhole return type bool description No description available public Fraction->isInt() isInt return type bool description No description available This documentation was generated with Roster .","title":"ImmutableFraction"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#samsarafermatvalues-immutablefraction","text":"No description available","title":"Samsara\\Fermat\\Values &gt; ImmutableFraction"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#extends","text":"Samsara\\Fermat\\Types\\Fraction","title":"Extends"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#implements","text":"SimpleNumberInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#simplenumberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available FractionInterface","title":"SimpleNumberInterface"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#fractioninterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable","title":"FractionInterface"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#stringable","text":"namespace description No description available NumberInterface","title":"Stringable"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#numberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable","title":"NumberInterface"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#hashable","text":"namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance.","title":"Hashable"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#class-constants","text":"ImmutableFraction::INFINITY","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#infinity","text":"value 'INF' ImmutableFraction::NEG_INFINITY","title":"INFINITY"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#neg_infinity","text":"value '-INF'","title":"NEG_INFINITY"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#constructor","text":"public Fraction->__construct($numerator, $denominator, NumberBase $base)","title":"Constructor"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#__construct","text":"$numerator description No description available $denominator description No description available $base type NumberBase description return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#inherited-methods","text":"public Fraction->getValue()","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#getvalue","text":"return type string description No description available public Fraction->getScale()","title":"getValue"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#getscale","text":"return type ?int description No description available public Fraction->getNumerator()","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#getnumerator","text":"return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->getDenominator()","title":"getNumerator"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#getdenominator","text":"return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->isComplex()","title":"getDenominator"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#iscomplex","text":"return type bool description No description available public Fraction->simplify()","title":"isComplex"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#simplify","text":"return type FractionInterface|Fraction description No description available public Fraction->abs()","title":"simplify"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#abs","text":"return type $this|Base\\Interfaces\\Numbers\\DecimalInterface|FractionInterface|NumberInterface|Fraction description No description available public Fraction->absValue()","title":"abs"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#absvalue","text":"return type string description No description available public Fraction->compare($value)","title":"absValue"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#compare","text":"$value description No description available return type int description No description available public Fraction->asDecimal($scale)","title":"compare"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#asdecimal","text":"$scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor()","title":"asDecimal"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#getgreatestcommondivisor","text":"return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(FractionInterface $fraction)","title":"getGreatestCommonDivisor"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#getsmallestcommondenominator","text":"$fraction type FractionInterface description No description available return type NumberInterface description No description available public Fraction->getAsBaseTenRealNumber()","title":"getSmallestCommonDenominator"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#getasbasetenrealnumber","text":"return type string description No description available public Number->setMode(CalcMode $mode)","title":"getAsBaseTenRealNumber"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#setmode","text":"$mode type CalcMode description No description available return type self description No description available","title":"setMode"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#getmode","text":"return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag)","title":"getMode"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#setextensions","text":"$flag type bool description No description available return type self description No description available","title":"setExtensions"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#__tostring","text":"return type string description No description available public Number->hash()","title":"__toString"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#hash","text":"return type string description No description available","title":"hash"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#equals","text":"$object type mixed description No description available return type bool description No description available","title":"equals"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#isimaginary","text":"return type bool description No description available","title":"isImaginary"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#isreal","text":"return type bool description No description available","title":"isReal"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#asreal","text":"return type string description No description available public Number->asComplex()","title":"asReal"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#ascomplex","text":"return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Number->getBase()","title":"asComplex"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#getbase","text":"return type Samsara\\Fermat\\Enums\\NumberBase description No description available public Fraction->add($num)","title":"getBase"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#add","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#subtract","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#multiply","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#divide","text":"$num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#pow","text":"$num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Fraction->sqrt(int|null $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#sqrt","text":"$scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Fraction->isEqual(NumberInterface|int|string|float $value)","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#isequal","text":"$value type NumberInterface|int|string|float description No description available return type bool description No description available public Fraction->isGreaterThan($value)","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#isgreaterthan","text":"$value description No description available return type bool description No description available public Fraction->isLessThan($value)","title":"isGreaterThan"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#islessthan","text":"$value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value)","title":"isLessThan"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#isgreaterthanorequalto","text":"$value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value)","title":"isGreaterThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#islessthanorequalto","text":"$value description No description available return type bool description No description available public Fraction->isNegative()","title":"isLessThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#isnegative","text":"return type bool description No description available public Fraction->isPositive()","title":"isNegative"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#ispositive","text":"return type bool description No description available public Fraction->isNatural()","title":"isPositive"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#isnatural","text":"return type bool description No description available public Fraction->isWhole()","title":"isNatural"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#iswhole","text":"return type bool description No description available public Fraction->isInt()","title":"isWhole"},{"location":"roster/latest/Fermat%20Core/Values/ImmutableFraction/#isint","text":"return type bool description No description available This documentation was generated with Roster .","title":"isInt"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/","text":"Samsara\\Fermat\\Values > MutableDecimal No description available Inheritance Extends Samsara\\Fermat\\Types\\Decimal Implements SimpleNumberInterface SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available DecimalInterface DecimalInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable Stringable namespace description No description available NumberInterface NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. Variables & Data Class Constants MutableDecimal::INFINITY INFINITY value 'INF' MutableDecimal::NEG_INFINITY NEG_INFINITY value '-INF' Methods Constructor public Decimal->__construct($value, int|null $scale, NumberBase $base, bool $baseTenInput) __construct $value description No description available $scale type int|null description No description available $base type NumberBase description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available Instanced Methods public MutableDecimal->continuousModulo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|string|int|float $mod) continuousModulo $mod type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|string|int|float description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available Inherited Methods public Decimal->modulo($mod) modulo $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase() getBase return type Samsara\\Fermat\\Enums\\NumberBase description No description available getBase() Description: Returns the current base that the value is in. public Decimal->getAsBaseTenRealNumber() getAsBaseTenRealNumber return type string description No description available public Decimal->getValue(NumberBase|null $base) getValue $base type NumberBase|null description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value) compare $value type NumberInterface|int|float|string description No description available return type int description No description available compare() Description: Returns the sort compare integer (-1, 0, 1) for the two numbers. public Decimal->setBase(NumberBase $base) setBase $base type NumberBase description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available setBase() Description: Converts the object to a different base. public Decimal->abs() abs return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available abs() Description: Returns the current object as the absolute value of itself. public Decimal->absValue() absValue return type string description No description available absValue() Description: Returns the string of the absolute value of the current object. public Decimal->isComplex() isComplex return type bool description No description available public Number->setMode(CalcMode $mode) setMode $mode type CalcMode description No description available return type self description No description available setMode() Description: Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->getMode() getMode return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag) setExtensions $flag type bool description No description available return type self description No description available setExtensions() Description: Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() __toString return type string description No description available public Number->hash() hash return type string description No description available hash() Description: Implemented to satisfy Hashable implementation public Number->equals(mixed $object) equals $object type mixed description No description available return type bool description No description available equals() Description: Implemented to satisfy Hashable implementation public Number->isImaginary() isImaginary return type bool description No description available isImaginary() Description: This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() isReal return type bool description No description available isReal() Description: This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() asReal return type string description No description available public Number->asComplex() asComplex return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Decimal->add($num) add $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->subtract($num) subtract $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->multiply($num) multiply $num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->divide($num, int|null $scale) divide $num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->pow($num) pow $num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Decimal->sqrt(int|null $scale) sqrt $scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Decimal->isEqual(NumberInterface|int|string|float $value) isEqual $value type NumberInterface|int|string|float description No description available return type bool description No description available public Decimal->getScale() getScale return type int description No description available public Decimal->isGreaterThan($value) isGreaterThan $value description No description available return type bool description No description available public Decimal->isLessThan($value) isLessThan $value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value) isGreaterThanOrEqualTo $value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value) isLessThanOrEqualTo $value description No description available return type bool description No description available public Decimal->isNegative() isNegative return type bool description No description available public Decimal->isPositive() isPositive return type bool description No description available public Decimal->isNatural() isNatural return type bool description No description available public Decimal->isWhole() isWhole return type bool description No description available public Decimal->isInt() isInt return type bool description No description available public Decimal->factorial() factorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial() subFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial() doubleFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial() semiFactorial return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num) getLeastCommonMultiple $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num) getGreatestCommonDivisor $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime(int|null $certainty) isPrime $certainty type int|null description The certainty level desired. False positive rate = 1 in 4^$certainty. return type bool description No description available isPrime() Description: This function is a PHP implementation of the Miller-Rabin primality test. The default \"certainty\" value of 20 results in a false-positive rate of 1 in 1.10 x 10^12. Presumably, the probability of your hardware failing while this code is running is higher, meaning this should be statistically as certain as a deterministic algorithm on normal computer hardware. public Decimal->getDivisors() getDivisors return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->asPrimeFactors() asPrimeFactors return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(int|null $scale, bool $round) sin $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(int|null $scale, bool $round) cos $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(int|null $scale, bool $round) tan $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(int|null $scale, bool $round) sec $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(int|null $scale, bool $round) csc $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(int|null $scale, bool $round) cot $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(int|null $scale, bool $round) sinh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(int|null $scale, bool $round) cosh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(int|null $scale, bool $round) tanh $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(int|null $scale, bool $round) sech $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(int|null $scale, bool $round) csch $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(int|null $scale, bool $round) coth $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(int|null $scale, bool $round) arcsin $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(int|null $scale, bool $round) arccos $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(int|null $scale, bool $round) arctan $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(int|null $scale, bool $round) arcsec $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(int|null $scale, bool $round) arccsc $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(int|null $scale, bool $round) arccot $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, RoundingMode|null $mode) roundToScale $scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale) truncateToScale $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(int|null $scale, bool $round) exp $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round) ln $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round) log10 $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->expScale(int|null $scale) expScale $scale type int|null description No description available return type string description No description available public Decimal->lnScale(int|null $scale) lnScale $scale type int|null description The number of digits which should be accurate return type string description No description available public Decimal->log10Scale(int|null $scale) log10Scale $scale type int|null description No description available return type string description No description available public Decimal->round(int $decimals, RoundingMode|null $mode) round $decimals type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals) truncate $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil() ceil return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor() floor return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros() numberOfLeadingZeros return type int description No description available numberOfLeadingZeros() Description: The number of digits between the radix and the for non-zero digit in the decimal part. public Decimal->numberOfTotalDigits() numberOfTotalDigits return type int description No description available numberOfTotalDigits() Description: The number of digits (excludes the radix). public Decimal->numberOfIntDigits() numberOfIntDigits return type int description No description available numberOfIntDigits() Description: The number of digits in the integer part. public Decimal->numberOfDecimalDigits() numberOfDecimalDigits return type int description No description available numberOfDecimalDigits() Description: The number of digits in the decimal part. public Decimal->numberOfSigDecimalDigits() numberOfSigDecimalDigits return type int description No description available numberOfSigDecimalDigits() Description: The number of digits in the decimal part, excluding leading zeros. public Decimal->asInt() asInt return type int description No description available asInt() Description: Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public Decimal->isFloat() isFloat return type bool description No description available public Decimal->asFloat() asFloat return type float description No description available public Decimal->getDecimalPart() getDecimalPart return type string description No description available public Decimal->getWholePart() getWholePart return type string description No description available This documentation was generated with Roster .","title":"MutableDecimal"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#samsarafermatvalues-mutabledecimal","text":"No description available","title":"Samsara\\Fermat\\Values &gt; MutableDecimal"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#extends","text":"Samsara\\Fermat\\Types\\Decimal","title":"Extends"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#implements","text":"SimpleNumberInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#simplenumberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available DecimalInterface","title":"SimpleNumberInterface"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#decimalinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable","title":"DecimalInterface"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#stringable","text":"namespace description No description available NumberInterface","title":"Stringable"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#numberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable","title":"NumberInterface"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#hashable","text":"namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance.","title":"Hashable"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#class-constants","text":"MutableDecimal::INFINITY","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#infinity","text":"value 'INF' MutableDecimal::NEG_INFINITY","title":"INFINITY"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#neg_infinity","text":"value '-INF'","title":"NEG_INFINITY"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#constructor","text":"public Decimal->__construct($value, int|null $scale, NumberBase $base, bool $baseTenInput)","title":"Constructor"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#__construct","text":"$value description No description available $scale type int|null description No description available $base type NumberBase description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#instanced-methods","text":"public MutableDecimal->continuousModulo(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|string|int|float $mod)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#continuousmodulo","text":"$mod type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|string|int|float description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available","title":"continuousModulo"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#inherited-methods","text":"public Decimal->modulo($mod)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#modulo","text":"$mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase()","title":"modulo"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#getbase","text":"return type Samsara\\Fermat\\Enums\\NumberBase description No description available","title":"getBase"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#getasbasetenrealnumber","text":"return type string description No description available public Decimal->getValue(NumberBase|null $base)","title":"getAsBaseTenRealNumber"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#getvalue","text":"$base type NumberBase|null description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value)","title":"getValue"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#compare","text":"$value type NumberInterface|int|float|string description No description available return type int description No description available","title":"compare"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#setbase","text":"$base type NumberBase description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available","title":"setBase"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#abs","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface|Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available","title":"abs"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#absvalue","text":"return type string description No description available","title":"absValue"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#iscomplex","text":"return type bool description No description available public Number->setMode(CalcMode $mode)","title":"isComplex"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#setmode","text":"$mode type CalcMode description No description available return type self description No description available","title":"setMode"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#getmode","text":"return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag)","title":"getMode"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#setextensions","text":"$flag type bool description No description available return type self description No description available","title":"setExtensions"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#__tostring","text":"return type string description No description available public Number->hash()","title":"__toString"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#hash","text":"return type string description No description available","title":"hash"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#equals","text":"$object type mixed description No description available return type bool description No description available","title":"equals"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#isimaginary","text":"return type bool description No description available","title":"isImaginary"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#isreal","text":"return type bool description No description available","title":"isReal"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#asreal","text":"return type string description No description available public Number->asComplex()","title":"asReal"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#ascomplex","text":"return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Decimal->add($num)","title":"asComplex"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#add","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#subtract","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Decimal->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#multiply","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#divide","text":"$num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Decimal->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#pow","text":"$num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Decimal->sqrt(int|null $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#sqrt","text":"$scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Decimal->isEqual(NumberInterface|int|string|float $value)","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#isequal","text":"$value type NumberInterface|int|string|float description No description available return type bool description No description available public Decimal->getScale()","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#getscale","text":"return type int description No description available public Decimal->isGreaterThan($value)","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#isgreaterthan","text":"$value description No description available return type bool description No description available public Decimal->isLessThan($value)","title":"isGreaterThan"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#islessthan","text":"$value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value)","title":"isLessThan"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#isgreaterthanorequalto","text":"$value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value)","title":"isGreaterThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#islessthanorequalto","text":"$value description No description available return type bool description No description available public Decimal->isNegative()","title":"isLessThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#isnegative","text":"return type bool description No description available public Decimal->isPositive()","title":"isNegative"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#ispositive","text":"return type bool description No description available public Decimal->isNatural()","title":"isPositive"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#isnatural","text":"return type bool description No description available public Decimal->isWhole()","title":"isNatural"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#iswhole","text":"return type bool description No description available public Decimal->isInt()","title":"isWhole"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#isint","text":"return type bool description No description available public Decimal->factorial()","title":"isInt"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#factorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial()","title":"factorial"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#subfactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial()","title":"subFactorial"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#doublefactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial()","title":"doubleFactorial"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#semifactorial","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num)","title":"semiFactorial"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#getleastcommonmultiple","text":"$num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num)","title":"getLeastCommonMultiple"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#getgreatestcommondivisor","text":"$num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime(int|null $certainty)","title":"getGreatestCommonDivisor"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#isprime","text":"$certainty type int|null description The certainty level desired. False positive rate = 1 in 4^$certainty. return type bool description No description available","title":"isPrime"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#getdivisors","text":"return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->asPrimeFactors()","title":"getDivisors"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#asprimefactors","text":"return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(int|null $scale, bool $round)","title":"asPrimeFactors"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#sin","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(int|null $scale, bool $round)","title":"sin"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#cos","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(int|null $scale, bool $round)","title":"cos"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#tan","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(int|null $scale, bool $round)","title":"tan"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#sec","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(int|null $scale, bool $round)","title":"sec"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#csc","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(int|null $scale, bool $round)","title":"csc"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#cot","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(int|null $scale, bool $round)","title":"cot"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#sinh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(int|null $scale, bool $round)","title":"sinh"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#cosh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(int|null $scale, bool $round)","title":"cosh"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#tanh","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(int|null $scale, bool $round)","title":"tanh"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#sech","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(int|null $scale, bool $round)","title":"sech"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#csch","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(int|null $scale, bool $round)","title":"csch"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#coth","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(int|null $scale, bool $round)","title":"coth"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#arcsin","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(int|null $scale, bool $round)","title":"arcsin"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#arccos","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(int|null $scale, bool $round)","title":"arccos"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#arctan","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(int|null $scale, bool $round)","title":"arctan"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#arcsec","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(int|null $scale, bool $round)","title":"arcsec"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#arccsc","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(int|null $scale, bool $round)","title":"arccsc"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#arccot","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, RoundingMode|null $mode)","title":"arccot"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#roundtoscale","text":"$scale type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale)","title":"roundToScale"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#truncatetoscale","text":"$scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(int|null $scale, bool $round)","title":"truncateToScale"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#exp","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round)","title":"exp"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#ln","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round)","title":"ln"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#log10","text":"$scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->expScale(int|null $scale)","title":"log10"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#expscale","text":"$scale type int|null description No description available return type string description No description available public Decimal->lnScale(int|null $scale)","title":"expScale"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#lnscale","text":"$scale type int|null description The number of digits which should be accurate return type string description No description available public Decimal->log10Scale(int|null $scale)","title":"lnScale"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#log10scale","text":"$scale type int|null description No description available return type string description No description available public Decimal->round(int $decimals, RoundingMode|null $mode)","title":"log10Scale"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#round","text":"$decimals type int description No description available $mode type RoundingMode|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals)","title":"round"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#truncate","text":"$decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil()","title":"truncate"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#ceil","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor()","title":"ceil"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#floor","text":"return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros()","title":"floor"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#numberofleadingzeros","text":"return type int description No description available","title":"numberOfLeadingZeros"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#numberoftotaldigits","text":"return type int description No description available","title":"numberOfTotalDigits"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#numberofintdigits","text":"return type int description No description available","title":"numberOfIntDigits"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#numberofdecimaldigits","text":"return type int description No description available","title":"numberOfDecimalDigits"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#numberofsigdecimaldigits","text":"return type int description No description available","title":"numberOfSigDecimalDigits"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#asint","text":"return type int description No description available","title":"asInt"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#isfloat","text":"return type bool description No description available public Decimal->asFloat()","title":"isFloat"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#asfloat","text":"return type float description No description available public Decimal->getDecimalPart()","title":"asFloat"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#getdecimalpart","text":"return type string description No description available public Decimal->getWholePart()","title":"getDecimalPart"},{"location":"roster/latest/Fermat%20Core/Values/MutableDecimal/#getwholepart","text":"return type string description No description available This documentation was generated with Roster .","title":"getWholePart"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/","text":"Samsara\\Fermat\\Values > MutableFraction No description available Inheritance Extends Samsara\\Fermat\\Types\\Fraction Implements SimpleNumberInterface SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available FractionInterface FractionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable Stringable namespace description No description available NumberInterface NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. Variables & Data Class Constants MutableFraction::INFINITY INFINITY value 'INF' MutableFraction::NEG_INFINITY NEG_INFINITY value '-INF' Methods Constructor public Fraction->__construct($numerator, $denominator, NumberBase $base) __construct $numerator description No description available $denominator description No description available $base type NumberBase description return type mixed (assumed) description No description available __construct() Description: Fraction constructor. Inherited Methods public Fraction->getValue() getValue return type string description No description available public Fraction->getScale() getScale return type ?int description No description available public Fraction->getNumerator() getNumerator return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->getDenominator() getDenominator return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->isComplex() isComplex return type bool description No description available public Fraction->simplify() simplify return type FractionInterface|Fraction description No description available public Fraction->abs() abs return type $this|Base\\Interfaces\\Numbers\\DecimalInterface|FractionInterface|NumberInterface|Fraction description No description available public Fraction->absValue() absValue return type string description No description available public Fraction->compare($value) compare $value description No description available return type int description No description available public Fraction->asDecimal($scale) asDecimal $scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor() getGreatestCommonDivisor return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(FractionInterface $fraction) getSmallestCommonDenominator $fraction type FractionInterface description No description available return type NumberInterface description No description available public Fraction->getAsBaseTenRealNumber() getAsBaseTenRealNumber return type string description No description available public Number->setMode(CalcMode $mode) setMode $mode type CalcMode description No description available return type self description No description available setMode() Description: Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->getMode() getMode return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag) setExtensions $flag type bool description No description available return type self description No description available setExtensions() Description: Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() __toString return type string description No description available public Number->hash() hash return type string description No description available hash() Description: Implemented to satisfy Hashable implementation public Number->equals(mixed $object) equals $object type mixed description No description available return type bool description No description available equals() Description: Implemented to satisfy Hashable implementation public Number->isImaginary() isImaginary return type bool description No description available isImaginary() Description: This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() isReal return type bool description No description available isReal() Description: This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() asReal return type string description No description available public Number->asComplex() asComplex return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Number->getBase() getBase return type Samsara\\Fermat\\Enums\\NumberBase description No description available public Fraction->add($num) add $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->subtract($num) subtract $num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->multiply($num) multiply $num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->divide($num, int|null $scale) divide $num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->pow($num) pow $num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Fraction->sqrt(int|null $scale) sqrt $scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Fraction->isEqual(NumberInterface|int|string|float $value) isEqual $value type NumberInterface|int|string|float description No description available return type bool description No description available public Fraction->isGreaterThan($value) isGreaterThan $value description No description available return type bool description No description available public Fraction->isLessThan($value) isLessThan $value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value) isGreaterThanOrEqualTo $value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value) isLessThanOrEqualTo $value description No description available return type bool description No description available public Fraction->isNegative() isNegative return type bool description No description available public Fraction->isPositive() isPositive return type bool description No description available public Fraction->isNatural() isNatural return type bool description No description available public Fraction->isWhole() isWhole return type bool description No description available public Fraction->isInt() isInt return type bool description No description available This documentation was generated with Roster .","title":"MutableFraction"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#samsarafermatvalues-mutablefraction","text":"No description available","title":"Samsara\\Fermat\\Values &gt; MutableFraction"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#extends","text":"Samsara\\Fermat\\Types\\Fraction","title":"Extends"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#implements","text":"SimpleNumberInterface","title":"Implements"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#simplenumberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available FractionInterface","title":"SimpleNumberInterface"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#fractioninterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable","title":"FractionInterface"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#stringable","text":"namespace description No description available NumberInterface","title":"Stringable"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#numberinterface","text":"namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable","title":"NumberInterface"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#hashable","text":"namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance.","title":"Hashable"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#class-constants","text":"MutableFraction::INFINITY","title":"Class Constants"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#infinity","text":"value 'INF' MutableFraction::NEG_INFINITY","title":"INFINITY"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#neg_infinity","text":"value '-INF'","title":"NEG_INFINITY"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#constructor","text":"public Fraction->__construct($numerator, $denominator, NumberBase $base)","title":"Constructor"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#__construct","text":"$numerator description No description available $denominator description No description available $base type NumberBase description return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#inherited-methods","text":"public Fraction->getValue()","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#getvalue","text":"return type string description No description available public Fraction->getScale()","title":"getValue"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#getscale","text":"return type ?int description No description available public Fraction->getNumerator()","title":"getScale"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#getnumerator","text":"return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->getDenominator()","title":"getNumerator"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#getdenominator","text":"return type mixed|DecimalInterface|ImmutableDecimal description No description available public Fraction->isComplex()","title":"getDenominator"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#iscomplex","text":"return type bool description No description available public Fraction->simplify()","title":"isComplex"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#simplify","text":"return type FractionInterface|Fraction description No description available public Fraction->abs()","title":"simplify"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#abs","text":"return type $this|Base\\Interfaces\\Numbers\\DecimalInterface|FractionInterface|NumberInterface|Fraction description No description available public Fraction->absValue()","title":"abs"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#absvalue","text":"return type string description No description available public Fraction->compare($value)","title":"absValue"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#compare","text":"$value description No description available return type int description No description available public Fraction->asDecimal($scale)","title":"compare"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#asdecimal","text":"$scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor()","title":"asDecimal"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#getgreatestcommondivisor","text":"return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(FractionInterface $fraction)","title":"getGreatestCommonDivisor"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#getsmallestcommondenominator","text":"$fraction type FractionInterface description No description available return type NumberInterface description No description available public Fraction->getAsBaseTenRealNumber()","title":"getSmallestCommonDenominator"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#getasbasetenrealnumber","text":"return type string description No description available public Number->setMode(CalcMode $mode)","title":"getAsBaseTenRealNumber"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#setmode","text":"$mode type CalcMode description No description available return type self description No description available","title":"setMode"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#getmode","text":"return type Samsara\\Fermat\\Enums\\CalcMode description No description available public Number->setExtensions(bool $flag)","title":"getMode"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#setextensions","text":"$flag type bool description No description available return type self description No description available","title":"setExtensions"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#__tostring","text":"return type string description No description available public Number->hash()","title":"__toString"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#hash","text":"return type string description No description available","title":"hash"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#equals","text":"$object type mixed description No description available return type bool description No description available","title":"equals"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#isimaginary","text":"return type bool description No description available","title":"isImaginary"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#isreal","text":"return type bool description No description available","title":"isReal"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#asreal","text":"return type string description No description available public Number->asComplex()","title":"asReal"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#ascomplex","text":"return type Samsara\\Fermat\\Values\\ImmutableComplexNumber description No description available public Number->getBase()","title":"asComplex"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#getbase","text":"return type Samsara\\Fermat\\Enums\\NumberBase description No description available public Fraction->add($num)","title":"getBase"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#add","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->subtract($num)","title":"add"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#subtract","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableComplexNumber|ImmutableDecimal|MutableDecimal description No description available public Fraction->multiply($num)","title":"subtract"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#multiply","text":"$num description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->divide($num, int|null $scale)","title":"multiply"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#divide","text":"$num description No description available $scale type int|null description No description available return type $this|DecimalInterface|Fraction|ImmutableDecimal|MutableDecimal description No description available public Fraction->pow($num)","title":"divide"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#pow","text":"$num description No description available return type DecimalInterface|Fraction|ImmutableComplexNumber description No description available public Fraction->sqrt(int|null $scale)","title":"pow"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#sqrt","text":"$scale type int|null description No description available return type DecimalInterface|Fraction description No description available public Fraction->isEqual(NumberInterface|int|string|float $value)","title":"sqrt"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#isequal","text":"$value type NumberInterface|int|string|float description No description available return type bool description No description available public Fraction->isGreaterThan($value)","title":"isEqual"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#isgreaterthan","text":"$value description No description available return type bool description No description available public Fraction->isLessThan($value)","title":"isGreaterThan"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#islessthan","text":"$value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value)","title":"isLessThan"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#isgreaterthanorequalto","text":"$value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value)","title":"isGreaterThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#islessthanorequalto","text":"$value description No description available return type bool description No description available public Fraction->isNegative()","title":"isLessThanOrEqualTo"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#isnegative","text":"return type bool description No description available public Fraction->isPositive()","title":"isNegative"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#ispositive","text":"return type bool description No description available public Fraction->isNatural()","title":"isPositive"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#isnatural","text":"return type bool description No description available public Fraction->isWhole()","title":"isNatural"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#iswhole","text":"return type bool description No description available public Fraction->isInt()","title":"isWhole"},{"location":"roster/latest/Fermat%20Core/Values/MutableFraction/#isint","text":"return type bool description No description available This documentation was generated with Roster .","title":"isInt"},{"location":"roster/latest/Fermat%20Stats/Provider/StatsProvider/","text":"Samsara\\Fermat\\Provider > StatsProvider No description available Methods Static Methods public StatsProvider::normalCDF($x) normalCDF $x description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public StatsProvider::complementNormalCDF($x) complementNormalCDF $x description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public StatsProvider::gaussErrorFunction($x) gaussErrorFunction $x description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public StatsProvider::inverseNormalCDF($p, int $scale) inverseNormalCDF $p description No description available $scale type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public StatsProvider::binomialCoefficient($n, $k) binomialCoefficient $n description No description available $k description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public StatsProvider::inverseErrorCoefficients(int $termIndex) inverseErrorCoefficients $termIndex type int description No description available return type Samsara\\Fermat\\Values\\ImmutableFraction description No description available public StatsProvider::inverseGaussErrorFunction($z, int $scale) inverseGaussErrorFunction $z description No description available $scale type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"StatsProvider"},{"location":"roster/latest/Fermat%20Stats/Provider/StatsProvider/#samsarafermatprovider-statsprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; StatsProvider"},{"location":"roster/latest/Fermat%20Stats/Provider/StatsProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Stats/Provider/StatsProvider/#static-methods","text":"public StatsProvider::normalCDF($x)","title":"Static Methods"},{"location":"roster/latest/Fermat%20Stats/Provider/StatsProvider/#normalcdf","text":"$x description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public StatsProvider::complementNormalCDF($x)","title":"normalCDF"},{"location":"roster/latest/Fermat%20Stats/Provider/StatsProvider/#complementnormalcdf","text":"$x description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public StatsProvider::gaussErrorFunction($x)","title":"complementNormalCDF"},{"location":"roster/latest/Fermat%20Stats/Provider/StatsProvider/#gausserrorfunction","text":"$x description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public StatsProvider::inverseNormalCDF($p, int $scale)","title":"gaussErrorFunction"},{"location":"roster/latest/Fermat%20Stats/Provider/StatsProvider/#inversenormalcdf","text":"$p description No description available $scale type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public StatsProvider::binomialCoefficient($n, $k)","title":"inverseNormalCDF"},{"location":"roster/latest/Fermat%20Stats/Provider/StatsProvider/#binomialcoefficient","text":"$n description No description available $k description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public StatsProvider::inverseErrorCoefficients(int $termIndex)","title":"binomialCoefficient"},{"location":"roster/latest/Fermat%20Stats/Provider/StatsProvider/#inverseerrorcoefficients","text":"$termIndex type int description No description available return type Samsara\\Fermat\\Values\\ImmutableFraction description No description available public StatsProvider::inverseGaussErrorFunction($z, int $scale)","title":"inverseErrorCoefficients"},{"location":"roster/latest/Fermat%20Stats/Provider/StatsProvider/#inversegausserrorfunction","text":"$z description No description available $scale type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"inverseGaussErrorFunction"},{"location":"roster/latest/Fermat%20Stats/Types/Distribution/","text":"Samsara\\Fermat\\Types > Distribution No description available Methods Instanced Methods public Distribution->random() random return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Distribution->randomSample(int $sampleSize) randomSample $sampleSize type int description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Distribution->rangeRandom($min, $max, int $maxIterations) rangeRandom $min description No description available $max description No description available $maxIterations type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"Distribution"},{"location":"roster/latest/Fermat%20Stats/Types/Distribution/#samsarafermattypes-distribution","text":"No description available","title":"Samsara\\Fermat\\Types &gt; Distribution"},{"location":"roster/latest/Fermat%20Stats/Types/Distribution/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Stats/Types/Distribution/#instanced-methods","text":"public Distribution->random()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Stats/Types/Distribution/#random","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Distribution->randomSample(int $sampleSize)","title":"random"},{"location":"roster/latest/Fermat%20Stats/Types/Distribution/#randomsample","text":"$sampleSize type int description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Distribution->rangeRandom($min, $max, int $maxIterations)","title":"randomSample"},{"location":"roster/latest/Fermat%20Stats/Types/Distribution/#rangerandom","text":"$min description No description available $max description No description available $maxIterations type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"rangeRandom"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/","text":"Samsara\\Fermat\\Values\\Distribution > Exponential No description available Inheritance Extends Samsara\\Fermat\\Types\\Distribution Methods Constructor public Exponential->__construct(int|float|DecimalInterface $lambda) __construct $lambda type int|float|DecimalInterface description This is the rate parameter not the scale parameter return type mixed (assumed) description No description available __construct() Description: Exponential constructor. Instanced Methods public Exponential->cdf(int|float|DecimalInterface $x, int $scale) cdf $x type int|float|DecimalInterface description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Exponential->pdf($x, int $scale) pdf $x description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Exponential->rangePdf($x1, $x2, int $scale) rangePdf $x1 description No description available $x2 description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Exponential->random() random return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Exponential->rangeRandom(int|float|DecimalInterface $min, int|float|DecimalInterface $max, int $maxIterations) rangeRandom $min type int|float|DecimalInterface description No description available $max type int|float|DecimalInterface description No description available $maxIterations type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available Inherited Methods public Distribution->randomSample(int $sampleSize) randomSample $sampleSize type int description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available This documentation was generated with Roster .","title":"Exponential"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#samsarafermatvaluesdistribution-exponential","text":"No description available","title":"Samsara\\Fermat\\Values\\Distribution &gt; Exponential"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#extends","text":"Samsara\\Fermat\\Types\\Distribution","title":"Extends"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#constructor","text":"public Exponential->__construct(int|float|DecimalInterface $lambda)","title":"Constructor"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#__construct","text":"$lambda type int|float|DecimalInterface description This is the rate parameter not the scale parameter return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#instanced-methods","text":"public Exponential->cdf(int|float|DecimalInterface $x, int $scale)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#cdf","text":"$x type int|float|DecimalInterface description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Exponential->pdf($x, int $scale)","title":"cdf"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#pdf","text":"$x description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Exponential->rangePdf($x1, $x2, int $scale)","title":"pdf"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#rangepdf","text":"$x1 description No description available $x2 description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Exponential->random()","title":"rangePdf"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#random","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Exponential->rangeRandom(int|float|DecimalInterface $min, int|float|DecimalInterface $max, int $maxIterations)","title":"random"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#rangerandom","text":"$min type int|float|DecimalInterface description No description available $max type int|float|DecimalInterface description No description available $maxIterations type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available","title":"rangeRandom"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#inherited-methods","text":"public Distribution->randomSample(int $sampleSize)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Exponential/#randomsample","text":"$sampleSize type int description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available This documentation was generated with Roster .","title":"randomSample"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/","text":"Samsara\\Fermat\\Values\\Distribution > Normal No description available Inheritance Extends Samsara\\Fermat\\Types\\Distribution Methods Constructor public Normal->__construct(int|float|DecimalInterface $mean, int|float|DecimalInterface $sd) __construct $mean type int|float|DecimalInterface description No description available $sd type int|float|DecimalInterface description return type mixed (assumed) description No description available __construct() Description: Normal constructor. Static Methods public Normal::makeFromMean(int|float|DecimalInterface $p, int|float|DecimalInterface $x, int|float|DecimalInterface $mean) makeFromMean $p type int|float|DecimalInterface description No description available $x type int|float|DecimalInterface description No description available $mean type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\Distribution\\Normal description No description available public Normal::makeFromSd(int|float|DecimalInterface $p, int|float|DecimalInterface $x, int|float|DecimalInterface $sd) makeFromSd $p type int|float|DecimalInterface description No description available $x type int|float|DecimalInterface description No description available $sd type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\Distribution\\Normal description No description available Instanced Methods public Normal->getSD() getSD return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->getMean() getMean return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->evaluateAt($x, int $scale) evaluateAt $x description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->cdf(int|float|DecimalInterface $x) cdf $x type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->pdf(int|float|DecimalInterface $x1, null|int|float|DecimalInterface $x2) pdf $x1 type int|float|DecimalInterface description No description available $x2 type null|int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->cdfProduct(FunctionInterface $function, $x) cdfProduct $function type FunctionInterface description No description available $x description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->pdfProduct(FunctionInterface $function, $x1, $x2) pdfProduct $function type FunctionInterface description No description available $x1 description No description available $x2 description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->percentBelowX(int|float|DecimalInterface $x) percentBelowX $x type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->percentAboveX(int|float|DecimalInterface $x) percentAboveX $x type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->zScoreOfX(int|float|DecimalInterface $x) zScoreOfX $x type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->xFromZScore(int|float|DecimalInterface $z) xFromZScore $z type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->random() random return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->rangeRandom(int|float|NumberInterface $min, int|float|NumberInterface $max, int $maxIterations) rangeRandom $min type int|float|NumberInterface description No description available $max type int|float|NumberInterface description No description available $maxIterations type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available Inherited Methods public Distribution->randomSample(int $sampleSize) randomSample $sampleSize type int description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available This documentation was generated with Roster .","title":"Normal"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#samsarafermatvaluesdistribution-normal","text":"No description available","title":"Samsara\\Fermat\\Values\\Distribution &gt; Normal"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#extends","text":"Samsara\\Fermat\\Types\\Distribution","title":"Extends"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#constructor","text":"public Normal->__construct(int|float|DecimalInterface $mean, int|float|DecimalInterface $sd)","title":"Constructor"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#__construct","text":"$mean type int|float|DecimalInterface description No description available $sd type int|float|DecimalInterface description return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#static-methods","text":"public Normal::makeFromMean(int|float|DecimalInterface $p, int|float|DecimalInterface $x, int|float|DecimalInterface $mean)","title":"Static Methods"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#makefrommean","text":"$p type int|float|DecimalInterface description No description available $x type int|float|DecimalInterface description No description available $mean type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\Distribution\\Normal description No description available public Normal::makeFromSd(int|float|DecimalInterface $p, int|float|DecimalInterface $x, int|float|DecimalInterface $sd)","title":"makeFromMean"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#makefromsd","text":"$p type int|float|DecimalInterface description No description available $x type int|float|DecimalInterface description No description available $sd type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\Distribution\\Normal description No description available","title":"makeFromSd"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#instanced-methods","text":"public Normal->getSD()","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#getsd","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->getMean()","title":"getSD"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#getmean","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->evaluateAt($x, int $scale)","title":"getMean"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#evaluateat","text":"$x description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->cdf(int|float|DecimalInterface $x)","title":"evaluateAt"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#cdf","text":"$x type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->pdf(int|float|DecimalInterface $x1, null|int|float|DecimalInterface $x2)","title":"cdf"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#pdf","text":"$x1 type int|float|DecimalInterface description No description available $x2 type null|int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->cdfProduct(FunctionInterface $function, $x)","title":"pdf"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#cdfproduct","text":"$function type FunctionInterface description No description available $x description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->pdfProduct(FunctionInterface $function, $x1, $x2)","title":"cdfProduct"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#pdfproduct","text":"$function type FunctionInterface description No description available $x1 description No description available $x2 description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->percentBelowX(int|float|DecimalInterface $x)","title":"pdfProduct"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#percentbelowx","text":"$x type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->percentAboveX(int|float|DecimalInterface $x)","title":"percentBelowX"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#percentabovex","text":"$x type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->zScoreOfX(int|float|DecimalInterface $x)","title":"percentAboveX"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#zscoreofx","text":"$x type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->xFromZScore(int|float|DecimalInterface $z)","title":"zScoreOfX"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#xfromzscore","text":"$z type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->random()","title":"xFromZScore"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#random","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Normal->rangeRandom(int|float|NumberInterface $min, int|float|NumberInterface $max, int $maxIterations)","title":"random"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#rangerandom","text":"$min type int|float|NumberInterface description No description available $max type int|float|NumberInterface description No description available $maxIterations type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available","title":"rangeRandom"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#inherited-methods","text":"public Distribution->randomSample(int $sampleSize)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Normal/#randomsample","text":"$sampleSize type int description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available This documentation was generated with Roster .","title":"randomSample"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/","text":"Samsara\\Fermat\\Values\\Distribution > Poisson No description available Inheritance Extends Samsara\\Fermat\\Types\\Distribution Methods Constructor public Poisson->__construct(int|float|DecimalInterface $lambda) __construct $lambda type int|float|DecimalInterface description return type mixed (assumed) description No description available __construct() Description: Poisson constructor. Instanced Methods public Poisson->probabilityOfKEvents(int|float|DecimalInterface $k, int $scale) probabilityOfKEvents $k type int|float|DecimalInterface description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Poisson->cdf(int|float|DecimalInterface $x, int $scale) cdf $x type int|float|DecimalInterface description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Poisson->pmf(float|int|DecimalInterface $x, int $scale) pmf $x type float|int|DecimalInterface description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Poisson->rangePmf(int|float|DecimalInterface $x1, int|float|DecimalInterface $x2) rangePmf $x1 type int|float|DecimalInterface description No description available $x2 type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Poisson->random() random return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Poisson->rangeRandom(int|float|NumberInterface $min, int|float|NumberInterface $max, int $maxIterations) rangeRandom $min type int|float|NumberInterface description No description available $max type int|float|NumberInterface description No description available $maxIterations type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available rangeRandom() Description: WARNING: This function is of very limited use with Poisson distributions, and may represent a SIGNIFICANT performance hit for certain values of $min, $max, $lambda, and $maxIterations Inherited Methods public Distribution->randomSample(int $sampleSize) randomSample $sampleSize type int description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available This documentation was generated with Roster .","title":"Poisson"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#samsarafermatvaluesdistribution-poisson","text":"No description available","title":"Samsara\\Fermat\\Values\\Distribution &gt; Poisson"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#extends","text":"Samsara\\Fermat\\Types\\Distribution","title":"Extends"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#methods","text":"","title":"Methods"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#constructor","text":"public Poisson->__construct(int|float|DecimalInterface $lambda)","title":"Constructor"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#__construct","text":"$lambda type int|float|DecimalInterface description return type mixed (assumed) description No description available","title":"__construct"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#instanced-methods","text":"public Poisson->probabilityOfKEvents(int|float|DecimalInterface $k, int $scale)","title":"Instanced Methods"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#probabilityofkevents","text":"$k type int|float|DecimalInterface description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Poisson->cdf(int|float|DecimalInterface $x, int $scale)","title":"probabilityOfKEvents"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#cdf","text":"$x type int|float|DecimalInterface description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Poisson->pmf(float|int|DecimalInterface $x, int $scale)","title":"cdf"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#pmf","text":"$x type float|int|DecimalInterface description $scale type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Poisson->rangePmf(int|float|DecimalInterface $x1, int|float|DecimalInterface $x2)","title":"pmf"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#rangepmf","text":"$x1 type int|float|DecimalInterface description No description available $x2 type int|float|DecimalInterface description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Poisson->random()","title":"rangePmf"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#random","text":"return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Poisson->rangeRandom(int|float|NumberInterface $min, int|float|NumberInterface $max, int $maxIterations)","title":"random"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#rangerandom","text":"$min type int|float|NumberInterface description No description available $max type int|float|NumberInterface description No description available $maxIterations type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available","title":"rangeRandom"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#inherited-methods","text":"public Distribution->randomSample(int $sampleSize)","title":"Inherited Methods"},{"location":"roster/latest/Fermat%20Stats/Values/Distribution/Poisson/#randomsample","text":"$sampleSize type int description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available This documentation was generated with Roster .","title":"randomSample"}]}