{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".katex img { object-fit: fill; padding: unset; display: block; position: absolute; width: 100%; height: inherit; } Using This Documentation A best effort is made to keep this documentation current, and the entire documentation is reviewed before every tagged release, however the documentation under v:latest may at times be out of date or incomplete. Info Boxes Additional information is provided throughout this documentation using color coded information boxes. These are the styles used and what they are used for. Notes This type of box is used to provide additional notes about a topic that may be rare use cases, or more detailed technical information that is not relevant to all readers of this documentation. Tips This type of box is used to give helpful tips on using the code described in the section where it appears. Sometimes this may be tips on architecture, while others it could be a tip on how to improve performance or help accomplish a common task. Examples This type of box is used to provide examples of code, inputs, and outputs that illustrate a point which may be difficult to explain using just words. See Also This type of box is used to point you towards other parts of this documentation, or documentation elsewhere on the internet, which might provide more information on the section being described. Potential Bugs This type of box is used to provide a warning about common ways a programmer using this library might introduce a bug into their software through this library. It often details potentially unexpected type conversions, assumptions made that may not be obvious, or limitations that are inherent to this library or to PHP. Cautions This type of box is used to caution the developer about incorrect usage of the section being detailed. It is used when the incorrect usage will not result in exceptions or unexpected results, but instead might simply have undesirable side effects. Warnings This type of box is used to warn the developer about incorrect usage of the section being detailed. It is used when the incorrect usage will result in exceptions, but not unexpected results. Danger This type of box is used to alert the developer about potentially hard to find bugs that will result from an incorrect usage of the section being detailed. It is used when the incorrect usage will result in unexpected result without any exceptions or errors. What This Library Is For Consistent arbitrary scale math Provides a consistent way to perform arbitrary scale math without making it easy to accidentally use PHP features (such as arithmetic operators or built in functions) that will reduce scale by casting to native int or float types. This is accomplished by providing an arbitrary scale implementation of all math functions which might be performed on a variable with the integer or float types. Complex math functions Enables the use of common complex math tasks, such as working with basic statistics functions, while still preserving arbitrary scale. Non-Integer & non-float number types Provides a framework for working with non-integer and non-float math concepts such as fractions, coordinates, imaginary numbers, and complex numbers. Abstraction of math concepts Provides a consistent abstraction for nearly any math concept that is likely to be relevant to a computer program, including many scientific programs. What This Library Is NOT For Extreme Performance While Fermat has different modes that allow you to control performance to a degree, the abstraction and comprehensive nature of the library means that for certain uses, such as working with complex numbers, a large number of object instances may be created temporarily during a calculation, leading to significantly more overhead than using operands directly when doing basic math within common scale limitations. Despite the fact that performance is not a primary goal of this library, it does use built in functions wherever possible (where doing so does not affect scale), and it will utilize the GMP functions and PHP-DS types if those extensions are present in your installation of PHP. Installing these extensions should slightly increase performance in most use-cases. Tip A good way to increase performance is to avoid using imaginary and complex numbers if possible. The actual math involved in calculating simple operations involving these values is algorithmically complex, and leads to much longer execution times. Installing the suggested extensions will also help improve performance, in some situations quite significantly. Other Extensions Like many programs, this library's performance suffers enormously if xDebug is enabled. This can lead to execution times of more than one second for a single operation on complex numbers, making them almost totally unusable for the web. To avoid this, make sure that your production environment does not have xDebug enabled. Integration With Other Math Libraries Everything is self-contained within this library, and if you need to use another math library or a built-in math function to accomplish something, please create a GitHub issue so that it can be added to the library. Keep in mind that this library is not necessarily designed to guarantee compatibility. That said, this library does offer ways for you to integrate. The state of all objects is available for reading at all times enabling you to put data into other libraries or functions, and the classes are all left open for extension. The references within the library are almost all to a base abstract class or interface, making it easier for a developer to extend a class with their own code. Limitations Developers using this library should be aware of the following limitations which may lead to unexpected results. Extreme Scale While this library can theoretically handle scales on all operations up to 2 63 2^{63} 2 63 digits, in practice there are many operations in this library that have practical limits because of execution time. For instance, while the library would faithfully collect the first 10,000 digits of sin \u2061 ( 1 ) \\sin(1) sin ( 1 ) , doing so may take prohibitively long, and depending on configuration and environment, the process may be killed before completion as a 'hung' process. There are also several features in this library that by the nature of the math behind them can lead to infinite loops with the wrong inputs. While some basic measures exist within the library to detect and exit these situations with a thrown exception, doing so comprehensively is an example of the halting problem. This should not occur without direct calls to these areas, such as SeriesProvider::maclaurenSeries() . Avoid Direct Usage While the SeriesProvider methods are public, and can certainly be used directly, the internal workings of the functions are complicated to understand and simple to get wrong. In general, you should try to use consumers of the SeriesProvider first, such as the various distributions, or the StatsProvider . For this reason, you should limit your requested scale to the smallest value which will still work for your intended application. Some Types of Math Require Assumptions Some areas of math are ambiguously defined, depending on the exact axioms used. More generally, there are some types of calculations which give consistent behavior for a variety of axioms and mappings, or for which there is no consistent behavior defined within mathematics. This is most obvious in the arc functions, such as arctan \u2061 ( x ) \\arctan(x) arctan ( x ) . However, other areas make assumptions that may not be entirely clear at first. For Example Calling isEqual() on a ComplexNumber will return false unless it is being compared to another ComplexNumber that has the same values for its real and imaginary part. More surprisingly perhaps, ComplexNumber objects do not have any of the GreaterThan or LessThan functions, as inequality comparison is poorly defined even between two complex numbers. These peculiarities are documented as accurately as possible in this documentation where they occur. Immutables Are Used Internally While this library provides both Mutable and Immutable versions of its base values, when a new object is generated internally it is nearly always an immutable version. This is to limit the side effects that might occur if object instance zvals that were used internally were changed in a parent scope. Because of this, methods which return a calculated value object always return the Immutable version of that value. For this same reason, most of the time when an object is returned from an internal register, such as with the getNumerator() method on Fraction , any changes to that object will not be reflected in the instance of Fraction that it came from. The exceptions to this are objects which contain a register of registers. An example would be the Matrix class, which internally has an array of NumberCollection objects. To prevent side effects in this situation, a clone is returned instead when the object is accessed with getRow() or getColumn() . However, methods which act as array manipulation tools, such a popRow() and shiftColumn() will return the actual instance, and directly affect the internal data values. This is related to PHP's internal structure of hashtables and zvals, and how these interact with the object model that PHP uses. See Also The PHP Documentation contains examples on the specifics of how objects are passed between scopes. While it isn't exactly the same as passing by reference, it behaves in a very similar way in most situations. See the php.net page for more information. See Also More information about mutable and immutable objects, as well as how they are implemented and used with this library, is available on the Mutable vs. Immutable documentation page. This Library Can't Be Reliably Used With Math Operators Because PHP doesn't allow operator overloading, using the native math operators on Fermat objects directly can very easily result in loss of scale, overflows and underflows, PHP fatal errors (f.e. when the object is in a non-base-10 format), and incorrect calculation (f.e. with complex and imaginary numbers). Non-Base-10 Values With Native Operators Using a value that is in a base larger than base-10 with math operators can result in PHP fatal errors. For instance, the value 15 in base 16 will output the string F . When used with the operator / as the value on the right of the operator, this would result in a \"Division by Zero\" PHP fatal error. This occurs because PHP will attempt to cast the string F to an integer , which will result in the value 0 . Complex Numbers With Native Operators Using a ComplexNumber instance with native operators will throw only a notice and discard the imaginary component, making it very difficult to pin down the source of the incorrect result if notices are not turned on with the E_NOTICE or E_ALL levels in php.ini . 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableComplexNumber ; 4 5 $complexNumber = ImmutableComplexNumber :: makeFromString ( '2+2i' ); 6 7 echo $complexNumber + 2 ; 8 // Prints: 4 9 // Issues: PHP Notice","title":"Introduction"},{"location":"#using-this-documentation","text":"A best effort is made to keep this documentation current, and the entire documentation is reviewed before every tagged release, however the documentation under v:latest may at times be out of date or incomplete.","title":"Using This Documentation"},{"location":"#info-boxes","text":"Additional information is provided throughout this documentation using color coded information boxes. These are the styles used and what they are used for. Notes This type of box is used to provide additional notes about a topic that may be rare use cases, or more detailed technical information that is not relevant to all readers of this documentation. Tips This type of box is used to give helpful tips on using the code described in the section where it appears. Sometimes this may be tips on architecture, while others it could be a tip on how to improve performance or help accomplish a common task. Examples This type of box is used to provide examples of code, inputs, and outputs that illustrate a point which may be difficult to explain using just words. See Also This type of box is used to point you towards other parts of this documentation, or documentation elsewhere on the internet, which might provide more information on the section being described. Potential Bugs This type of box is used to provide a warning about common ways a programmer using this library might introduce a bug into their software through this library. It often details potentially unexpected type conversions, assumptions made that may not be obvious, or limitations that are inherent to this library or to PHP. Cautions This type of box is used to caution the developer about incorrect usage of the section being detailed. It is used when the incorrect usage will not result in exceptions or unexpected results, but instead might simply have undesirable side effects. Warnings This type of box is used to warn the developer about incorrect usage of the section being detailed. It is used when the incorrect usage will result in exceptions, but not unexpected results. Danger This type of box is used to alert the developer about potentially hard to find bugs that will result from an incorrect usage of the section being detailed. It is used when the incorrect usage will result in unexpected result without any exceptions or errors.","title":"Info Boxes"},{"location":"#what-this-library-is-for","text":"","title":"What This Library Is For"},{"location":"#consistent-arbitrary-scale-math","text":"Provides a consistent way to perform arbitrary scale math without making it easy to accidentally use PHP features (such as arithmetic operators or built in functions) that will reduce scale by casting to native int or float types. This is accomplished by providing an arbitrary scale implementation of all math functions which might be performed on a variable with the integer or float types.","title":"Consistent arbitrary scale math"},{"location":"#complex-math-functions","text":"Enables the use of common complex math tasks, such as working with basic statistics functions, while still preserving arbitrary scale.","title":"Complex math functions"},{"location":"#non-integer-non-float-number-types","text":"Provides a framework for working with non-integer and non-float math concepts such as fractions, coordinates, imaginary numbers, and complex numbers.","title":"Non-Integer &amp; non-float number types"},{"location":"#abstraction-of-math-concepts","text":"Provides a consistent abstraction for nearly any math concept that is likely to be relevant to a computer program, including many scientific programs.","title":"Abstraction of math concepts"},{"location":"#what-this-library-is-not-for","text":"","title":"What This Library Is NOT For"},{"location":"#extreme-performance","text":"While Fermat has different modes that allow you to control performance to a degree, the abstraction and comprehensive nature of the library means that for certain uses, such as working with complex numbers, a large number of object instances may be created temporarily during a calculation, leading to significantly more overhead than using operands directly when doing basic math within common scale limitations. Despite the fact that performance is not a primary goal of this library, it does use built in functions wherever possible (where doing so does not affect scale), and it will utilize the GMP functions and PHP-DS types if those extensions are present in your installation of PHP. Installing these extensions should slightly increase performance in most use-cases. Tip A good way to increase performance is to avoid using imaginary and complex numbers if possible. The actual math involved in calculating simple operations involving these values is algorithmically complex, and leads to much longer execution times. Installing the suggested extensions will also help improve performance, in some situations quite significantly. Other Extensions Like many programs, this library's performance suffers enormously if xDebug is enabled. This can lead to execution times of more than one second for a single operation on complex numbers, making them almost totally unusable for the web. To avoid this, make sure that your production environment does not have xDebug enabled.","title":"Extreme Performance"},{"location":"#integration-with-other-math-libraries","text":"Everything is self-contained within this library, and if you need to use another math library or a built-in math function to accomplish something, please create a GitHub issue so that it can be added to the library. Keep in mind that this library is not necessarily designed to guarantee compatibility. That said, this library does offer ways for you to integrate. The state of all objects is available for reading at all times enabling you to put data into other libraries or functions, and the classes are all left open for extension. The references within the library are almost all to a base abstract class or interface, making it easier for a developer to extend a class with their own code.","title":"Integration With Other Math Libraries"},{"location":"#limitations","text":"Developers using this library should be aware of the following limitations which may lead to unexpected results.","title":"Limitations"},{"location":"#extreme-scale","text":"While this library can theoretically handle scales on all operations up to 2 63 2^{63} 2 63 digits, in practice there are many operations in this library that have practical limits because of execution time. For instance, while the library would faithfully collect the first 10,000 digits of sin \u2061 ( 1 ) \\sin(1) sin ( 1 ) , doing so may take prohibitively long, and depending on configuration and environment, the process may be killed before completion as a 'hung' process. There are also several features in this library that by the nature of the math behind them can lead to infinite loops with the wrong inputs. While some basic measures exist within the library to detect and exit these situations with a thrown exception, doing so comprehensively is an example of the halting problem. This should not occur without direct calls to these areas, such as SeriesProvider::maclaurenSeries() . Avoid Direct Usage While the SeriesProvider methods are public, and can certainly be used directly, the internal workings of the functions are complicated to understand and simple to get wrong. In general, you should try to use consumers of the SeriesProvider first, such as the various distributions, or the StatsProvider . For this reason, you should limit your requested scale to the smallest value which will still work for your intended application.","title":"Extreme Scale"},{"location":"#some-types-of-math-require-assumptions","text":"Some areas of math are ambiguously defined, depending on the exact axioms used. More generally, there are some types of calculations which give consistent behavior for a variety of axioms and mappings, or for which there is no consistent behavior defined within mathematics. This is most obvious in the arc functions, such as arctan \u2061 ( x ) \\arctan(x) arctan ( x ) . However, other areas make assumptions that may not be entirely clear at first. For Example Calling isEqual() on a ComplexNumber will return false unless it is being compared to another ComplexNumber that has the same values for its real and imaginary part. More surprisingly perhaps, ComplexNumber objects do not have any of the GreaterThan or LessThan functions, as inequality comparison is poorly defined even between two complex numbers. These peculiarities are documented as accurately as possible in this documentation where they occur.","title":"Some Types of Math Require Assumptions"},{"location":"#immutables-are-used-internally","text":"While this library provides both Mutable and Immutable versions of its base values, when a new object is generated internally it is nearly always an immutable version. This is to limit the side effects that might occur if object instance zvals that were used internally were changed in a parent scope. Because of this, methods which return a calculated value object always return the Immutable version of that value. For this same reason, most of the time when an object is returned from an internal register, such as with the getNumerator() method on Fraction , any changes to that object will not be reflected in the instance of Fraction that it came from. The exceptions to this are objects which contain a register of registers. An example would be the Matrix class, which internally has an array of NumberCollection objects. To prevent side effects in this situation, a clone is returned instead when the object is accessed with getRow() or getColumn() . However, methods which act as array manipulation tools, such a popRow() and shiftColumn() will return the actual instance, and directly affect the internal data values. This is related to PHP's internal structure of hashtables and zvals, and how these interact with the object model that PHP uses. See Also The PHP Documentation contains examples on the specifics of how objects are passed between scopes. While it isn't exactly the same as passing by reference, it behaves in a very similar way in most situations. See the php.net page for more information. See Also More information about mutable and immutable objects, as well as how they are implemented and used with this library, is available on the Mutable vs. Immutable documentation page.","title":"Immutables Are Used Internally"},{"location":"#this-library-cant-be-reliably-used-with-math-operators","text":"Because PHP doesn't allow operator overloading, using the native math operators on Fermat objects directly can very easily result in loss of scale, overflows and underflows, PHP fatal errors (f.e. when the object is in a non-base-10 format), and incorrect calculation (f.e. with complex and imaginary numbers). Non-Base-10 Values With Native Operators Using a value that is in a base larger than base-10 with math operators can result in PHP fatal errors. For instance, the value 15 in base 16 will output the string F . When used with the operator / as the value on the right of the operator, this would result in a \"Division by Zero\" PHP fatal error. This occurs because PHP will attempt to cast the string F to an integer , which will result in the value 0 . Complex Numbers With Native Operators Using a ComplexNumber instance with native operators will throw only a notice and discard the imaginary component, making it very difficult to pin down the source of the incorrect result if notices are not turned on with the E_NOTICE or E_ALL levels in php.ini . 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableComplexNumber ; 4 5 $complexNumber = ImmutableComplexNumber :: makeFromString ( '2+2i' ); 6 7 echo $complexNumber + 2 ; 8 // Prints: 4 9 // Issues: PHP Notice","title":"This Library Can't Be Reliably Used With Math Operators"},{"location":"configuration/calculation-modes/","text":"Available Modes All modes which are defined exist as constants on the Selectable class. There are two modes currently available in Fermat. Scale Mode Selectable::CALC_MODE_PRECISION = 1 In this mode, the best available string math implementation is used when a mathematical operation is performed. By default these are the functions provided by the BCMath library, however a future scope of this project is to provide integration with ext-decimal . For Certain Operations, BCMath Is Ignored If the ext-gmp extension is present, it is used when both the input and output of an operation are guaranteed to be integers. This helps improve performance of operations which do not have a scale component. A non-exhaustive list of these situations includes: Using the factorial() method. Using the add() method on two integers. Using the multiply() method on two integers. Note that ext-gmp is never used for divide, as optimistic use of the extension would result in a large performance cost for non-exact division at a very small performance gain in the case of exact division. Native Mode Selectable::CALC_MODE_NATIVE = 2 In this mode, the native PHP math operators are used for calculation. The result is then converted to a string and stored according to the normal behavior of the class in question. Loss Of Scale The scale defined in the object is ignored when this mode is used. This will result in values which behave as math operations in PHP would natively, including issues such as overflow and underflow. Better Performance In Low Scale Situations As a trade-off for accepting more ambiguous scale in the result, using this mode will decrease the computation required for basic math operations, in some cases quite significantly. If you are absolutely certain that your math will not result in an overflow or underflow, and your application is not sensitive to loss of scale in float values, using this mode will reduce the cost of each mathematical operation. Expanding Native Types With the mode set to native, this library functions as simply an extension to integer and float types that enables representations of imaginary numbers, complex numbers, matrices, coordinates, and statistics. In this way, the library may be useful even if arbitrary scale is not necessary for your application. Controlling the Mode of Objects There are two main ways of controlling the mode used by your Fermat objects. The first is through the use of the default mode, and the second is with the use of the setMode() method. Default Mode All objects that extend the Number abstract class set their current mode to the default calculation mode returned by Numbers::getDefaultCalcMode() . This check is only done during instantiation, meaning that changing the default calculation mode using Numbers::setDefaultCalcMode() will only affect objects instantiated after this change is made. Interaction With Immutable Objects Because immutable objects create new instances for every mathematical operation performed, changing the default calculation mode in the middle of application execution will result in all previously created immutables utilizing the original mode for their first mathematical operation, and the new mode for every subsequent operation. If immutable objects are being used, the default mode should never be changed in the middle of application execution. Instead, set it to the desired value at the beginning of the application, or use the setMode() method after a new object is instantiated. See Also Further information on how to use default modes is available in the Numbers Factory Class documentation. Set Mode setMode(int $mode) This method is available on all classes that extend the Number abstract class. It sets the mode of the object it is called on to the mode provided. Use Only Defined Modes While setMode() will accept any integer, you should only ever use inputs that are defined as constants on the Selectable class to avoid unexpected behaviors. This Method Is Mutable For All Objects Because of the nature of what this method does, it is mutable for all objects, including any implementations of immutable objects.","title":"Calculation Modes"},{"location":"configuration/calculation-modes/#available-modes","text":"All modes which are defined exist as constants on the Selectable class. There are two modes currently available in Fermat.","title":"Available Modes"},{"location":"configuration/calculation-modes/#scale-mode","text":"","title":"Scale Mode"},{"location":"configuration/calculation-modes/#native-mode","text":"","title":"Native Mode"},{"location":"configuration/calculation-modes/#controlling-the-mode-of-objects","text":"There are two main ways of controlling the mode used by your Fermat objects. The first is through the use of the default mode, and the second is with the use of the setMode() method.","title":"Controlling the Mode of Objects"},{"location":"configuration/calculation-modes/#default-mode","text":"All objects that extend the Number abstract class set their current mode to the default calculation mode returned by Numbers::getDefaultCalcMode() . This check is only done during instantiation, meaning that changing the default calculation mode using Numbers::setDefaultCalcMode() will only affect objects instantiated after this change is made. Interaction With Immutable Objects Because immutable objects create new instances for every mathematical operation performed, changing the default calculation mode in the middle of application execution will result in all previously created immutables utilizing the original mode for their first mathematical operation, and the new mode for every subsequent operation. If immutable objects are being used, the default mode should never be changed in the middle of application execution. Instead, set it to the desired value at the beginning of the application, or use the setMode() method after a new object is instantiated. See Also Further information on how to use default modes is available in the Numbers Factory Class documentation.","title":"Default Mode"},{"location":"configuration/calculation-modes/#set-mode","text":"","title":"Set Mode"},{"location":"configuration/rounding-modes/","text":"Rounding Modes Rounding in Fermat is accomplished by making calls to the RoundingProvider . This provider accepts a DecimalInterface as its input, and provides the rounded value as a string. The rounding provider provides two broad types of rounding, deterministic and non-deterministic (or semi-deterministic). Rounding is Anything that Reduces Scale Many people think of rounding as selecting the closest integer to a given number, with some kind of rule for what to do when you are half-way between two integers. However, rounding broadly covers any action that reduces the scale or precision of a number. Going from more digits to fewer digits is rounding regardless of how it is done. This means that even operations like truncate() or floor() or ceil() are rounding. Since truncate is better handled by the Decimal object itself, due to its knowledge of the internal state of the object, that is not handled by the RoundingProvider . All other kinds of rounding offered in Fermat utilize the RoundingProvider however. For this reason it is designed to be as lightweight as possible while still accomplishing its task. The random provider has a private static property where it stores the mode to use while rounding. This property can be read and set using public static methods, but as it is a static property it affects all rounding operations after a mode is changed, even those you don't directly call. This is useful in most cases, since it allows you to set the rounding mode once at the beginning of your program and then utilize that rounding mode in every call that is made to the library. The default mode is RandomProvider::MODE_HALF_EVEN . This is also the fallback mode if you ask for a non-existent rounding mode. Rounding Mode Affects Many Operations Internally Rounding occurs frequently in Fermat, since many operations produce more digits than the scale setting of your objects. The trigonometry functions, logarithmic function, and exponential functions all make a call to the RoundingProvider before returning a result. This means that selecting a rounding mode will affect the results you get from functions such as tan() , sin() , exp() , and ln() . In most cases this is not an issue, and would even be preferred to keep your results consistent with the other effects of rounding within the library. However, some modes such as Stochastic may produce results that are more inconsistent with the expectations of your program. If you want to manually round an object once using a different mode, pass the mode as an argument to the round() method on your Decimal object instead of setting a new default more in the RoundingProvider . When done in this way, the provided mode will only be used for that one operation without affecting the default more for any other operations. See Also The exact signatures associated with the RandomProvider can be found in the Rounding Provider Reference Page Available Modes Rounding Is Base-10 Referenced As noted in other places, anything related to scale in this library is specific to base-10. While you can still round in other bases, the operations will be performed on the base-10 representation of the number instead of the base the Decimal object is in. Examples Assume Rounding to the Closest Integer In all of the examples given below, they are showing what the expected outputs would be if RoundingProvider::round($decimal, $places) was called with the example value for $decimal and 0 for $places . If a number with more digits were provided and a different value for $places was used, these rounding modes would all round towards a different target digit. The examples describe the behavior if the $places argument is omitted, since its default value is 0. But you could just as easily use any mode to round to the nearest tenth by passing 1 for the $places argument. Half Up This rounding mode rounds the number towards positive infinity when halfway between two values. Examples 1.5 Using the \"Half Up\" mode: 1.5 -> 2 -1.5 Using the \"Half Up\" mode: -1.5 -> -1 2.5 Using the \"Half Up\" mode: 2.5 -> 3 -2.5 Using the \"Half Up\" mode: -2.5 -> -2 Half Down This rounding mode rounds the number towards negative infinity when halfway between two values. Examples 1.5 Using the \"Half Down\" mode: 1.5 -> 1 -1.5 Using the \"Half Down\" mode: -1.5 -> -2 2.5 Using the \"Half Down\" mode: 2.5 -> 2 -2.5 Using the \"Half Down\" mode: -2.5 -> -3 Half Even This rounding mode rounds the number towards the nearest even number when halfway between two values. Examples 1.5 Using the \"Half Even\" mode: 1.5 -> 2 -1.5 Using the \"Half Even\" mode: -1.5 -> -2 2.5 Using the \"Half Even\" mode: 2.5 -> 2 -2.5 Using the \"Half Even\" mode: -2.5 -> -2 Half Odd This rounding mode rounds the number towards the nearest odd number when halfway between two values. Examples 1.5 Using the \"Half Odd\" mode: 1.5 -> 1 -1.5 Using the \"Half Odd\" mode: -1.5 -> -1 2.5 Using the \"Half Odd\" mode: 2.5 -> 3 -2.5 Using the \"Half Odd\" mode: -2.5 -> -3 Half Zero This rounding mode rounds the number towards zero when halfway between two values. Examples 1.5 Using the \"Half Zero\" mode: 1.5 -> 1 -1.5 Using the \"Half Zero\" mode: -1.5 -> -1 2.5 Using the \"Half Zero\" mode: 2.5 -> 2 -2.5 Using the \"Half Zero\" mode: -2.5 -> -2 Half Infinity This rounding mode rounds the number towards the nearest infinity (positive or negative) when halfway between two values. Examples 1.5 Using the \"Half Infinity\" mode: 1.5 -> 2 -1.5 Using the \"Half Infinity\" mode: -1.5 -> -2 2.5 Using the \"Half Infinity\" mode: 2.5 -> 3 -2.5 Using the \"Half Infinity\" mode: -2.5 -> -3 Ceil This rounding mode rounds the number towards positive infinity, even for values which are not halfway between. Examples 1.5 Using the \"Ceil\" mode: 1.5 -> 2 -1.5 Using the \"Ceil\" mode: -1.5 -> -1 2.2 Using the \"Ceil\" mode: 2.2 -> 3 -2.2 Using the \"Ceil\" mode: -2.2 -> -2 Floor This rounding mode rounds the number towards negative infinity, even for values which are not halfway between. Examples 1.5 Using the \"Floor\" mode: 1.5 -> 1 -1.5 Using the \"Floor\" mode: -1.5 -> -2 2.2 Using the \"Floor\" mode: 2.2 -> 2 -2.2 Using the \"Floor\" mode: -2.2 -> -3 Random This rounding mode rounds the number in a direction that is randomly chosen when halfway between two values. Examples 1.5 Using the \"Random\" mode: 1.5 -> 1 50% of the time 1.5 -> 2 50% of the time 1.7 Using the \"Random\" mode: 1.7 -> 2 100% of the time 2.2 Using the \"Random\" mode: 2.2 -> 2 100% of the time -2.5 Using the \"Random\" mode: -2.5 -> -2 50% of the time -2.5 -> -3 50% of the time Alternating This rounding mode rounds the number in a direction that alternates as more calls to round() are made when halfway between two values. Examples 1.5 Using the \"Alternating\" mode: 1.5 -> 2 on the first call 1.5 -> 1 on the second call 1.7 Using the \"Alternating\" mode: 1.7 -> 2 100% of the time 2.2 Using the \"Alternating\" mode: 2.2 -> 2 100% of the time -2.5 Using the \"Alternating\" mode: -2.5 -> -3 on the first call -2.5 -> -2 on the second call Stochastic This rounding mode rounds the number in both directions in proportion to how close it is to both values. This occurs regardless of whether the number is halfway between. Please see the examples below for clarification. Examples 1.5 Using the \"Stochastic\" mode: 1.5 -> 2 50% of the time 1.5 -> 1 50% of the time 1.7 Using the \"Stochastic\" mode: 1.7 -> 2 70% of the time 1.7 -> 1 30% of the time 2.2 Using the \"Stochastic\" mode: 2.2 -> 3 20% of the time 2.2 -> 2 80% of the time -2.5 Using the \"Stochastic\" mode: -2.5 -> -3 50% of the time -2.5 -> -2 50% of the time","title":"Rounding Modes"},{"location":"configuration/rounding-modes/#rounding-modes","text":"Rounding in Fermat is accomplished by making calls to the RoundingProvider . This provider accepts a DecimalInterface as its input, and provides the rounded value as a string. The rounding provider provides two broad types of rounding, deterministic and non-deterministic (or semi-deterministic). Rounding is Anything that Reduces Scale Many people think of rounding as selecting the closest integer to a given number, with some kind of rule for what to do when you are half-way between two integers. However, rounding broadly covers any action that reduces the scale or precision of a number. Going from more digits to fewer digits is rounding regardless of how it is done. This means that even operations like truncate() or floor() or ceil() are rounding. Since truncate is better handled by the Decimal object itself, due to its knowledge of the internal state of the object, that is not handled by the RoundingProvider . All other kinds of rounding offered in Fermat utilize the RoundingProvider however. For this reason it is designed to be as lightweight as possible while still accomplishing its task. The random provider has a private static property where it stores the mode to use while rounding. This property can be read and set using public static methods, but as it is a static property it affects all rounding operations after a mode is changed, even those you don't directly call. This is useful in most cases, since it allows you to set the rounding mode once at the beginning of your program and then utilize that rounding mode in every call that is made to the library. The default mode is RandomProvider::MODE_HALF_EVEN . This is also the fallback mode if you ask for a non-existent rounding mode. Rounding Mode Affects Many Operations Internally Rounding occurs frequently in Fermat, since many operations produce more digits than the scale setting of your objects. The trigonometry functions, logarithmic function, and exponential functions all make a call to the RoundingProvider before returning a result. This means that selecting a rounding mode will affect the results you get from functions such as tan() , sin() , exp() , and ln() . In most cases this is not an issue, and would even be preferred to keep your results consistent with the other effects of rounding within the library. However, some modes such as Stochastic may produce results that are more inconsistent with the expectations of your program. If you want to manually round an object once using a different mode, pass the mode as an argument to the round() method on your Decimal object instead of setting a new default more in the RoundingProvider . When done in this way, the provided mode will only be used for that one operation without affecting the default more for any other operations. See Also The exact signatures associated with the RandomProvider can be found in the Rounding Provider Reference Page","title":"Rounding Modes"},{"location":"configuration/rounding-modes/#available-modes","text":"Rounding Is Base-10 Referenced As noted in other places, anything related to scale in this library is specific to base-10. While you can still round in other bases, the operations will be performed on the base-10 representation of the number instead of the base the Decimal object is in. Examples Assume Rounding to the Closest Integer In all of the examples given below, they are showing what the expected outputs would be if RoundingProvider::round($decimal, $places) was called with the example value for $decimal and 0 for $places . If a number with more digits were provided and a different value for $places was used, these rounding modes would all round towards a different target digit. The examples describe the behavior if the $places argument is omitted, since its default value is 0. But you could just as easily use any mode to round to the nearest tenth by passing 1 for the $places argument.","title":"Available Modes"},{"location":"configuration/rounding-modes/#half-up","text":"This rounding mode rounds the number towards positive infinity when halfway between two values. Examples 1.5 Using the \"Half Up\" mode: 1.5 -> 2 -1.5 Using the \"Half Up\" mode: -1.5 -> -1 2.5 Using the \"Half Up\" mode: 2.5 -> 3 -2.5 Using the \"Half Up\" mode: -2.5 -> -2","title":"Half Up"},{"location":"configuration/rounding-modes/#half-down","text":"This rounding mode rounds the number towards negative infinity when halfway between two values. Examples 1.5 Using the \"Half Down\" mode: 1.5 -> 1 -1.5 Using the \"Half Down\" mode: -1.5 -> -2 2.5 Using the \"Half Down\" mode: 2.5 -> 2 -2.5 Using the \"Half Down\" mode: -2.5 -> -3","title":"Half Down"},{"location":"configuration/rounding-modes/#half-even","text":"This rounding mode rounds the number towards the nearest even number when halfway between two values. Examples 1.5 Using the \"Half Even\" mode: 1.5 -> 2 -1.5 Using the \"Half Even\" mode: -1.5 -> -2 2.5 Using the \"Half Even\" mode: 2.5 -> 2 -2.5 Using the \"Half Even\" mode: -2.5 -> -2","title":"Half Even"},{"location":"configuration/rounding-modes/#half-odd","text":"This rounding mode rounds the number towards the nearest odd number when halfway between two values. Examples 1.5 Using the \"Half Odd\" mode: 1.5 -> 1 -1.5 Using the \"Half Odd\" mode: -1.5 -> -1 2.5 Using the \"Half Odd\" mode: 2.5 -> 3 -2.5 Using the \"Half Odd\" mode: -2.5 -> -3","title":"Half Odd"},{"location":"configuration/rounding-modes/#half-zero","text":"This rounding mode rounds the number towards zero when halfway between two values. Examples 1.5 Using the \"Half Zero\" mode: 1.5 -> 1 -1.5 Using the \"Half Zero\" mode: -1.5 -> -1 2.5 Using the \"Half Zero\" mode: 2.5 -> 2 -2.5 Using the \"Half Zero\" mode: -2.5 -> -2","title":"Half Zero"},{"location":"configuration/rounding-modes/#half-infinity","text":"This rounding mode rounds the number towards the nearest infinity (positive or negative) when halfway between two values. Examples 1.5 Using the \"Half Infinity\" mode: 1.5 -> 2 -1.5 Using the \"Half Infinity\" mode: -1.5 -> -2 2.5 Using the \"Half Infinity\" mode: 2.5 -> 3 -2.5 Using the \"Half Infinity\" mode: -2.5 -> -3","title":"Half Infinity"},{"location":"configuration/rounding-modes/#ceil","text":"This rounding mode rounds the number towards positive infinity, even for values which are not halfway between. Examples 1.5 Using the \"Ceil\" mode: 1.5 -> 2 -1.5 Using the \"Ceil\" mode: -1.5 -> -1 2.2 Using the \"Ceil\" mode: 2.2 -> 3 -2.2 Using the \"Ceil\" mode: -2.2 -> -2","title":"Ceil"},{"location":"configuration/rounding-modes/#floor","text":"This rounding mode rounds the number towards negative infinity, even for values which are not halfway between. Examples 1.5 Using the \"Floor\" mode: 1.5 -> 1 -1.5 Using the \"Floor\" mode: -1.5 -> -2 2.2 Using the \"Floor\" mode: 2.2 -> 2 -2.2 Using the \"Floor\" mode: -2.2 -> -3","title":"Floor"},{"location":"configuration/rounding-modes/#random","text":"This rounding mode rounds the number in a direction that is randomly chosen when halfway between two values. Examples 1.5 Using the \"Random\" mode: 1.5 -> 1 50% of the time 1.5 -> 2 50% of the time 1.7 Using the \"Random\" mode: 1.7 -> 2 100% of the time 2.2 Using the \"Random\" mode: 2.2 -> 2 100% of the time -2.5 Using the \"Random\" mode: -2.5 -> -2 50% of the time -2.5 -> -3 50% of the time","title":"Random"},{"location":"configuration/rounding-modes/#alternating","text":"This rounding mode rounds the number in a direction that alternates as more calls to round() are made when halfway between two values. Examples 1.5 Using the \"Alternating\" mode: 1.5 -> 2 on the first call 1.5 -> 1 on the second call 1.7 Using the \"Alternating\" mode: 1.7 -> 2 100% of the time 2.2 Using the \"Alternating\" mode: 2.2 -> 2 100% of the time -2.5 Using the \"Alternating\" mode: -2.5 -> -3 on the first call -2.5 -> -2 on the second call","title":"Alternating"},{"location":"configuration/rounding-modes/#stochastic","text":"This rounding mode rounds the number in both directions in proportion to how close it is to both values. This occurs regardless of whether the number is halfway between. Please see the examples below for clarification. Examples 1.5 Using the \"Stochastic\" mode: 1.5 -> 2 50% of the time 1.5 -> 1 50% of the time 1.7 Using the \"Stochastic\" mode: 1.7 -> 2 70% of the time 1.7 -> 1 30% of the time 2.2 Using the \"Stochastic\" mode: 2.2 -> 3 20% of the time 2.2 -> 2 80% of the time -2.5 Using the \"Stochastic\" mode: -2.5 -> -3 50% of the time -2.5 -> -2 50% of the time","title":"Stochastic"},{"location":"getting-started/comparing/","text":"Limitations of Native Inequality Operators For values that cannot be represented as an integer or float accurately, using the native inequality operators will result in erroneous results. In some cases, this might also result in underflow and overflow of the native types. Because of this, all comparisons, including equality comparisons which would normally be == or === in PHP, should be performed using the comparison methods provided on all objects which extend the Number abstract class. Complex Number Limitations The ComplexNumber abstract class, and all of its child classes, only implement the isEqual() method. This is because inequality is poorly defined for complex numbers. There is no sensible and consistent way to evaluate the statement (2+2i) >= (1+1i) , even though one might expect this to return true. The issue is that the inequality methods must return a boolean , and even in the cases where it might be argued that either the true case or false case is well-defined, the opposite case is always ambiguous under any definition of inequality for complex numbers. This makes the return values of such statements meaningless in the context of complex numbers. You Might Not Expect The isEqual() method on the ComplexNumber class and all of its children checks first whether or not the compared value is also a complex number. This means that the following comparison will return false , even though one might expect it to return true : 2+0i == 2 This ambiguity is unlikely to occur in normal usage of the Fermat library, since all math operations which can lead to a zero value for either the real part or the imaginary part will return an instance of ImmutableDecimal instead. The only way to see this behavior is to manually instantiate a complex number with a zero value for one of its parts. Equality There are two types of equality that can be compared using this library: equality of value, and equality of representation. In virtually all cases equality of value is what is intended, and this is accomplished with the isEqual() method. Equality of representation is accomplished with the equals() method, and only returns true if the value being compared has the same value and is an instance of the same class. isEqual(mixed $value) Any $value which is a valid input for Numbers::makeOrDont() can be provided here. Returns true if the values are the same, false otherwise. Scale Only Affects the Result for Significant Figures Two objects with different scale settings will only return false if one of them has significant figures beyond the scale limit of the other. For instance, Numbers::makeOne(5) and Numbers::makeOne(10) will return true when compared using this method, even though internally they would be represented by 1.00000 and 1.0000000000 . equals(object $value) Returns true if the $value is an instance of the same class and it has the same value, false otherwise. Implemented As Part of the Hashable Interface As part of integration with the ext-ds extension, this method has been implemented to satisfy the Hashable interface. This is mainly so that objects which are instances of the Number abstract class can be used as array keys. Inequality These methods are only available on numbers that implement the SimpleNumberInterface . They are safe to use between different types of classes that implement the SimpleNumberInterface , and will perform the necessary conversions to return an answer. isGreaterThan(mixed $value); isLessThan(mixed $value) isGreaterThanOrEqualTo(mixed $value) isLessThanOrEqualTo(mixed $value) Any $value which is a valid input for Numbers::makeOrDont() can be provided to these methods. They are analogous to the corresponding comparison operators in PHP, but are safe to use with the arbitrary scale values found in this library. Sorting Comparison <=> The spaceship operator <=> , which returns 1 , 0 , or -1 to provide sorting order information, would result in many of the same issues described for the isEqual() method. This is handled internally by the BCMath extension. compare(mixed $value) Any $value which is a valid input for Numbers::makeOrDont() can be provided to this method. Returns 1 if the current object is greater than $value , 0 if they are equal, and -1 if the current object is less than $value . Internally Referenced By Other Comparisons All other comparison methods reference this method. This ensures that any return values of all possible comparison methods will remain consistent with each other no matter what implementation of compare() is used. The only exception is ComplexNumber , which implements isEqual() but not compare() .","title":"Comparing Values"},{"location":"getting-started/comparing/#limitations-of-native-inequality-operators","text":"For values that cannot be represented as an integer or float accurately, using the native inequality operators will result in erroneous results. In some cases, this might also result in underflow and overflow of the native types. Because of this, all comparisons, including equality comparisons which would normally be == or === in PHP, should be performed using the comparison methods provided on all objects which extend the Number abstract class. Complex Number Limitations The ComplexNumber abstract class, and all of its child classes, only implement the isEqual() method. This is because inequality is poorly defined for complex numbers. There is no sensible and consistent way to evaluate the statement (2+2i) >= (1+1i) , even though one might expect this to return true. The issue is that the inequality methods must return a boolean , and even in the cases where it might be argued that either the true case or false case is well-defined, the opposite case is always ambiguous under any definition of inequality for complex numbers. This makes the return values of such statements meaningless in the context of complex numbers. You Might Not Expect The isEqual() method on the ComplexNumber class and all of its children checks first whether or not the compared value is also a complex number. This means that the following comparison will return false , even though one might expect it to return true : 2+0i == 2 This ambiguity is unlikely to occur in normal usage of the Fermat library, since all math operations which can lead to a zero value for either the real part or the imaginary part will return an instance of ImmutableDecimal instead. The only way to see this behavior is to manually instantiate a complex number with a zero value for one of its parts.","title":"Limitations of Native Inequality Operators"},{"location":"getting-started/comparing/#equality","text":"There are two types of equality that can be compared using this library: equality of value, and equality of representation. In virtually all cases equality of value is what is intended, and this is accomplished with the isEqual() method. Equality of representation is accomplished with the equals() method, and only returns true if the value being compared has the same value and is an instance of the same class.","title":"Equality"},{"location":"getting-started/comparing/#inequality","text":"These methods are only available on numbers that implement the SimpleNumberInterface . They are safe to use between different types of classes that implement the SimpleNumberInterface , and will perform the necessary conversions to return an answer.","title":"Inequality"},{"location":"getting-started/comparing/#sorting-comparison","text":"The spaceship operator <=> , which returns 1 , 0 , or -1 to provide sorting order information, would result in many of the same issues described for the isEqual() method. This is handled internally by the BCMath extension.","title":"Sorting Comparison &lt;=&gt;"},{"location":"getting-started/concepts/","text":"Concepts Fermat has some vocabulary and concepts that are unique to this library, and they are documented here. Providers A provider in Fermat is a static class which provides a specific functionality to the entire library. It makes this interface available using static methods and wherever possible is permissive about the values it accepts as arguments. What is meant by that is you can, in most cases, pass an implementation of NumberInterface, a numeric string, an int, or a float. Please note that there are exceptions to this general principle and consult the method documentation. The current list of providers, documented in more detail in the section for Providers, is: ArithmeticProvider ConstantProvider PolyfillProvider SequenceProvider SeriesProvider StatsProvider TrigonometryProvider See Also The Providers included in Fermat are documented in more detail under \"Reference\". Types A type in Fermat is an implementation of a class of number or math concept. These are (with the exception of Tuple and NumberCollection ) abstract classes that are meant to be extended into classes which can be instantiated. This is mostly to provide both mutable and immutable versions of each type. A Tuple is meant to be inherently immutable, while a NumberCollection is mean to inherently mutable. The current list of types is: ComplexNumber Coordinate Decimal Expression Fraction Matrix NumberCollection Tuple See Also The Types included in Fermat are documented in more detail under \"Types & Values\". Values A value in Fermat is a usable implementation that can be directly worked with to perform math operations of some kind. These represent concrete concepts or types of values that have specific intended behavior and usage. The current list of values is: Algebra PolynomialFunction Geometry CoordinateSystems CartesianCoordinate CylindricalCoordinate PolarCoordinate SphericalCoordinate ImmutableComplexNumber ImmutableDecimal ImmutableFraction ImmutableMatrix MutableComplexNumber MutableDecimal MutableFraction MutableMatrix See Also The Values included in Fermat are documented in more detail under \"Types & Values\". Scale The basis of this library is being able to provide answers at any requested scale. Scale, as used in this library, is the number of digits after the decimal point which are returned. This is in contrast to significant figures or precision , which represent the numbers of digits returned after the decimal point after trimming all the leading zeros. There are two main reasons for providing scale as the main way of controlling how precise the answer is: It ensures that the string size of values with the same scale are comparable. It is far easier to implement some of the converging series calculations within this library, such as those for trigonometry functions, if scale is used instead of precision. In actual fact, significant figures have much less meaning in the context of a Taylor series or MacLauren series. If precision was used, the library would have to make more assumptions about the intent of calling code, and those assumptions would be less transparent. Scale Does Not Increase With New Operations Unlike significant figures, the scale returned does not change as the number of decimal digits are multiplied or divided. This means that multiplying two numbers that each have 10 digits after the decimal will also return a number with 10 digits after the decimal. This can be fixed by setting the scale of the argument value to the sum of the two scales. Scale Is Only Applied To The Base-10 Form Scale is tracked and managed in base-10. This means that if a number has a base smaller than 10, it will return more digits than the scale would suggest after base conversion, while a number with a base larger than 10 will return fewer digits after the base conversion.","title":"Concepts"},{"location":"getting-started/concepts/#concepts","text":"Fermat has some vocabulary and concepts that are unique to this library, and they are documented here.","title":"Concepts"},{"location":"getting-started/concepts/#providers","text":"A provider in Fermat is a static class which provides a specific functionality to the entire library. It makes this interface available using static methods and wherever possible is permissive about the values it accepts as arguments. What is meant by that is you can, in most cases, pass an implementation of NumberInterface, a numeric string, an int, or a float. Please note that there are exceptions to this general principle and consult the method documentation. The current list of providers, documented in more detail in the section for Providers, is: ArithmeticProvider ConstantProvider PolyfillProvider SequenceProvider SeriesProvider StatsProvider TrigonometryProvider See Also The Providers included in Fermat are documented in more detail under \"Reference\".","title":"Providers"},{"location":"getting-started/concepts/#types","text":"A type in Fermat is an implementation of a class of number or math concept. These are (with the exception of Tuple and NumberCollection ) abstract classes that are meant to be extended into classes which can be instantiated. This is mostly to provide both mutable and immutable versions of each type. A Tuple is meant to be inherently immutable, while a NumberCollection is mean to inherently mutable. The current list of types is: ComplexNumber Coordinate Decimal Expression Fraction Matrix NumberCollection Tuple See Also The Types included in Fermat are documented in more detail under \"Types & Values\".","title":"Types"},{"location":"getting-started/concepts/#values","text":"A value in Fermat is a usable implementation that can be directly worked with to perform math operations of some kind. These represent concrete concepts or types of values that have specific intended behavior and usage. The current list of values is: Algebra PolynomialFunction Geometry CoordinateSystems CartesianCoordinate CylindricalCoordinate PolarCoordinate SphericalCoordinate ImmutableComplexNumber ImmutableDecimal ImmutableFraction ImmutableMatrix MutableComplexNumber MutableDecimal MutableFraction MutableMatrix See Also The Values included in Fermat are documented in more detail under \"Types & Values\".","title":"Values"},{"location":"getting-started/concepts/#scale","text":"The basis of this library is being able to provide answers at any requested scale. Scale, as used in this library, is the number of digits after the decimal point which are returned. This is in contrast to significant figures or precision , which represent the numbers of digits returned after the decimal point after trimming all the leading zeros. There are two main reasons for providing scale as the main way of controlling how precise the answer is: It ensures that the string size of values with the same scale are comparable. It is far easier to implement some of the converging series calculations within this library, such as those for trigonometry functions, if scale is used instead of precision. In actual fact, significant figures have much less meaning in the context of a Taylor series or MacLauren series. If precision was used, the library would have to make more assumptions about the intent of calling code, and those assumptions would be less transparent. Scale Does Not Increase With New Operations Unlike significant figures, the scale returned does not change as the number of decimal digits are multiplied or divided. This means that multiplying two numbers that each have 10 digits after the decimal will also return a number with 10 digits after the decimal. This can be fixed by setting the scale of the argument value to the sum of the two scales. Scale Is Only Applied To The Base-10 Form Scale is tracked and managed in base-10. This means that if a number has a base smaller than 10, it will return more digits than the scale would suggest after base conversion, while a number with a base larger than 10 will return fewer digits after the base conversion.","title":"Scale"},{"location":"getting-started/direct-instantiation/","text":"You can also directly instantiate the Value classes if you wish, and sometimes it is desirable to do so. Mutable vs. Immutable This section details the concrete implementations that are available for the various values in Fermat. Many of these implementations have a Mutable and an Immutable version. For more detailed information about the differences between these, and the situations that each might be useful in, please see the page on mutability .","title":"Direct instantiation"},{"location":"getting-started/exceptions/","text":"Exceptions Used In This Library The exceptions used in Fermat are all provided by the samsara/common package via composer. This is listed as a dependency in the composer.json. All these exceptions are in the namespace Samsara\\Exceptions . Base Exceptions Base\\SystemError : Extends \\Exception . Used for errors that occur because of errors within the library. Base\\UsageError : Extends \\Exception . Used for errors that occur because of incorrect usage of the library. Thrown Exceptions SystemError\\LogicalError\\IncompatibleObjectState : This exception is thrown when the object is in a state that is incompatible with the requested operation. For example, calling factorial() on a DecimalInterface instance that has a decimal value. UsageError\\IntegrityConstraint : This exception is thrown when a data integrity violation is found within a function. Most often this is due to poorly formatted or out of range arguments provided to a function. UsageError\\OptionalExit : This exception is thrown when an error is encountered that may be solved by re-calling the same function with different arguments, for instance by providing a different scale setting. Handling Exceptions From This Library Objects provided in this library are always in a valid state, and any exception thrown results in the object keeping its state from before the function call. Because of this, it may be possible in most situations to use a try/catch block to intelligently handle these exceptions based on the purpose of the numbers and data being provided to the Fermat objects. State Is Preserved Even For Mutable Objects In the event that an exception is thrown, even mutable objects will retain their state from before the method call.","title":"Handling Exceptions"},{"location":"getting-started/exceptions/#exceptions-used-in-this-library","text":"The exceptions used in Fermat are all provided by the samsara/common package via composer. This is listed as a dependency in the composer.json. All these exceptions are in the namespace Samsara\\Exceptions .","title":"Exceptions Used In This Library"},{"location":"getting-started/exceptions/#base-exceptions","text":"Base\\SystemError : Extends \\Exception . Used for errors that occur because of errors within the library. Base\\UsageError : Extends \\Exception . Used for errors that occur because of incorrect usage of the library.","title":"Base Exceptions"},{"location":"getting-started/exceptions/#thrown-exceptions","text":"SystemError\\LogicalError\\IncompatibleObjectState : This exception is thrown when the object is in a state that is incompatible with the requested operation. For example, calling factorial() on a DecimalInterface instance that has a decimal value. UsageError\\IntegrityConstraint : This exception is thrown when a data integrity violation is found within a function. Most often this is due to poorly formatted or out of range arguments provided to a function. UsageError\\OptionalExit : This exception is thrown when an error is encountered that may be solved by re-calling the same function with different arguments, for instance by providing a different scale setting.","title":"Thrown Exceptions"},{"location":"getting-started/exceptions/#handling-exceptions-from-this-library","text":"Objects provided in this library are always in a valid state, and any exception thrown results in the object keeping its state from before the function call. Because of this, it may be possible in most situations to use a try/catch block to intelligently handle these exceptions based on the purpose of the numbers and data being provided to the Fermat objects. State Is Preserved Even For Mutable Objects In the event that an exception is thrown, even mutable objects will retain their state from before the method call.","title":"Handling Exceptions From This Library"},{"location":"getting-started/installation-and-usage/","text":"Installation The Fermat library is available on Packagist , and can be installed with composer: composer require samsara/fermat ^2.0 Dependencies Fermat requires the following packages: ircmaxell/random-lib : Provides cross-platform random number generation riimu/kit-baseconversion : Provides the base conversion library used internally samsara/common : Provides the exception model used in Fermat It also requires the BCMath extension for PHP, however since 7.0 this extension has been included by default in distributions. Improve Performance With Suggested Extensions Fermat suggests that you also install the ext-ds extension and the ext-gmp extension. When present, these help reduce memory usage and computation time. Basic Usage A basic usage of the Fermat library is straightforward and simple to use quickly. 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 // __construct($value, $scale = 10, $base = 10); 6 $five = new ImmutableDecimal ( 5 , 20 ); 7 8 echo $five -> pow ( '1.2' ) -> sin () -> getValue (); 9 // Prints: 0.57733662664006904181 10 echo $five -> getValue (); 11 // Prints: 5 Once you have your number objects created, you can continue using them with your desired scale. Fluency Both immutable and mutable instances can be used with a fluent interface . With mutable objects, this is due to the class being designed with a fluent interface inherently. With immutable objects, this is due to a new instance of the immutable object being returned. This means that each method call on an immutable object which returns an object represents a new instance being created and returned, a new zval being created by PHP, and a new set of memory being allocated. See Also The \"Types & Values\" section contains extensive detail about the exact ways that the value objects can be used.","title":"Installation & Usage"},{"location":"getting-started/installation-and-usage/#installation","text":"The Fermat library is available on Packagist , and can be installed with composer:","title":"Installation"},{"location":"getting-started/installation-and-usage/#basic-usage","text":"A basic usage of the Fermat library is straightforward and simple to use quickly. 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 // __construct($value, $scale = 10, $base = 10); 6 $five = new ImmutableDecimal ( 5 , 20 ); 7 8 echo $five -> pow ( '1.2' ) -> sin () -> getValue (); 9 // Prints: 0.57733662664006904181 10 echo $five -> getValue (); 11 // Prints: 5 Once you have your number objects created, you can continue using them with your desired scale. Fluency Both immutable and mutable instances can be used with a fluent interface . With mutable objects, this is due to the class being designed with a fluent interface inherently. With immutable objects, this is due to a new instance of the immutable object being returned. This means that each method call on an immutable object which returns an object represents a new instance being created and returned, a new zval being created by PHP, and a new set of memory being allocated. See Also The \"Types & Values\" section contains extensive detail about the exact ways that the value objects can be used.","title":"Basic Usage"},{"location":"getting-started/mutability/","text":"Mutability In PHP Mutability is a property of instances of objects in object oriented languages. It refers to whether or not a method on the object changes the data referenced by that object's pointer (or in the case of PHP, its zval). If the method changes the data referenced by the object's zval, it is considered to be mutable. If the method does not change the data referenced, it is considered immutable. In general, mutable objects have no memory of their previous states and evolve with the code as more operations are performed on them. Most objects that represent database results are mutable, such as those used in Doctrine or Eloquent. This reflects two properties of database results: A change in the data should still point to the same database entry. There should only ever be one set of data associated with a single database entry. Thus, mutability is not a situation where all objects should be one way or the other, rather it depends on what the meaning of the data contained in the object is. In PHP, mutability comes with the additional issue of scoping. For most purposes, objects can be treated as if they are passed by-reference at all times. See Also The PHP Documentation contains examples on the specifics of how objects are passed between scopes. While it isn't exactly the same as passing by reference, it behaves in a very similar way in most situations. See the php.net page for more information. This is not an issue for some applications, mainly those where all operations are treated as atomic. However, this is not the case for many mathematical operations. Mutability In Fermat Because of these factors, mutability in Fermat is generally left up to the developer using the library. Both mutable and immutable implementations are provided for most values, and the developer using Fermat is asked to choose which type they want at the time it is created. Mutables Are For Niche Use-Cases In This Library Although there are real use-cases for having a mutable numeric value, as detailed within this page, mutables generally make little sense for numeric types, such as integer or float . The values in this library should be treated more like numeric types that have fluent object interfaces than like normal PHP objects. For this reason, most developers in most situations should use the immutable types provided in this library. Immutables are returned automatically in all situations where the library generates or creates a number, such as from the SequenceProvider or from Numbers::makePi() . Unless you are absolutely certain that your use-case calls for a mutable numeric, it is generally safer to use the immutable values. Mutables have been provided to support specific behaviors seen for native integer and float types, namely reassignment operators like += and /= . The exceptions to this rule are usually noted within this documentation, and nearly always represent an underlying data-structure that should always be treated one way or the other. In other cases, such as with implementations of the Coordinate abstract class, the reasons for making all the value classes one way or the other are related to the underlying math concepts they are meant to represent having some of the same properties as database results: that they should always point to the same dataset and that there should only ever be one representation of a given dataset. Choosing Between The Two Which format you use is entirely up to you, but there are some situations that lend themselves more to one instead of the other. First, lets look at the differences in your code that using one or the other might cause by taking the number 5 and adding 10. Example 1: Basic Usage Of Both Immutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 $balance = new ImmutableDecimal ( 5 ); 6 7 $newBalance = $balance -> add ( 10 ); 8 9 echo 'Current Balance: ' . $newBalance -> getValue (); 10 // Prints: 'Current Balance: 15' Mutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\MutableDecimal ; 4 5 $balance = new MutableDecimal ( 5 ); 6 7 $balance -> add ( 10 ); 8 9 echo 'Current Balance: ' . $balance -> getValue (); 10 // Prints: 'Current Balance: 15' How To Create Equivalence Between the Two In general, you can get the behavior of mutable objects with immutable objects by reassigning the new value to the same variable. This allows the state of the variable to evolve throughout the program, and results in the instance that was referenced in the previous line having its zval count reduced to zero. This allows garbage collection in PHP to periodically clean up all your orphaned instances. So then, why ever use immutable objects? It seems like using immutables will use a much larger amount of memory while doing the same exact thing. Well, consider the next example. Example 2: Side Effects Immutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 $oldBalance = new ImmutableDecimal ( 5 ); 6 $deposit = new ImmutableDecimal ( 10 ); 7 8 $newBalance = $oldBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 5 15 // Deposit: 10 16 // Current Balance: 15 Mutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\MutableDecimal ; 4 5 $oldBalance = new MutableDecimal ( 5 ); 6 $deposit = new MutableDecimal ( 10 ); 7 8 $newBalance = $oldBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 15 15 // Deposit: 10 16 // Current Balance: 15 Side Effects and Consistency As we can see from the second set of examples, assigning a value from a mutable function call can have side effects beyond the variable assignment . In fact, preserving the value of the original object requires a lot of attention to detail in the calling code. To achieve the same result as the immutable example with the mutable example, we would need to make a whole new object just for the calculation, which would look something like this: Example 3: Mutables Used Without Side Effects 1 <?php 2 use Samsara\\Fermat\\Values\\MutableDecimal ; 3 4 $oldBalance = new MutableDecimal ( 5 ); 5 $deposit = new MutableDecimal ( 10 ); 6 7 $newBalance = new MutableDecimal ( $oldBalance -> getValue ()); 8 $newBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 5 15 // Deposit: 10 16 // Current Balance: 15 Creating a new object on the fly to perform a calculation is in fact exactly how the implementation of immutables in Fermat is accomplished. Internally, any time a calculation has been performed, the new string with the resulting answer is stored in a newly created instance, instead of the instance that initiated the calculation. This can be seen if you look at the different implementations of the setValue() abstract method in the ImmutableDecimal and MutableDecimal classes. Implementations Of setValue() ImmutableDecimal 1 <?php 2 class ImmutableDecimal { 3 protected function setValue ( $value , $scale = null , $base = 10 ) 4 { 5 /* omitted transformations and sanity checks */ 6 7 return new ImmutableDecimal ( $value , $scale , $base ); 8 } 9 } MutableDecimal 1 <?php 2 class MutableDecimal { 3 protected function setValue ( $value , $scale = null , $base = 10 ) 4 { 5 /* omitted transformations and sanity checks */ 6 7 $this -> value = $this -> translateValue ( $value ); 8 9 return $this ; 10 } 11 } The ImmutableDecimal implementation returns a new instance, while the MutableDecimal implementation sets the internal $value property directly and returns the current instance. This is the only meaningful difference between the two classes. setValue() As A Protected Method For both mutable and immutable values, the setValue() method has a visibility of protected , preventing the calling scope from using it. This is intentional, as the values in these objects are meant to represent something closer to a memory address than a normal variable. Allowing setValue() to be called directly, even for mutable objects, could lead to some of the same problems that make memory address safety an issue for desktop applications. Each instance can instead be seen as a Finite-State Machine that evolves according to the state transitions defined on the object, i.e. the mathematical methods that are available on that class. This correctly reflects how math itself works, and helps prevent the developer from accidentally \"breaking\" math by inadvertantly inserting erroneous data in the middle of a series of calculations. In this way, the immutable values act as time saving measures and sanity preserving measures in the case that you want to ensure side effects don't occur. Instead of manually creating new instances for every calculation and running the risk of forgetting on one line in a large program, you can simply request an instance of ImmutableDecimal and it will do so automatically. The downside to this is that the newly created object is not referenced anywhere except in the return value. Without a reference, the object becomes inaccessible if you do not assign the returned result to a variable in the calling scope. Guidelines On When To Use Each Again, the exact usage of either is up to the developer, and it is possible to accomplish the same end result with either if the right design patterns are used. However, below is a brief rundown of when each is generally preferable. Mutables May Be Preferred When The number represents a physical state or evolving state that can only move in one direction, such as with a hashing function The number represents a value which always depends on its previous value, such as recursively calculating a sum, or compiling changes to a total from a ledger of financial entries The number represents a value that has defined state-dependent behavior, such as in a State Machine Immutables May Be Preferred When The number represents data that may be used in multiple, unrelated contexts, such as using a User ID to calculate other values The number represents a concrete state, and the result of the equation will be a derived or dynamically generated value that doesn't actually exist within the data, such as using a population value to estimate average income The number represents a value that may be used multiple times for separate calculations without changing, such as the mean in a normal distribution In general, for any given situation, one of these options will lead to cleaner, simpler, and easier to maintain code, while the other will lead to more fragile, harder to understand, and difficult to maintain code. Which is which depends very much on the specific usage of that piece of data within your application.","title":"Mutable vs. Immutable"},{"location":"getting-started/mutability/#mutability-in-php","text":"Mutability is a property of instances of objects in object oriented languages. It refers to whether or not a method on the object changes the data referenced by that object's pointer (or in the case of PHP, its zval). If the method changes the data referenced by the object's zval, it is considered to be mutable. If the method does not change the data referenced, it is considered immutable. In general, mutable objects have no memory of their previous states and evolve with the code as more operations are performed on them. Most objects that represent database results are mutable, such as those used in Doctrine or Eloquent. This reflects two properties of database results: A change in the data should still point to the same database entry. There should only ever be one set of data associated with a single database entry. Thus, mutability is not a situation where all objects should be one way or the other, rather it depends on what the meaning of the data contained in the object is. In PHP, mutability comes with the additional issue of scoping. For most purposes, objects can be treated as if they are passed by-reference at all times. See Also The PHP Documentation contains examples on the specifics of how objects are passed between scopes. While it isn't exactly the same as passing by reference, it behaves in a very similar way in most situations. See the php.net page for more information. This is not an issue for some applications, mainly those where all operations are treated as atomic. However, this is not the case for many mathematical operations.","title":"Mutability In PHP"},{"location":"getting-started/mutability/#mutability-in-fermat","text":"Because of these factors, mutability in Fermat is generally left up to the developer using the library. Both mutable and immutable implementations are provided for most values, and the developer using Fermat is asked to choose which type they want at the time it is created. Mutables Are For Niche Use-Cases In This Library Although there are real use-cases for having a mutable numeric value, as detailed within this page, mutables generally make little sense for numeric types, such as integer or float . The values in this library should be treated more like numeric types that have fluent object interfaces than like normal PHP objects. For this reason, most developers in most situations should use the immutable types provided in this library. Immutables are returned automatically in all situations where the library generates or creates a number, such as from the SequenceProvider or from Numbers::makePi() . Unless you are absolutely certain that your use-case calls for a mutable numeric, it is generally safer to use the immutable values. Mutables have been provided to support specific behaviors seen for native integer and float types, namely reassignment operators like += and /= . The exceptions to this rule are usually noted within this documentation, and nearly always represent an underlying data-structure that should always be treated one way or the other. In other cases, such as with implementations of the Coordinate abstract class, the reasons for making all the value classes one way or the other are related to the underlying math concepts they are meant to represent having some of the same properties as database results: that they should always point to the same dataset and that there should only ever be one representation of a given dataset.","title":"Mutability In Fermat"},{"location":"getting-started/mutability/#choosing-between-the-two","text":"Which format you use is entirely up to you, but there are some situations that lend themselves more to one instead of the other. First, lets look at the differences in your code that using one or the other might cause by taking the number 5 and adding 10. Example 1: Basic Usage Of Both Immutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 $balance = new ImmutableDecimal ( 5 ); 6 7 $newBalance = $balance -> add ( 10 ); 8 9 echo 'Current Balance: ' . $newBalance -> getValue (); 10 // Prints: 'Current Balance: 15' Mutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\MutableDecimal ; 4 5 $balance = new MutableDecimal ( 5 ); 6 7 $balance -> add ( 10 ); 8 9 echo 'Current Balance: ' . $balance -> getValue (); 10 // Prints: 'Current Balance: 15'","title":"Choosing Between The Two"},{"location":"getting-started/mutability/#how-to-create-equivalence-between-the-two","text":"In general, you can get the behavior of mutable objects with immutable objects by reassigning the new value to the same variable. This allows the state of the variable to evolve throughout the program, and results in the instance that was referenced in the previous line having its zval count reduced to zero. This allows garbage collection in PHP to periodically clean up all your orphaned instances. So then, why ever use immutable objects? It seems like using immutables will use a much larger amount of memory while doing the same exact thing. Well, consider the next example. Example 2: Side Effects Immutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\ImmutableDecimal ; 4 5 $oldBalance = new ImmutableDecimal ( 5 ); 6 $deposit = new ImmutableDecimal ( 10 ); 7 8 $newBalance = $oldBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 5 15 // Deposit: 10 16 // Current Balance: 15 Mutable 1 <?php 2 3 use Samsara\\Fermat\\Values\\MutableDecimal ; 4 5 $oldBalance = new MutableDecimal ( 5 ); 6 $deposit = new MutableDecimal ( 10 ); 7 8 $newBalance = $oldBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 15 15 // Deposit: 10 16 // Current Balance: 15","title":"How To Create Equivalence Between the Two"},{"location":"getting-started/mutability/#side-effects-and-consistency","text":"As we can see from the second set of examples, assigning a value from a mutable function call can have side effects beyond the variable assignment . In fact, preserving the value of the original object requires a lot of attention to detail in the calling code. To achieve the same result as the immutable example with the mutable example, we would need to make a whole new object just for the calculation, which would look something like this: Example 3: Mutables Used Without Side Effects 1 <?php 2 use Samsara\\Fermat\\Values\\MutableDecimal ; 3 4 $oldBalance = new MutableDecimal ( 5 ); 5 $deposit = new MutableDecimal ( 10 ); 6 7 $newBalance = new MutableDecimal ( $oldBalance -> getValue ()); 8 $newBalance -> add ( $deposit ); 9 10 echo 'Original Balance: ' . $oldBalance . PHP_EOL ; 11 echo 'Deposit: ' . $deposit . PHP_EOL ; 12 echo 'Current Balance: ' . $newBalance ; 13 // Prints: 14 // Original Balance: 5 15 // Deposit: 10 16 // Current Balance: 15 Creating a new object on the fly to perform a calculation is in fact exactly how the implementation of immutables in Fermat is accomplished. Internally, any time a calculation has been performed, the new string with the resulting answer is stored in a newly created instance, instead of the instance that initiated the calculation. This can be seen if you look at the different implementations of the setValue() abstract method in the ImmutableDecimal and MutableDecimal classes. Implementations Of setValue() ImmutableDecimal 1 <?php 2 class ImmutableDecimal { 3 protected function setValue ( $value , $scale = null , $base = 10 ) 4 { 5 /* omitted transformations and sanity checks */ 6 7 return new ImmutableDecimal ( $value , $scale , $base ); 8 } 9 } MutableDecimal 1 <?php 2 class MutableDecimal { 3 protected function setValue ( $value , $scale = null , $base = 10 ) 4 { 5 /* omitted transformations and sanity checks */ 6 7 $this -> value = $this -> translateValue ( $value ); 8 9 return $this ; 10 } 11 } The ImmutableDecimal implementation returns a new instance, while the MutableDecimal implementation sets the internal $value property directly and returns the current instance. This is the only meaningful difference between the two classes. setValue() As A Protected Method For both mutable and immutable values, the setValue() method has a visibility of protected , preventing the calling scope from using it. This is intentional, as the values in these objects are meant to represent something closer to a memory address than a normal variable. Allowing setValue() to be called directly, even for mutable objects, could lead to some of the same problems that make memory address safety an issue for desktop applications. Each instance can instead be seen as a Finite-State Machine that evolves according to the state transitions defined on the object, i.e. the mathematical methods that are available on that class. This correctly reflects how math itself works, and helps prevent the developer from accidentally \"breaking\" math by inadvertantly inserting erroneous data in the middle of a series of calculations. In this way, the immutable values act as time saving measures and sanity preserving measures in the case that you want to ensure side effects don't occur. Instead of manually creating new instances for every calculation and running the risk of forgetting on one line in a large program, you can simply request an instance of ImmutableDecimal and it will do so automatically. The downside to this is that the newly created object is not referenced anywhere except in the return value. Without a reference, the object becomes inaccessible if you do not assign the returned result to a variable in the calling scope.","title":"Side Effects and Consistency"},{"location":"getting-started/mutability/#guidelines-on-when-to-use-each","text":"Again, the exact usage of either is up to the developer, and it is possible to accomplish the same end result with either if the right design patterns are used. However, below is a brief rundown of when each is generally preferable.","title":"Guidelines On When To Use Each"},{"location":"getting-started/using-factories/","text":".katex img { object-fit: fill; padding: unset; display: block; position: absolute; width: 100%; height: inherit; } Fermat provides factory classes to make it easier to get instances of the various Value classes. The available factories are: Samsara\\Fermat\\Collections Samsara\\Fermat\\ComplexNumbers Samsara\\Fermat\\Matrices Samsara\\Fermat\\Numbers All factories are classes that have only static methods and constants. The Collections Factory Class The Samsara\\Fermat\\Collections factory class currently has no methods or constants, and exists as a placeholder. The ComplexNumbers Factory Class The Samsara\\Fermat\\ComplexNumbers factory class allows you to create instances of the Value classes which implement the ComplexNumberInterface . Available Constants The following constants are available on the ComplexNumbers class. ComplexNumbers::IMMUTABLE_COMPLEX type string value The fully qualified class name of the ImmutableComplexNumber class. ComplexNumbers::MUTABLE_COMPLEX type string value The fully qualified class name of the MutableComplexNumber class. Available Factory Methods The following factory methods are available on the ComplexNumbers class. ComplexNumbers::make(string $type, string|array|NumberCollectionInterface $value) $type The type (mutable or immutable) of ComplexNumber to create $value The initial value of the created instance; see notes below return The instance created from the given inputs; the instance will extend ComplexNumber and implement the ComplexNumberInterface If the value is a string , it is assumed to be in the format: REAL+IMAGINARY or REAL-IMAGINARY Note In string format, the input for this factory method MAY have a minus sign in front of the real part, but MUST have either a plus or minus sign in front of the imaginary part. The sign is applied to the number that follows and is stored in the ImmutableDecimal for that number. You may also provide either an array or a NumberCollection that have exactly two values which implement the SimpleNumberInterface . Warning The real part must have a key of 0 , and the imaginary part must have a key of 1 in the given array or NumberCollection . The Matrices Factory Class The Samsara\\Fermat\\Matrices factory class provides access to several pre-built matrices that may be useful in common situations. Available Constants The following constants are available on the Matrices class. Matrices::IMMUTABLE_MATRIX type string value The fully qualified class name of the ImmutableMatrix class. Matrices::MUTABLE_MATRIX type string value The fully qualified class name of the MutableMatrix class. Available Factory Methods The following factory methods are available on the Matrices class. Matrices::zeroMatrix(string $type, int $rows, int $columns) $type The type (mutable or immutable) of Matrix to create $rows The number of rows the generated matrix should have $columns The number of columns the generated matrix should have return An instance of the specified matrix type with the given dimensions where all values in the matrix are the number zero For Example A zero matrix of two rows and three columns would look like: 1 [0 0 0] 2 [0 0 0] Matrices::onesMatrix(string $type, int $rows, int $columns) $type The type (mutable or immutable) of Matrix to create $rows The number of rows the generated matrix should have $columns The number of columns the generated matrix should have return An instance of the specified matrix type with the given dimensions where all values in the matrix are the number one For Example A ones matrix of two rows and three columns would look like: 1 [1 1 1] 2 [1 1 1] Matrices::identityMatrix(string $type, int $size) $type The type (mutable or immutable) of Matrix to create $size The number of rows and columns the generated matrix should have return A square matrix where the dimensions match the integer given in $size . This matrix is an identity matrix, which is often used in matrix math, where the diagonal consists of ones, and all other values are zero For Example An identity matrix of size three would look like: 1 [1 0 0] 2 [0 1 0] 3 [0 0 1] Matrices::cofactorMatrix(string $type, int $size) $type The type (mutable or immutable) of Matrix to create $size The number of rows and columns the generated matrix should have return A square matrix where the dimensions match the integer given in $size . The matrix is filled with alternating values of 1 and -1 in a checkerboard pattern, starting with positive 1 in position [0, 0]. When multiplied by another matrix, this will swap the sign of every other value in the matrix. For Example A cofactor matrix of size three would look like: 1 [+ - +] 2 [- + -] 3 [+ - +] The Numbers Factory Class The Samsara\\Fermat\\Numbers factory class provides a way to use the Value classes which implement the SimpleNumberInterface in Fermat without being as specific as those classes may require. Consider the following code: Available Constants The following constants are available on the Numbers class. Numbers::IMMUTABLE type string value The fully qualified class name of the ImmutableDecimal class. Numbers::MUTABLE type string value The fully qualified class name of the MutableDecimal class. Numbers::IMMUTABLE_FRACTION type string value The fully qualified class name of the ImmutableFraction class. Numbers::MUTABLE_FRACTION type string value The fully qualified class name of the MutableFraction class. Numbers::PI type string value The value of the constant pi ( \u03c0 \\pi \u03c0 ) pre-computed to 100 decimal places. Numbers::TAU type string value The value of the constant tau ( \u03c4 \\tau \u03c4 ) pre-computed to 100 decimal places. This is equivalent to ( 2 \u03c0 2\\pi 2 \u03c0 ). Numbers::E type string value The value of Euler's constant ( e e e ) pre-computed to 100 decimal places. Numbers::GOLDEN_RATIO type string value The value of the Golden Ratio ( \u03c6 \\varphi \u03c6 ) pre-computed to 100 decimal places. Numbers::LN_10 type string value The value of the natural logarithm of 10 pre-computed to 100 decimal places. Numbers::IMMUTABLE type string value The value of i i i^i i i pre-computed to 100 decimal places. Available Factory Methods The following factory methods are available on the Numbers class. Numbers::make(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to create $value The value to create the instance with $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type created with the provided arguments as parameters This factory method returns an instance of DecimalInterface or FractionInterface , depending on the $type given and the $value provided. Type Can Be An Instance Instead of providing a fully qualified class name for $type , you can provide an instance of a supported object. The make() function will attempt to force the $value into that type. Type Must Be A Supported FQCN or Class If $type is the fully qualified class name or instance of an object other than ImmutableDecimal , MutableDecimal , ImmutableFraction , or MutableFraction , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeFromBase10(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to create $value The value to create the instance with $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type created with the provided arguments as parameters This factory method will created a base-10 instance of $type using the provided $value , then convert that value in the $base provided. This allows you to provide a $value in base-10, but get an instance in a different base. Numbers::makeOrDont(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to ensure $value The original value which was provided $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type with the provided $value ; if a new instance is created, it has the given $scale and $base This factory method will coerce the given $value into the requested $type . Unlike using direct instantiation , this factory will perform all the correct conversions on the various possible values necessary to ensure a valid instance is constructed. If the provided $value already matches the requested $type , then it is returned without modification. This makes the makeOrDont() factory ideal for accepting any possible valid constructor value as an input while also guaranteeing that your implementation is working with a particular value. This is how the math operations such as add($num) are able to accept virtually any input directly. Arrays of Values An array can be provided as the $value argument to this function. If it is, then a recursive call on Numbers::makeOrDont() is made. This will be done at any level of nested arrays. Low Cost Function Call This factory method returns the provided value after only making a call to is_object() and a single use of instanceof if the provided $value matches the requested $type . In general, it is written to build the requested $type in the most efficient way possible given the provided inputs. This makes calls to this factory method very low cost from both a memory and computation perspective if you need the value to be a guaranteed instance of a particular class. Mixed Argument Limitations The $values argument is listed in this documentation as mixed . In fact, the valid input types are: An integer A float A string that contains only a single number in base 10 A string that contains only a single number in base 10 with the i character at the end, denoting an imaginary value An object that implements NumberInterface If the provided $value matches none of these, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeFractionFromString(string $type, string $value, int $base = 10) $type The type of SimpleNumberInterface implementation to ensure $value The original value which was provided $base The base of the instance created return An instance of the specified FractionInterface class with the provided arguments as parameters; translates the string $value into the correct constructor arguments This factory method will take a string as its input and provide an instance of either ImmutableFraction or MutableFraction depending on the value given for $type . Type Must Be A Supported FQCN If $type is the fully qualified class name of an object other than ImmutableFraction or MutableFraction , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Value Must Contain at Most One Fraction Bar '/' If $value contains more than one fraction bar, which is assumed to be represented by the character / , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makePi(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number pi ( \u03c0 \\pi \u03c0 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::PI constant. If a scale of greater than 100 is requested, then a call is made to ConstantProvider::makePi() which computes digits of pi using the most efficient computational method currently available. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeTau(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number tau ( \u03c4 \\tau \u03c4 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::TAU constant. If a scale of greater than 100 is requested, then a call is made to Numbers::makePi() which uses the methods described above, after which the result is multiplied by 2. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::make2Pi(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 2pi ( 2 \u03c0 2\\pi 2 \u03c0 ) as an instance of ImmutableNumber to the requested $scale . This factory method is an alias for Numbers::makeTau() . Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeE(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return Euler's number ( e e e ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::E constant. If a scale of greater than 100 is requested, then a call is made to ConstantProvider::makeE() which uses a fast converging series to calculate digits of e. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeGoldenRatio(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The golden ratio ( \u03c6 \\varphi \u03c6 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::GOLDEN_RATION constant. Scale Must Be 1-100 If a scale of less than 1 or greater than 100 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeNaturalLog10(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The natural log of 10 as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::LN_10 constant. If a scale of greater than 100 is requested, then an exception is thrown. Scale Must Be 1-100 If a scale of less than 1 or greater than 100 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeOne(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 1 as an instance of ImmutableNumber to the requested $scale . If $scale is null, then the instance returned will have a scale of 100. Numbers::makeZero(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 0 as an instance of ImmutableNumber to the requested $scale . If $scale is null, then the instance returned will have a scale of 100. Static Methods The Numbers factory class also has two static methods that work as a global variable for the Fermat library. Numbers::getDefaultCalcMode() return The current value of the protected parameter Numbers::$defaultCalcMode By default, this value is set to Selectable::CALC_MODE_PRECISION , resulting in the arbitrary scale implementations being used for all math functions. For Internal Use This function is meant to be called within the constructors of values that implement the NumberInterface and which use the provided arithmetic traits. It is likely to have limited utility outside of these situations. Numbers::setDefaultCalcMode(int $mode) $mode The calculation mode integer; expected to match constant values on Selectable return Void This static method sets the protected parameter Numbers::$defaultCalcMode to the provided $mode . The Fermat library assumes that only values which are constants on the Selectable class are used as inputs for this function. Using other values for $mode may be possible in the event you are extending the Fermat classes with your own implementations, however an unknown $mode will cause the classes provided in this library to fall back to Selectable::CALC_MODE_PRECISION . This behavior could be changed by overriding the methods defined in the ArithmeticSelectionTrait . See Also For more information on the calculation modes available in Fermat, see the page on Calculation Modes . For more information on extending these values, please see the documentation in the \"Extending\" section.","title":"Using The Factories"},{"location":"getting-started/using-factories/#the-collections-factory-class","text":"The Samsara\\Fermat\\Collections factory class currently has no methods or constants, and exists as a placeholder.","title":"The Collections Factory Class"},{"location":"getting-started/using-factories/#the-complexnumbers-factory-class","text":"The Samsara\\Fermat\\ComplexNumbers factory class allows you to create instances of the Value classes which implement the ComplexNumberInterface .","title":"The ComplexNumbers Factory Class"},{"location":"getting-started/using-factories/#available-constants","text":"The following constants are available on the ComplexNumbers class. ComplexNumbers::IMMUTABLE_COMPLEX type string value The fully qualified class name of the ImmutableComplexNumber class. ComplexNumbers::MUTABLE_COMPLEX type string value The fully qualified class name of the MutableComplexNumber class.","title":"Available Constants"},{"location":"getting-started/using-factories/#available-factory-methods","text":"The following factory methods are available on the ComplexNumbers class. ComplexNumbers::make(string $type, string|array|NumberCollectionInterface $value) $type The type (mutable or immutable) of ComplexNumber to create $value The initial value of the created instance; see notes below return The instance created from the given inputs; the instance will extend ComplexNumber and implement the ComplexNumberInterface If the value is a string , it is assumed to be in the format: REAL+IMAGINARY or REAL-IMAGINARY Note In string format, the input for this factory method MAY have a minus sign in front of the real part, but MUST have either a plus or minus sign in front of the imaginary part. The sign is applied to the number that follows and is stored in the ImmutableDecimal for that number. You may also provide either an array or a NumberCollection that have exactly two values which implement the SimpleNumberInterface . Warning The real part must have a key of 0 , and the imaginary part must have a key of 1 in the given array or NumberCollection .","title":"Available Factory Methods"},{"location":"getting-started/using-factories/#the-matrices-factory-class","text":"The Samsara\\Fermat\\Matrices factory class provides access to several pre-built matrices that may be useful in common situations.","title":"The Matrices Factory Class"},{"location":"getting-started/using-factories/#available-constants_1","text":"The following constants are available on the Matrices class. Matrices::IMMUTABLE_MATRIX type string value The fully qualified class name of the ImmutableMatrix class. Matrices::MUTABLE_MATRIX type string value The fully qualified class name of the MutableMatrix class.","title":"Available Constants"},{"location":"getting-started/using-factories/#available-factory-methods_1","text":"The following factory methods are available on the Matrices class. Matrices::zeroMatrix(string $type, int $rows, int $columns) $type The type (mutable or immutable) of Matrix to create $rows The number of rows the generated matrix should have $columns The number of columns the generated matrix should have return An instance of the specified matrix type with the given dimensions where all values in the matrix are the number zero For Example A zero matrix of two rows and three columns would look like: 1 [0 0 0] 2 [0 0 0] Matrices::onesMatrix(string $type, int $rows, int $columns) $type The type (mutable or immutable) of Matrix to create $rows The number of rows the generated matrix should have $columns The number of columns the generated matrix should have return An instance of the specified matrix type with the given dimensions where all values in the matrix are the number one For Example A ones matrix of two rows and three columns would look like: 1 [1 1 1] 2 [1 1 1] Matrices::identityMatrix(string $type, int $size) $type The type (mutable or immutable) of Matrix to create $size The number of rows and columns the generated matrix should have return A square matrix where the dimensions match the integer given in $size . This matrix is an identity matrix, which is often used in matrix math, where the diagonal consists of ones, and all other values are zero For Example An identity matrix of size three would look like: 1 [1 0 0] 2 [0 1 0] 3 [0 0 1] Matrices::cofactorMatrix(string $type, int $size) $type The type (mutable or immutable) of Matrix to create $size The number of rows and columns the generated matrix should have return A square matrix where the dimensions match the integer given in $size . The matrix is filled with alternating values of 1 and -1 in a checkerboard pattern, starting with positive 1 in position [0, 0]. When multiplied by another matrix, this will swap the sign of every other value in the matrix. For Example A cofactor matrix of size three would look like: 1 [+ - +] 2 [- + -] 3 [+ - +]","title":"Available Factory Methods"},{"location":"getting-started/using-factories/#the-numbers-factory-class","text":"The Samsara\\Fermat\\Numbers factory class provides a way to use the Value classes which implement the SimpleNumberInterface in Fermat without being as specific as those classes may require. Consider the following code:","title":"The Numbers Factory Class"},{"location":"getting-started/using-factories/#available-constants_2","text":"The following constants are available on the Numbers class. Numbers::IMMUTABLE type string value The fully qualified class name of the ImmutableDecimal class. Numbers::MUTABLE type string value The fully qualified class name of the MutableDecimal class. Numbers::IMMUTABLE_FRACTION type string value The fully qualified class name of the ImmutableFraction class. Numbers::MUTABLE_FRACTION type string value The fully qualified class name of the MutableFraction class. Numbers::PI type string value The value of the constant pi ( \u03c0 \\pi \u03c0 ) pre-computed to 100 decimal places. Numbers::TAU type string value The value of the constant tau ( \u03c4 \\tau \u03c4 ) pre-computed to 100 decimal places. This is equivalent to ( 2 \u03c0 2\\pi 2 \u03c0 ). Numbers::E type string value The value of Euler's constant ( e e e ) pre-computed to 100 decimal places. Numbers::GOLDEN_RATIO type string value The value of the Golden Ratio ( \u03c6 \\varphi \u03c6 ) pre-computed to 100 decimal places. Numbers::LN_10 type string value The value of the natural logarithm of 10 pre-computed to 100 decimal places. Numbers::IMMUTABLE type string value The value of i i i^i i i pre-computed to 100 decimal places.","title":"Available Constants"},{"location":"getting-started/using-factories/#available-factory-methods_2","text":"The following factory methods are available on the Numbers class. Numbers::make(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to create $value The value to create the instance with $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type created with the provided arguments as parameters This factory method returns an instance of DecimalInterface or FractionInterface , depending on the $type given and the $value provided. Type Can Be An Instance Instead of providing a fully qualified class name for $type , you can provide an instance of a supported object. The make() function will attempt to force the $value into that type. Type Must Be A Supported FQCN or Class If $type is the fully qualified class name or instance of an object other than ImmutableDecimal , MutableDecimal , ImmutableFraction , or MutableFraction , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeFromBase10(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to create $value The value to create the instance with $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type created with the provided arguments as parameters This factory method will created a base-10 instance of $type using the provided $value , then convert that value in the $base provided. This allows you to provide a $value in base-10, but get an instance in a different base. Numbers::makeOrDont(string $type, mixed $value, ?int $scale = null, int $base = 10) $type The type of SimpleNumberInterface implementation to ensure $value The original value which was provided $scale The maximum number of digits after the decimal that the instance can have $base The base of the instance created return An instance of the specified $type with the provided $value ; if a new instance is created, it has the given $scale and $base This factory method will coerce the given $value into the requested $type . Unlike using direct instantiation , this factory will perform all the correct conversions on the various possible values necessary to ensure a valid instance is constructed. If the provided $value already matches the requested $type , then it is returned without modification. This makes the makeOrDont() factory ideal for accepting any possible valid constructor value as an input while also guaranteeing that your implementation is working with a particular value. This is how the math operations such as add($num) are able to accept virtually any input directly. Arrays of Values An array can be provided as the $value argument to this function. If it is, then a recursive call on Numbers::makeOrDont() is made. This will be done at any level of nested arrays. Low Cost Function Call This factory method returns the provided value after only making a call to is_object() and a single use of instanceof if the provided $value matches the requested $type . In general, it is written to build the requested $type in the most efficient way possible given the provided inputs. This makes calls to this factory method very low cost from both a memory and computation perspective if you need the value to be a guaranteed instance of a particular class. Mixed Argument Limitations The $values argument is listed in this documentation as mixed . In fact, the valid input types are: An integer A float A string that contains only a single number in base 10 A string that contains only a single number in base 10 with the i character at the end, denoting an imaginary value An object that implements NumberInterface If the provided $value matches none of these, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeFractionFromString(string $type, string $value, int $base = 10) $type The type of SimpleNumberInterface implementation to ensure $value The original value which was provided $base The base of the instance created return An instance of the specified FractionInterface class with the provided arguments as parameters; translates the string $value into the correct constructor arguments This factory method will take a string as its input and provide an instance of either ImmutableFraction or MutableFraction depending on the value given for $type . Type Must Be A Supported FQCN If $type is the fully qualified class name of an object other than ImmutableFraction or MutableFraction , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Value Must Contain at Most One Fraction Bar '/' If $value contains more than one fraction bar, which is assumed to be represented by the character / , an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makePi(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number pi ( \u03c0 \\pi \u03c0 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::PI constant. If a scale of greater than 100 is requested, then a call is made to ConstantProvider::makePi() which computes digits of pi using the most efficient computational method currently available. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeTau(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number tau ( \u03c4 \\tau \u03c4 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::TAU constant. If a scale of greater than 100 is requested, then a call is made to Numbers::makePi() which uses the methods described above, after which the result is multiplied by 2. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::make2Pi(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 2pi ( 2 \u03c0 2\\pi 2 \u03c0 ) as an instance of ImmutableNumber to the requested $scale . This factory method is an alias for Numbers::makeTau() . Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeE(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return Euler's number ( e e e ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::E constant. If a scale of greater than 100 is requested, then a call is made to ConstantProvider::makeE() which uses a fast converging series to calculate digits of e. Scale Must Be Positive If a scale of less than 1 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeGoldenRatio(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The golden ratio ( \u03c6 \\varphi \u03c6 ) as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::GOLDEN_RATION constant. Scale Must Be 1-100 If a scale of less than 1 or greater than 100 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeNaturalLog10(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The natural log of 10 as an instance of ImmutableNumber to the requested $scale . If no $scale is given, then the value is returned with a scale of 100. If a scale of 100 or less is requested, then the instance is constructed from the Numbers::LN_10 constant. If a scale of greater than 100 is requested, then an exception is thrown. Scale Must Be 1-100 If a scale of less than 1 or greater than 100 is requested, an exception of type Samsara\\Exceptions\\UsageError\\IntegrityConstraint is thrown. Numbers::makeOne(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 1 as an instance of ImmutableNumber to the requested $scale . If $scale is null, then the instance returned will have a scale of 100. Numbers::makeZero(?int $scale = null) $scale The maximum number of digits after the decimal that the instance can have return The number 0 as an instance of ImmutableNumber to the requested $scale . If $scale is null, then the instance returned will have a scale of 100.","title":"Available Factory Methods"},{"location":"getting-started/using-factories/#static-methods","text":"The Numbers factory class also has two static methods that work as a global variable for the Fermat library. Numbers::getDefaultCalcMode() return The current value of the protected parameter Numbers::$defaultCalcMode By default, this value is set to Selectable::CALC_MODE_PRECISION , resulting in the arbitrary scale implementations being used for all math functions. For Internal Use This function is meant to be called within the constructors of values that implement the NumberInterface and which use the provided arithmetic traits. It is likely to have limited utility outside of these situations. Numbers::setDefaultCalcMode(int $mode) $mode The calculation mode integer; expected to match constant values on Selectable return Void This static method sets the protected parameter Numbers::$defaultCalcMode to the provided $mode . The Fermat library assumes that only values which are constants on the Selectable class are used as inputs for this function. Using other values for $mode may be possible in the event you are extending the Fermat classes with your own implementations, however an unknown $mode will cause the classes provided in this library to fall back to Selectable::CALC_MODE_PRECISION . This behavior could be changed by overriding the methods defined in the ArithmeticSelectionTrait . See Also For more information on the calculation modes available in Fermat, see the page on Calculation Modes . For more information on extending these values, please see the documentation in the \"Extending\" section.","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Collections/","text":"Samsara\\Fermat > Collections No description available This documentation was generated with Roster .","title":"Collections"},{"location":"roster/latest/Samsara/Fermat/Collections/#samsarafermat-collections","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat &gt; Collections"},{"location":"roster/latest/Samsara/Fermat/Numbers/","text":"Samsara\\Fermat > Numbers No description available Variables & Data Class Constants Numbers::MUTABLE value 'Samsara\\Fermat\\Values\\MutableDecimal' Numbers::IMMUTABLE value 'Samsara\\Fermat\\Values\\ImmutableDecimal' Numbers::MUTABLE_FRACTION value 'Samsara\\Fermat\\Values\\MutableFraction' Numbers::IMMUTABLE_FRACTION value 'Samsara\\Fermat\\Values\\ImmutableFraction' Numbers::PI value '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679' Numbers::TAU value '6.283185307179586476925286766559005768394338798750211641949889184615632812572417997256069650684234136' Numbers::E value '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427' Numbers::GOLDEN_RATIO value '1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137' Numbers::LN_10 value '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298' Numbers::I_POW_I value '0.2078795763507619085469556198349787700338778416317696080751358830554198772854821397886002778654260353' Properties protected Numbers::defaultCalcMode type mixed (assumed) value uninitialized Methods Static Methods public Numbers::make($type, $value, int|null $scale, int $base) $type description No description available $value description No description available $scale type int|null description No description available $base type int description return type ImmutableDecimal|MutableDecimal|ImmutableFraction|MutableFraction|NumberInterface|FractionInterface description No description available public Numbers::makeFromBase10($type, $value, int|null $scale, int $base) $type description No description available $value description No description available $scale type int|null description No description available $base type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public Numbers::makeOrDont(string|object $type, int|float|string|array|NumberInterface|DecimalInterface|FractionInterface $value, int|null $scale, int $base) $type type string|object description No description available $value type int|float|string|array|NumberInterface|DecimalInterface|FractionInterface description No description available $scale type int|null description No description available $base type int description return type ImmutableDecimal|MutableDecimal|NumberInterface|ImmutableDecimal[]|MutableDecimal[]|NumberInterface[] description No description available public Numbers::makeFractionFromString(string $type, string $value, int $base) $type type string description No description available $value type string description No description available $base type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available public Numbers::makePi(int|null $scale) $scale type int|null description return type DecimalInterface description No description available public Numbers::makeTau(int|null $scale) $scale type int|null description return type DecimalInterface description No description available public Numbers::make2Pi(int|null $scale) $scale type int|null description return type DecimalInterface description No description available public Numbers::makeE(int|null $scale) $scale type int|null description return type DecimalInterface description No description available public Numbers::makeGoldenRatio(int|null $scale) $scale type int|null description return type NumberInterface description No description available public Numbers::makeNaturalLog10(int|null $scale) $scale type int|null description return type NumberInterface description No description available public Numbers::makeOne(int|null $scale) $scale type int|null description return type ImmutableDecimal description No description available public Numbers::makeZero(int|null $scale) $scale type int|null description return type ImmutableDecimal description No description available public Numbers::getDefaultCalcMode() return type int description No description available public Numbers::setDefaultCalcMode(int $mode) $mode type int description No description available return type void description No description available This documentation was generated with Roster .","title":"Numbers"},{"location":"roster/latest/Samsara/Fermat/Numbers/#samsarafermat-numbers","text":"No description available","title":"Samsara\\Fermat &gt; Numbers"},{"location":"roster/latest/Samsara/Fermat/Numbers/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Numbers/#class-constants","text":"Numbers::MUTABLE value 'Samsara\\Fermat\\Values\\MutableDecimal' Numbers::IMMUTABLE value 'Samsara\\Fermat\\Values\\ImmutableDecimal' Numbers::MUTABLE_FRACTION value 'Samsara\\Fermat\\Values\\MutableFraction' Numbers::IMMUTABLE_FRACTION value 'Samsara\\Fermat\\Values\\ImmutableFraction' Numbers::PI value '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679' Numbers::TAU value '6.283185307179586476925286766559005768394338798750211641949889184615632812572417997256069650684234136' Numbers::E value '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427' Numbers::GOLDEN_RATIO value '1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137' Numbers::LN_10 value '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298' Numbers::I_POW_I value '0.2078795763507619085469556198349787700338778416317696080751358830554198772854821397886002778654260353'","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Numbers/#properties","text":"protected Numbers::defaultCalcMode type mixed (assumed) value uninitialized","title":"Properties"},{"location":"roster/latest/Samsara/Fermat/Numbers/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Numbers/#static-methods","text":"public Numbers::make($type, $value, int|null $scale, int $base) $type description No description available $value description No description available $scale type int|null description No description available $base type int description return type ImmutableDecimal|MutableDecimal|ImmutableFraction|MutableFraction|NumberInterface|FractionInterface description No description available public Numbers::makeFromBase10($type, $value, int|null $scale, int $base) $type description No description available $value description No description available $scale type int|null description No description available $base type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public Numbers::makeOrDont(string|object $type, int|float|string|array|NumberInterface|DecimalInterface|FractionInterface $value, int|null $scale, int $base) $type type string|object description No description available $value type int|float|string|array|NumberInterface|DecimalInterface|FractionInterface description No description available $scale type int|null description No description available $base type int description return type ImmutableDecimal|MutableDecimal|NumberInterface|ImmutableDecimal[]|MutableDecimal[]|NumberInterface[] description No description available public Numbers::makeFractionFromString(string $type, string $value, int $base) $type type string description No description available $value type string description No description available $base type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available public Numbers::makePi(int|null $scale) $scale type int|null description return type DecimalInterface description No description available public Numbers::makeTau(int|null $scale) $scale type int|null description return type DecimalInterface description No description available public Numbers::make2Pi(int|null $scale) $scale type int|null description return type DecimalInterface description No description available public Numbers::makeE(int|null $scale) $scale type int|null description return type DecimalInterface description No description available public Numbers::makeGoldenRatio(int|null $scale) $scale type int|null description return type NumberInterface description No description available public Numbers::makeNaturalLog10(int|null $scale) $scale type int|null description return type NumberInterface description No description available public Numbers::makeOne(int|null $scale) $scale type int|null description return type ImmutableDecimal description No description available public Numbers::makeZero(int|null $scale) $scale type int|null description return type ImmutableDecimal description No description available public Numbers::getDefaultCalcMode() return type int description No description available public Numbers::setDefaultCalcMode(int $mode) $mode type int description No description available return type void description No description available This documentation was generated with Roster .","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/ArithmeticProvider/","text":"Samsara\\Fermat\\Provider > ArithmeticProvider No description available Methods Static Methods public ArithmeticProvider::add(string $number1, string $number2, $scale) $number1 type string description No description available $number2 type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::subtract(string $left, string $right, $scale) $left type string description No description available $right type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::multiply(string $number1, string $number2, $scale) $number1 type string description No description available $number2 type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::divide(string $numerator, string $denominator, $scale) $numerator type string description No description available $denominator type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::pow(string $base, string $exponent, $scale) $base type string description No description available $exponent type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::squareRoot(string $number, $scale) $number type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::modulo(string $number, $modulo) $number type string description No description available $modulo description No description available return type mixed (assumed) description No description available public ArithmeticProvider::compare(string $left, string $right, $scale) $left type string description No description available $right type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::powmod(string $left, string $right, string $modulus, $scale) $left type string description No description available $right type string description No description available $modulus type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::factorial(string $number, int $scale) $number type string description No description available $scale type int description No description available return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"ArithmeticProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/ArithmeticProvider/#samsarafermatprovider-arithmeticprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; ArithmeticProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/ArithmeticProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/ArithmeticProvider/#static-methods","text":"public ArithmeticProvider::add(string $number1, string $number2, $scale) $number1 type string description No description available $number2 type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::subtract(string $left, string $right, $scale) $left type string description No description available $right type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::multiply(string $number1, string $number2, $scale) $number1 type string description No description available $number2 type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::divide(string $numerator, string $denominator, $scale) $numerator type string description No description available $denominator type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::pow(string $base, string $exponent, $scale) $base type string description No description available $exponent type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::squareRoot(string $number, $scale) $number type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::modulo(string $number, $modulo) $number type string description No description available $modulo description No description available return type mixed (assumed) description No description available public ArithmeticProvider::compare(string $left, string $right, $scale) $left type string description No description available $right type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::powmod(string $left, string $right, string $modulus, $scale) $left type string description No description available $right type string description No description available $modulus type string description No description available $scale description No description available return type mixed (assumed) description No description available public ArithmeticProvider::factorial(string $number, int $scale) $number type string description No description available $scale type int description No description available return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/ConstantProvider/","text":"Samsara\\Fermat\\Provider > ConstantProvider No description available Methods Static Methods public ConstantProvider::makePi(int $digits) $digits type int description No description available return type string description No description available public ConstantProvider::makeE(int $digits) $digits type int description No description available return type string description No description available Consider also: sum [0 -> INF] { (2n + 2) / (2n + 1)! } This converges faster (though it's unclear if the calculation is actually faster), and can be represented by this set of Fermat calls: SequenceProvider::nthEvenNumber($n + 1)->divide(SequenceProvider::nthOddNumber($n)->factorial()); Perhaps by substituting the nthOddNumber()->factorial() call with something tracked locally, the performance can be improved. Current performance is acceptable even out past 200 digits. This documentation was generated with Roster .","title":"ConstantProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/ConstantProvider/#samsarafermatprovider-constantprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; ConstantProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/ConstantProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/ConstantProvider/#static-methods","text":"public ConstantProvider::makePi(int $digits) $digits type int description No description available return type string description No description available public ConstantProvider::makeE(int $digits) $digits type int description No description available return type string description No description available Consider also: sum [0 -> INF] { (2n + 2) / (2n + 1)! } This converges faster (though it's unclear if the calculation is actually faster), and can be represented by this set of Fermat calls: SequenceProvider::nthEvenNumber($n + 1)->divide(SequenceProvider::nthOddNumber($n)->factorial()); Perhaps by substituting the nthOddNumber()->factorial() call with something tracked locally, the performance can be improved. Current performance is acceptable even out past 200 digits. This documentation was generated with Roster .","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/RandomProvider/","text":"Samsara\\Fermat\\Provider > RandomProvider No description available Variables & Data Class Constants RandomProvider::MODE_ENTROPY value 1 RandomProvider::MODE_SPEED value 2 Methods Static Methods public RandomProvider::randomInt(int|string|DecimalInterface $min, int|string|DecimalInterface $max, int $mode) $min type int|string|DecimalInterface description No description available $max type int|string|DecimalInterface description No description available $mode type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public RandomProvider::randomDecimal(int $scale, int $mode) $scale type int description No description available $mode type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public RandomProvider::randomReal(int|string|DecimalInterface $min, int|string|DecimalInterface $max, int $scale, int $mode) $min type int|string|DecimalInterface description No description available $max type int|string|DecimalInterface description No description available $scale type int description No description available $mode type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"RandomProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/RandomProvider/#samsarafermatprovider-randomprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; RandomProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/RandomProvider/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Provider/RandomProvider/#class-constants","text":"RandomProvider::MODE_ENTROPY value 1 RandomProvider::MODE_SPEED value 2","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Provider/RandomProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/RandomProvider/#static-methods","text":"public RandomProvider::randomInt(int|string|DecimalInterface $min, int|string|DecimalInterface $max, int $mode) $min type int|string|DecimalInterface description No description available $max type int|string|DecimalInterface description No description available $mode type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public RandomProvider::randomDecimal(int $scale, int $mode) $scale type int description No description available $mode type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public RandomProvider::randomReal(int|string|DecimalInterface $min, int|string|DecimalInterface $max, int $scale, int $mode) $min type int|string|DecimalInterface description No description available $max type int|string|DecimalInterface description No description available $scale type int description No description available $mode type int description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available This documentation was generated with Roster .","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/RoundingProvider/","text":"Samsara\\Fermat\\Provider > RoundingProvider No description available Variables & Data Class Constants RoundingProvider::MODE_HALF_UP value 1 RoundingProvider::MODE_HALF_DOWN value 2 RoundingProvider::MODE_HALF_EVEN value 3 RoundingProvider::MODE_HALF_ODD value 4 RoundingProvider::MODE_HALF_ZERO value 5 RoundingProvider::MODE_HALF_INF value 6 RoundingProvider::MODE_CEIL value 7 RoundingProvider::MODE_FLOOR value 8 RoundingProvider::MODE_RANDOM value 9 RoundingProvider::MODE_ALTERNATING value 10 RoundingProvider::MODE_STOCHASTIC value 11 Methods Static Methods public RoundingProvider::setRoundingMode(int $mode) $mode type int description No description available return type void description No description available public RoundingProvider::getRoundingMode() return type int description No description available public RoundingProvider::round(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $decimal, int $places) $decimal type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $places type int description No description available return type string description No description available This documentation was generated with Roster .","title":"RoundingProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/RoundingProvider/#samsarafermatprovider-roundingprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; RoundingProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/RoundingProvider/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Provider/RoundingProvider/#class-constants","text":"RoundingProvider::MODE_HALF_UP value 1 RoundingProvider::MODE_HALF_DOWN value 2 RoundingProvider::MODE_HALF_EVEN value 3 RoundingProvider::MODE_HALF_ODD value 4 RoundingProvider::MODE_HALF_ZERO value 5 RoundingProvider::MODE_HALF_INF value 6 RoundingProvider::MODE_CEIL value 7 RoundingProvider::MODE_FLOOR value 8 RoundingProvider::MODE_RANDOM value 9 RoundingProvider::MODE_ALTERNATING value 10 RoundingProvider::MODE_STOCHASTIC value 11","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Provider/RoundingProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/RoundingProvider/#static-methods","text":"public RoundingProvider::setRoundingMode(int $mode) $mode type int description No description available return type void description No description available public RoundingProvider::getRoundingMode() return type int description No description available public RoundingProvider::round(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $decimal, int $places) $decimal type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $places type int description No description available return type string description No description available This documentation was generated with Roster .","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/SequenceProvider/","text":"Samsara\\Fermat\\Provider > SequenceProvider No description available Variables & Data Class Constants SequenceProvider::EULER_ZIGZAG value array (0 => '1',1 => '1',2 => '1',3 => '2',4 => '5',5 => '16',6 => '61',7 => '272',8 => '1385',9 => '7936',10 => '50521',11 => '353792',12 => '2702765',13 => '22368256',14 => '199360981',15 => '1903757312',16 => '19391512145',17 => '209865342976',18 => '2404879675441',19 => '29088885112832',20 => '370371188237525',21 => '4951498053124096',22 => '69348874393137901',23 => '1015423886506852352',24 => '15514534163557086905',25 => '246921480190207983616',26 => '4087072509293123892361',27 => '70251601603943959887872',28 => '1252259641403629865468285',29 => '23119184187809597841473536',30 => '441543893249023104553682821',31 => '8713962757125169296170811392',32 => '177519391579539289436664789665',33 => '3729407703720529571097509625856',34 => '80723299235887898062168247453281',35 => '1798651693450888780071750349094912',36 => '41222060339517702122347079671259045',37 => '970982810785059112379399707952152576',38 => '23489580527043108252017828576198947741',39 => '583203324917310043943191641625494290432',40 => '14851150718114980017877156781405826684425',41 => '387635983772083031828014624002175135645696',42 => '10364622733519612119397957304745185976310201',43 => '283727921907431909304183316295787837183229952',44 => '7947579422597592703608040510088070619519273805',45 => '227681379129930886488600284336316164603920777216',46 => '6667537516685544977435028474773748197524107684661',47 => '199500252157859031027160499643195658166340757225472',48 => '6096278645568542158691685742876843153976539044435185',49 => '190169564657928428175235445073924928592047775873499136',50 => '6053285248188621896314383785111649088103498225146815121',) Methods Static Methods public SequenceProvider::nthOddNumber(int $n, bool $asCollection, int $collectionSize) $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available OEIS: A005408 public SequenceProvider::nthEvenNumber(int $n, bool $asCollection, int $collectionSize) $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available OEIS: A005843 public SequenceProvider::nthPowerNegativeOne(int $n, bool $asCollection, int $collectionSize) $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available OEIS: A033999 public SequenceProvider::nthEulerZigzag(int $n, bool $asCollection, int $collectionSize) $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available OEIS: A000111 public SequenceProvider::nthBernoulliNumber($n) $n description return type DecimalInterface|NumberInterface description No description available WARNING: This function is VERY unoptimized. Be careful of large m values. public SequenceProvider::nthFibonacciNumber(int $n, bool $asCollection, int $collectionSize) $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type ImmutableDecimal|NumberCollection description No description available OEIS: A000045 This uses an implementation of the fast-doubling Karatsuba multiplication algorithm as described by 'Nayuki': https://www.nayuki.io/page/fast-fibonacci-algorithms This documentation was generated with Roster .","title":"SequenceProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/SequenceProvider/#samsarafermatprovider-sequenceprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; SequenceProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/SequenceProvider/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Provider/SequenceProvider/#class-constants","text":"SequenceProvider::EULER_ZIGZAG value array (0 => '1',1 => '1',2 => '1',3 => '2',4 => '5',5 => '16',6 => '61',7 => '272',8 => '1385',9 => '7936',10 => '50521',11 => '353792',12 => '2702765',13 => '22368256',14 => '199360981',15 => '1903757312',16 => '19391512145',17 => '209865342976',18 => '2404879675441',19 => '29088885112832',20 => '370371188237525',21 => '4951498053124096',22 => '69348874393137901',23 => '1015423886506852352',24 => '15514534163557086905',25 => '246921480190207983616',26 => '4087072509293123892361',27 => '70251601603943959887872',28 => '1252259641403629865468285',29 => '23119184187809597841473536',30 => '441543893249023104553682821',31 => '8713962757125169296170811392',32 => '177519391579539289436664789665',33 => '3729407703720529571097509625856',34 => '80723299235887898062168247453281',35 => '1798651693450888780071750349094912',36 => '41222060339517702122347079671259045',37 => '970982810785059112379399707952152576',38 => '23489580527043108252017828576198947741',39 => '583203324917310043943191641625494290432',40 => '14851150718114980017877156781405826684425',41 => '387635983772083031828014624002175135645696',42 => '10364622733519612119397957304745185976310201',43 => '283727921907431909304183316295787837183229952',44 => '7947579422597592703608040510088070619519273805',45 => '227681379129930886488600284336316164603920777216',46 => '6667537516685544977435028474773748197524107684661',47 => '199500252157859031027160499643195658166340757225472',48 => '6096278645568542158691685742876843153976539044435185',49 => '190169564657928428175235445073924928592047775873499136',50 => '6053285248188621896314383785111649088103498225146815121',)","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Provider/SequenceProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/SequenceProvider/#static-methods","text":"public SequenceProvider::nthOddNumber(int $n, bool $asCollection, int $collectionSize) $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available OEIS: A005408 public SequenceProvider::nthEvenNumber(int $n, bool $asCollection, int $collectionSize) $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available OEIS: A005843 public SequenceProvider::nthPowerNegativeOne(int $n, bool $asCollection, int $collectionSize) $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available OEIS: A033999 public SequenceProvider::nthEulerZigzag(int $n, bool $asCollection, int $collectionSize) $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type DecimalInterface|NumberInterface|NumberCollection description No description available OEIS: A000111 public SequenceProvider::nthBernoulliNumber($n) $n description return type DecimalInterface|NumberInterface description No description available WARNING: This function is VERY unoptimized. Be careful of large m values. public SequenceProvider::nthFibonacciNumber(int $n, bool $asCollection, int $collectionSize) $n type int description No description available $asCollection type bool description No description available $collectionSize type int description return type ImmutableDecimal|NumberCollection description No description available OEIS: A000045 This uses an implementation of the fast-doubling Karatsuba multiplication algorithm as described by 'Nayuki': https://www.nayuki.io/page/fast-fibonacci-algorithms This documentation was generated with Roster .","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/SeriesProvider/","text":"Samsara\\Fermat\\Provider > SeriesProvider No description available Methods Static Methods public SeriesProvider::maclaurinSeries(SimpleNumberInterface $input, callable $numerator, callable $exponent, callable $denominator, int $startTermAt, int $scale, int $consecutiveDivergeLimit, int $totalDivergeLimit) $input type SimpleNumberInterface description No description available $numerator type callable description No description available $exponent type callable description No description available $denominator type callable description No description available $startTermAt type int description No description available $scale type int description No description available $consecutiveDivergeLimit type int description No description available $totalDivergeLimit type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available Creates a series that evaluates the following: SUM[$startTerm -> infinity]( numerator($n) \u00d7 $input^$exponent($n) denominator($n) Where $n is the current term number, starting at $startTerm, and increasing by 1 each loop; where $numerator, exponent, and $denominator are callables that take the term number (as an int) as their only input, and give the value of that section at that term number; and where $input is the x value being considered for the series. The function continues adding terms until a term has MORE leading zeros than the $scale setting. (That is, until it adds zero to the total when considering significant digits.) This documentation was generated with Roster .","title":"SeriesProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/SeriesProvider/#samsarafermatprovider-seriesprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; SeriesProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/SeriesProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/SeriesProvider/#static-methods","text":"public SeriesProvider::maclaurinSeries(SimpleNumberInterface $input, callable $numerator, callable $exponent, callable $denominator, int $startTermAt, int $scale, int $consecutiveDivergeLimit, int $totalDivergeLimit) $input type SimpleNumberInterface description No description available $numerator type callable description No description available $exponent type callable description No description available $denominator type callable description No description available $startTermAt type int description No description available $scale type int description No description available $consecutiveDivergeLimit type int description No description available $totalDivergeLimit type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available Creates a series that evaluates the following: SUM[$startTerm -> infinity]( numerator($n) \u00d7 $input^$exponent($n) denominator($n) Where $n is the current term number, starting at $startTerm, and increasing by 1 each loop; where $numerator, exponent, and $denominator are callables that take the term number (as an int) as their only input, and give the value of that section at that term number; and where $input is the x value being considered for the series. The function continues adding terms until a term has MORE leading zeros than the $scale setting. (That is, until it adds zero to the total when considering significant digits.) This documentation was generated with Roster .","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/TrigonometryProvider/","text":"Samsara\\Fermat\\Provider > TrigonometryProvider No description available Methods Static Methods public TrigonometryProvider::radiansToDegrees($radians) $radians description return type string description No description available public TrigonometryProvider::degreesToRadians($degrees) $degrees description return type string description No description available This documentation was generated with Roster .","title":"TrigonometryProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/TrigonometryProvider/#samsarafermatprovider-trigonometryprovider","text":"No description available","title":"Samsara\\Fermat\\Provider &gt; TrigonometryProvider"},{"location":"roster/latest/Samsara/Fermat/Provider/TrigonometryProvider/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Provider/TrigonometryProvider/#static-methods","text":"public TrigonometryProvider::radiansToDegrees($radians) $radians description return type string description No description available public TrigonometryProvider::degreesToRadians($degrees) $degrees description return type string description No description available This documentation was generated with Roster .","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Renderer/KatexRenderer/","text":"Samsara\\Fermat\\Renderer > KatexRenderer No description available This documentation was generated with Roster .","title":"KatexRenderer"},{"location":"roster/latest/Samsara/Fermat/Renderer/KatexRenderer/#samsarafermatrenderer-katexrenderer","text":"No description available This documentation was generated with Roster .","title":"Samsara\\Fermat\\Renderer &gt; KatexRenderer"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Interfaces/ComponentInterface/","text":"Samsara\\Fermat\\Renderer\\Components\\Interfaces > ComponentInterface No description available Methods Instanced Methods public ComponentInterface->getOutput() return type string description No description available This documentation was generated with Roster .","title":"ComponentInterface"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Interfaces/ComponentInterface/#samsarafermatrenderercomponentsinterfaces-componentinterface","text":"No description available","title":"Samsara\\Fermat\\Renderer\\Components\\Interfaces &gt; ComponentInterface"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Interfaces/ComponentInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Interfaces/ComponentInterface/#instanced-methods","text":"public ComponentInterface->getOutput() return type string description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Operations/PowOperation/","text":"Samsara\\Fermat\\Renderer\\Components\\Operations > PowOperation No description available Inheritance Implements ComponentInterface namespace Samsara\\Fermat\\Renderer\\Components\\Interfaces description No description available Methods Constructor public PowOperation->__construct(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface $left, Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface $right) $left type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface description No description available $right type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface description No description available return type mixed (assumed) description No description available Instanced Methods public PowOperation->getOutput() return type string description No description available This documentation was generated with Roster .","title":"PowOperation"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Operations/PowOperation/#samsarafermatrenderercomponentsoperations-powoperation","text":"No description available","title":"Samsara\\Fermat\\Renderer\\Components\\Operations &gt; PowOperation"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Operations/PowOperation/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Operations/PowOperation/#implements","text":"ComponentInterface namespace Samsara\\Fermat\\Renderer\\Components\\Interfaces description No description available","title":"Implements"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Operations/PowOperation/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Operations/PowOperation/#constructor","text":"public PowOperation->__construct(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface $left, Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface $right) $left type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface description No description available $right type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface|Samsara\\Fermat\\Renderer\\Components\\Interfaces\\ComponentInterface description No description available return type mixed (assumed) description No description available","title":"Constructor"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Operations/PowOperation/#instanced-methods","text":"public PowOperation->getOutput() return type string description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Symbols/ThetaSymbol/","text":"Samsara\\Fermat\\Renderer\\Components\\Symbols > ThetaSymbol No description available Inheritance Implements ComponentInterface namespace Samsara\\Fermat\\Renderer\\Components\\Interfaces description No description available Methods Instanced Methods public ThetaSymbol->getOutput() return type string description No description available This documentation was generated with Roster .","title":"ThetaSymbol"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Symbols/ThetaSymbol/#samsarafermatrenderercomponentssymbols-thetasymbol","text":"No description available","title":"Samsara\\Fermat\\Renderer\\Components\\Symbols &gt; ThetaSymbol"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Symbols/ThetaSymbol/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Symbols/ThetaSymbol/#implements","text":"ComponentInterface namespace Samsara\\Fermat\\Renderer\\Components\\Interfaces description No description available","title":"Implements"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Symbols/ThetaSymbol/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Renderer/Components/Symbols/ThetaSymbol/#instanced-methods","text":"public ThetaSymbol->getOutput() return type string description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/","text":"Samsara\\Fermat\\Types > Decimal No description available Inheritance Extends Samsara\\Fermat\\Types\\Base\\Number Implements Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available DecimalInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available BaseConversionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Characteristics description No description available SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Has Traits ArithmeticSimpleTrait namespace Samsara\\Fermat\\Types\\Traits description No description available ComparisonTrait namespace Samsara\\Fermat\\Types\\Traits description No description available IntegerMathTrait namespace Samsara\\Fermat\\Types\\Traits description No description available TrigonometryTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available InverseTrigonometryTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available LogTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available ScaleTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available Variables & Data Class Constants Decimal::INFINITY value 'INF' Decimal::NEG_INFINITY value '-INF' Properties protected Decimal->base type mixed (assumed) value null protected Decimal->calcMode type mixed (assumed) value null protected Decimal->modeRegister type mixed (assumed) value null protected Decimal->scale type mixed (assumed) value null Inherited Properties protected Number->value type array value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Number->sign type bool value uninitialized Methods Constructor public Decimal->__construct($value, $scale, $base, bool $baseTenInput) $value description No description available $scale description No description available $base description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available Static Methods protected Decimal::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Decimal::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available Instanced Methods public Decimal->modulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase() return type int description No description available Returns the current base that the value is in. public Decimal->getAsBaseTenRealNumber() return type string description No description available public Decimal->getValue($base) $base description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value) $value type NumberInterface|int|float|string description No description available return type int description No description available Returns the sort compare integer (-1, 0, 1) for the two numbers. public Decimal->convertToBase($base) $base description No description available return type NumberInterface description No description available Converts the object to a different base. public Decimal->abs() return type DecimalInterface|NumberInterface description No description available Returns the current object as the absolute value of itself. public Decimal->absValue() return type string description No description available Returns the string of the absolute value of the current object. public Decimal->isComplex() return type bool description No description available public Decimal->__toString() return type string description No description available public Decimal->continuousModulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->add($num) $num description No description available return type mixed (assumed) description No description available public Decimal->subtract($num) $num description No description available return type mixed (assumed) description No description available public Decimal->multiply($num) $num description No description available return type mixed (assumed) description No description available public Decimal->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->pow($num) $num description No description available return type mixed (assumed) description No description available public Decimal->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->isEqual($value) $value description No description available return type bool description No description available public Decimal->getScale() return type ?int description No description available public Decimal->isGreaterThan($value) $value description No description available return type bool description No description available public Decimal->isLessThan($value) $value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isNegative() return type bool description No description available public Decimal->isPositive() return type bool description No description available public Decimal->isNatural() return type bool description No description available public Decimal->isWhole() return type bool description No description available public Decimal->isInt() return type bool description No description available public Decimal->factorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime() return type bool description No description available This function is a PHP implementation of the function described at: http://stackoverflow.com/a/1801446 It is relatively simple to understand, which is why it was chosen as the implementation. However in the future, an implementation that is based on ECPP (such as the Goldwasser implementation) may be employed to improve speed. public Decimal->asPrimeFactors() return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, ?int $mode) $scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale) $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round) $scale type int|null description The number of digits which should be accurate $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->round(int $decimals, ?int $mode) $decimals type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals) $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros() return type int description No description available The number of digits between the radix and the for non-zero digit in the decimal part. public Decimal->numberOfTotalDigits() return type int description No description available The number of digits (excludes the radix). public Decimal->numberOfIntDigits() return type int description No description available The number of digits in the integer part. public Decimal->numberOfDecimalDigits() return type int description No description available The number of digits in the decimal part. public Decimal->numberOfSigDecimalDigits() return type int description No description available The number of digits in the decimal part, excluding leading zeros. public Decimal->asInt() return type int description No description available Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public Decimal->isFloat() return type bool description No description available public Decimal->asFloat() return type float description No description available protected Decimal->translateValue(string $value) $value type string description No description available return type mixed (assumed) description No description available protected Decimal->convertObject() return type mixed (assumed) description No description available protected Decimal->convertValue(string $value, int $oldBase, int $newBase) $value type string description No description available $oldBase type int description No description available $newBase type int description No description available return type mixed (assumed) description No description available protected Decimal->setValue(string $value, int $scale, int $base) $value type string description No description available $scale type int description No description available $base type int description return type DecimalInterface description No description available protected Decimal->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Decimal->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtNative() return type mixed (assumed) description No description available protected Decimal->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available protected Decimal->reduceDecimals(array $decimalArray, $pos, $add) $decimalArray type array description No description available $pos description No description available $add description No description available return type mixed (assumed) description No description available protected Decimal->getDecimalPart() return type mixed (assumed) description No description available protected Decimal->getWholePart() return type mixed (assumed) description No description available Inherited Methods public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"Decimal"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#samsarafermattypes-decimal","text":"No description available","title":"Samsara\\Fermat\\Types &gt; Decimal"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#extends","text":"Samsara\\Fermat\\Types\\Base\\Number","title":"Extends"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#implements","text":"Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available DecimalInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available BaseConversionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Characteristics description No description available SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available","title":"Implements"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#has-traits","text":"ArithmeticSimpleTrait namespace Samsara\\Fermat\\Types\\Traits description No description available ComparisonTrait namespace Samsara\\Fermat\\Types\\Traits description No description available IntegerMathTrait namespace Samsara\\Fermat\\Types\\Traits description No description available TrigonometryTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available InverseTrigonometryTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available LogTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available ScaleTrait namespace Samsara\\Fermat\\Types\\Traits\\Decimal description No description available","title":"Has Traits"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#class-constants","text":"Decimal::INFINITY value 'INF' Decimal::NEG_INFINITY value '-INF'","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#properties","text":"protected Decimal->base type mixed (assumed) value null protected Decimal->calcMode type mixed (assumed) value null protected Decimal->modeRegister type mixed (assumed) value null protected Decimal->scale type mixed (assumed) value null","title":"Properties"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#inherited-properties","text":"protected Number->value type array value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Number->sign type bool value uninitialized","title":"Inherited Properties"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#constructor","text":"public Decimal->__construct($value, $scale, $base, bool $baseTenInput) $value description No description available $scale description No description available $base description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available","title":"Constructor"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#static-methods","text":"protected Decimal::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Decimal::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#instanced-methods","text":"public Decimal->modulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase() return type int description No description available Returns the current base that the value is in. public Decimal->getAsBaseTenRealNumber() return type string description No description available public Decimal->getValue($base) $base description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value) $value type NumberInterface|int|float|string description No description available return type int description No description available Returns the sort compare integer (-1, 0, 1) for the two numbers. public Decimal->convertToBase($base) $base description No description available return type NumberInterface description No description available Converts the object to a different base. public Decimal->abs() return type DecimalInterface|NumberInterface description No description available Returns the current object as the absolute value of itself. public Decimal->absValue() return type string description No description available Returns the string of the absolute value of the current object. public Decimal->isComplex() return type bool description No description available public Decimal->__toString() return type string description No description available public Decimal->continuousModulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->add($num) $num description No description available return type mixed (assumed) description No description available public Decimal->subtract($num) $num description No description available return type mixed (assumed) description No description available public Decimal->multiply($num) $num description No description available return type mixed (assumed) description No description available public Decimal->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->pow($num) $num description No description available return type mixed (assumed) description No description available public Decimal->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->isEqual($value) $value description No description available return type bool description No description available public Decimal->getScale() return type ?int description No description available public Decimal->isGreaterThan($value) $value description No description available return type bool description No description available public Decimal->isLessThan($value) $value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isNegative() return type bool description No description available public Decimal->isPositive() return type bool description No description available public Decimal->isNatural() return type bool description No description available public Decimal->isWhole() return type bool description No description available public Decimal->isInt() return type bool description No description available public Decimal->factorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime() return type bool description No description available This function is a PHP implementation of the function described at: http://stackoverflow.com/a/1801446 It is relatively simple to understand, which is why it was chosen as the implementation. However in the future, an implementation that is based on ECPP (such as the Goldwasser implementation) may be employed to improve speed. public Decimal->asPrimeFactors() return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, ?int $mode) $scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale) $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round) $scale type int|null description The number of digits which should be accurate $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->round(int $decimals, ?int $mode) $decimals type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals) $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros() return type int description No description available The number of digits between the radix and the for non-zero digit in the decimal part. public Decimal->numberOfTotalDigits() return type int description No description available The number of digits (excludes the radix). public Decimal->numberOfIntDigits() return type int description No description available The number of digits in the integer part. public Decimal->numberOfDecimalDigits() return type int description No description available The number of digits in the decimal part. public Decimal->numberOfSigDecimalDigits() return type int description No description available The number of digits in the decimal part, excluding leading zeros. public Decimal->asInt() return type int description No description available Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public Decimal->isFloat() return type bool description No description available public Decimal->asFloat() return type float description No description available protected Decimal->translateValue(string $value) $value type string description No description available return type mixed (assumed) description No description available protected Decimal->convertObject() return type mixed (assumed) description No description available protected Decimal->convertValue(string $value, int $oldBase, int $newBase) $value type string description No description available $oldBase type int description No description available $newBase type int description No description available return type mixed (assumed) description No description available protected Decimal->setValue(string $value, int $scale, int $base) $value type string description No description available $scale type int description No description available $base type int description return type DecimalInterface description No description available protected Decimal->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Decimal->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtNative() return type mixed (assumed) description No description available protected Decimal->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available protected Decimal->reduceDecimals(array $decimalArray, $pos, $add) $decimalArray type array description No description available $pos description No description available $add description No description available return type mixed (assumed) description No description available protected Decimal->getDecimalPart() return type mixed (assumed) description No description available protected Decimal->getWholePart() return type mixed (assumed) description No description available","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Decimal/#inherited-methods","text":"public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"Inherited Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/","text":"Samsara\\Fermat\\Types > Fraction No description available Inheritance Extends Samsara\\Fermat\\Types\\Base\\Number Implements Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available FractionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Has Traits ArithmeticSimpleTrait namespace Samsara\\Fermat\\Types\\Traits description No description available ComparisonTrait namespace Samsara\\Fermat\\Types\\Traits description No description available Variables & Data Class Constants Fraction::INFINITY value 'INF' Fraction::NEG_INFINITY value '-INF' Properties protected Fraction->base type int value uninitialized protected Fraction->value type array value uninitialized protected Fraction->sign type bool value uninitialized protected Fraction->scale type ?int value uninitialized protected Fraction->calcMode type mixed (assumed) value null protected Fraction->modeRegister type mixed (assumed) value null Inherited Properties protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null Methods Constructor public Fraction->__construct($numerator, $denominator, int $base) $numerator description No description available $denominator description No description available $base type int description return type mixed (assumed) description No description available Fraction constructor. Static Methods protected Fraction::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Fraction::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available Instanced Methods public Fraction->getValue() return type string description No description available public Fraction->getScale() return type ?int description No description available public Fraction->getBase() return type mixed (assumed) description No description available public Fraction->getNumerator() return type mixed (assumed) description No description available public Fraction->getDenominator() return type mixed (assumed) description No description available public Fraction->isComplex() return type bool description No description available public Fraction->simplify() return type mixed (assumed) description No description available public Fraction->abs() return type mixed (assumed) description No description available public Fraction->absValue() return type string description No description available public Fraction->compare($number) $number description No description available return type int description No description available public Fraction->asDecimal($scale) $scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor() return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available return type mixed (assumed) description No description available public Fraction->getAsBaseTenRealNumber() return type string description No description available public Fraction->add($num) $num description No description available return type mixed (assumed) description No description available public Fraction->subtract($num) $num description No description available return type mixed (assumed) description No description available public Fraction->multiply($num) $num description No description available return type mixed (assumed) description No description available public Fraction->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->pow($num) $num description No description available return type mixed (assumed) description No description available public Fraction->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->isEqual($value) $value description No description available return type bool description No description available public Fraction->isGreaterThan($value) $value description No description available return type bool description No description available public Fraction->isLessThan($value) $value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isNegative() return type bool description No description available public Fraction->isPositive() return type bool description No description available public Fraction->isNatural() return type bool description No description available public Fraction->isWhole() return type bool description No description available public Fraction->isInt() return type bool description No description available protected Fraction->getNumeratorsWithSameDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction, ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface $lcm) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available $lcm type ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available return type mixed (assumed) description No description available protected Fraction->setValue(ImmutableDecimal $numerator, ImmutableDecimal $denominator) $numerator type ImmutableDecimal description No description available $denominator type ImmutableDecimal description return type Fraction description No description available protected Fraction->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Fraction->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtNative() return type mixed (assumed) description No description available protected Fraction->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available Inherited Methods public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() return type string description No description available public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"Fraction"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#samsarafermattypes-fraction","text":"No description available","title":"Samsara\\Fermat\\Types &gt; Fraction"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#extends","text":"Samsara\\Fermat\\Types\\Base\\Number","title":"Extends"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#implements","text":"Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available FractionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available","title":"Implements"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#has-traits","text":"ArithmeticSimpleTrait namespace Samsara\\Fermat\\Types\\Traits description No description available ComparisonTrait namespace Samsara\\Fermat\\Types\\Traits description No description available","title":"Has Traits"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#class-constants","text":"Fraction::INFINITY value 'INF' Fraction::NEG_INFINITY value '-INF'","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#properties","text":"protected Fraction->base type int value uninitialized protected Fraction->value type array value uninitialized protected Fraction->sign type bool value uninitialized protected Fraction->scale type ?int value uninitialized protected Fraction->calcMode type mixed (assumed) value null protected Fraction->modeRegister type mixed (assumed) value null","title":"Properties"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#inherited-properties","text":"protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null","title":"Inherited Properties"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#constructor","text":"public Fraction->__construct($numerator, $denominator, int $base) $numerator description No description available $denominator description No description available $base type int description return type mixed (assumed) description No description available Fraction constructor.","title":"Constructor"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#static-methods","text":"protected Fraction::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Fraction::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#instanced-methods","text":"public Fraction->getValue() return type string description No description available public Fraction->getScale() return type ?int description No description available public Fraction->getBase() return type mixed (assumed) description No description available public Fraction->getNumerator() return type mixed (assumed) description No description available public Fraction->getDenominator() return type mixed (assumed) description No description available public Fraction->isComplex() return type bool description No description available public Fraction->simplify() return type mixed (assumed) description No description available public Fraction->abs() return type mixed (assumed) description No description available public Fraction->absValue() return type string description No description available public Fraction->compare($number) $number description No description available return type int description No description available public Fraction->asDecimal($scale) $scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor() return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available return type mixed (assumed) description No description available public Fraction->getAsBaseTenRealNumber() return type string description No description available public Fraction->add($num) $num description No description available return type mixed (assumed) description No description available public Fraction->subtract($num) $num description No description available return type mixed (assumed) description No description available public Fraction->multiply($num) $num description No description available return type mixed (assumed) description No description available public Fraction->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->pow($num) $num description No description available return type mixed (assumed) description No description available public Fraction->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->isEqual($value) $value description No description available return type bool description No description available public Fraction->isGreaterThan($value) $value description No description available return type bool description No description available public Fraction->isLessThan($value) $value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isNegative() return type bool description No description available public Fraction->isPositive() return type bool description No description available public Fraction->isNatural() return type bool description No description available public Fraction->isWhole() return type bool description No description available public Fraction->isInt() return type bool description No description available protected Fraction->getNumeratorsWithSameDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction, ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface $lcm) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available $lcm type ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available return type mixed (assumed) description No description available protected Fraction->setValue(ImmutableDecimal $numerator, ImmutableDecimal $denominator) $numerator type ImmutableDecimal description No description available $denominator type ImmutableDecimal description return type Fraction description No description available protected Fraction->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Fraction->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtNative() return type mixed (assumed) description No description available protected Fraction->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Fraction/#inherited-methods","text":"public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() return type string description No description available public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"Inherited Methods"},{"location":"roster/latest/Samsara/Fermat/Types/NumberCollection/","text":"Samsara\\Fermat\\Types > NumberCollection No description available Inheritance Implements NumberCollectionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups description No description available ArrayAccess namespace description No description available IteratorAggregate namespace description No description available Traversable namespace description No description available Methods Constructor public NumberCollection->__construct(array $numbers) $numbers type array description No description available return type mixed (assumed) description No description available NumberCollection constructor. Instanced Methods public NumberCollection->collect(array $numbers) $numbers type array description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->count() return type int description No description available public NumberCollection->toArray() return type array description No description available public NumberCollection->selectScale() return type int description No description available public NumberCollection->push(NumberInterface $number) $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->pop() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->unshift(NumberInterface $number) $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->shift() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->filterByKeys(array $filters) $filters type array description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available public NumberCollection->sort() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->reverse() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->add($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->subtract($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->multiply($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->divide($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->pow($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available Raises each element in the collection to the exponent $number public NumberCollection->exp($base) $base description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available Replaces each element in the collection with $base to the power of that value. If no base is given, Euler's number is assumed to be the base (as is assumed in most cases where an exp() function is encountered in math) public NumberCollection->get(int $key) $key type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->getRandom() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->sum() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->mean() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public NumberCollection->average() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public NumberCollection->makeNormalDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Normal description No description available public NumberCollection->makePoissonDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Poisson description No description available public NumberCollection->makeExponentialDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Exponential description No description available public NumberCollection->makePolynomialFunction() return type Samsara\\Fermat\\Values\\Algebra\\PolynomialFunction description No description available public NumberCollection->offsetExists($offset) $offset description No description available return type mixed (assumed) description No description available public NumberCollection->offsetGet($offset) $offset description No description available return type mixed (assumed) description No description available public NumberCollection->offsetSet($offset, $value) $offset description No description available $value description No description available return type mixed (assumed) description No description available public NumberCollection->offsetUnset($offset) $offset description No description available return type mixed (assumed) description No description available public NumberCollection->getIterator() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"NumberCollection"},{"location":"roster/latest/Samsara/Fermat/Types/NumberCollection/#samsarafermattypes-numbercollection","text":"No description available","title":"Samsara\\Fermat\\Types &gt; NumberCollection"},{"location":"roster/latest/Samsara/Fermat/Types/NumberCollection/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Types/NumberCollection/#implements","text":"NumberCollectionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups description No description available ArrayAccess namespace description No description available IteratorAggregate namespace description No description available Traversable namespace description No description available","title":"Implements"},{"location":"roster/latest/Samsara/Fermat/Types/NumberCollection/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/NumberCollection/#constructor","text":"public NumberCollection->__construct(array $numbers) $numbers type array description No description available return type mixed (assumed) description No description available NumberCollection constructor.","title":"Constructor"},{"location":"roster/latest/Samsara/Fermat/Types/NumberCollection/#instanced-methods","text":"public NumberCollection->collect(array $numbers) $numbers type array description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->count() return type int description No description available public NumberCollection->toArray() return type array description No description available public NumberCollection->selectScale() return type int description No description available public NumberCollection->push(NumberInterface $number) $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->pop() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->unshift(NumberInterface $number) $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->shift() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->filterByKeys(array $filters) $filters type array description No description available return type Samsara\\Fermat\\Types\\NumberCollection description No description available public NumberCollection->sort() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->reverse() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->add($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->subtract($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->multiply($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->divide($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollection->pow($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available Raises each element in the collection to the exponent $number public NumberCollection->exp($base) $base description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available Replaces each element in the collection with $base to the power of that value. If no base is given, Euler's number is assumed to be the base (as is assumed in most cases where an exp() function is encountered in math) public NumberCollection->get(int $key) $key type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->getRandom() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->sum() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollection->mean() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public NumberCollection->average() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public NumberCollection->makeNormalDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Normal description No description available public NumberCollection->makePoissonDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Poisson description No description available public NumberCollection->makeExponentialDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Exponential description No description available public NumberCollection->makePolynomialFunction() return type Samsara\\Fermat\\Values\\Algebra\\PolynomialFunction description No description available public NumberCollection->offsetExists($offset) $offset description No description available return type mixed (assumed) description No description available public NumberCollection->offsetGet($offset) $offset description No description available return type mixed (assumed) description No description available public NumberCollection->offsetSet($offset, $value) $offset description No description available $value description No description available return type mixed (assumed) description No description available public NumberCollection->offsetUnset($offset) $offset description No description available return type mixed (assumed) description No description available public NumberCollection->getIterator() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Tuple/","text":"Samsara\\Fermat\\Types > Tuple No description available Methods Constructor public Tuple->__construct($data) $data description No description available return type mixed (assumed) description No description available Instanced Methods public Tuple->get(int $index) $index type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Tuple->set(int $index, ImmutableDecimal $value) $index type int description No description available $value type ImmutableDecimal description return type self description No description available public Tuple->all() return type array description No description available public Tuple->size() return type int description No description available public Tuple->hasIndex(int $index) $index type int description No description available return type bool description No description available This documentation was generated with Roster .","title":"Tuple"},{"location":"roster/latest/Samsara/Fermat/Types/Tuple/#samsarafermattypes-tuple","text":"No description available","title":"Samsara\\Fermat\\Types &gt; Tuple"},{"location":"roster/latest/Samsara/Fermat/Types/Tuple/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Tuple/#constructor","text":"public Tuple->__construct($data) $data description No description available return type mixed (assumed) description No description available","title":"Constructor"},{"location":"roster/latest/Samsara/Fermat/Types/Tuple/#instanced-methods","text":"public Tuple->get(int $index) $index type int description return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Tuple->set(int $index, ImmutableDecimal $value) $index type int description No description available $value type ImmutableDecimal description return type self description No description available public Tuple->all() return type array description No description available public Tuple->size() return type int description No description available public Tuple->hasIndex(int $index) $index type int description No description available return type bool description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Number/","text":"Samsara\\Fermat\\Types\\Base > Number No description available Inheritance Implements Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available Variables & Data Class Constants Number::INFINITY value 'INF' Number::NEG_INFINITY value '-INF' Properties protected Number->value type array value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Number->sign type bool value uninitialized Methods Constructor public Number->__construct() return type mixed (assumed) description No description available Instanced Methods public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->getValue() return type string description No description available Returns the current value as a string. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() return type string description No description available public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->getAsBaseTenRealNumber() return type string description No description available public Number->isComplex() return type bool description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available Inherited Methods public NumberInterface->abs() return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() return type string description No description available public NumberInterface->add($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() return type ?int description No description available This documentation was generated with Roster .","title":"Number"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Number/#samsarafermattypesbase-number","text":"No description available","title":"Samsara\\Fermat\\Types\\Base &gt; Number"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Number/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Number/#implements","text":"Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available","title":"Implements"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Number/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Number/#class-constants","text":"Number::INFINITY value 'INF' Number::NEG_INFINITY value '-INF'","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Number/#properties","text":"protected Number->value type array value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Number->sign type bool value uninitialized","title":"Properties"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Number/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Number/#constructor","text":"public Number->__construct() return type mixed (assumed) description No description available","title":"Constructor"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Number/#instanced-methods","text":"public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->getValue() return type string description No description available Returns the current value as a string. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() return type string description No description available public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->getAsBaseTenRealNumber() return type string description No description available public Number->isComplex() return type bool description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Number/#inherited-methods","text":"public NumberInterface->abs() return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() return type string description No description available public NumberInterface->add($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() return type ?int description No description available This documentation was generated with Roster .","title":"Inherited Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Selectable/","text":"Samsara\\Fermat\\Types\\Base > Selectable No description available Variables & Data Class Constants Selectable::CALC_MODE_FALLBACK value 0 Selectable::CALC_MODE_PRECISION value 1 Selectable::CALC_MODE_NATIVE value 2 This documentation was generated with Roster .","title":"Selectable"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Selectable/#samsarafermattypesbase-selectable","text":"No description available","title":"Samsara\\Fermat\\Types\\Base &gt; Selectable"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Selectable/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Selectable/#class-constants","text":"Selectable::CALC_MODE_FALLBACK value 0 Selectable::CALC_MODE_PRECISION value 1 Selectable::CALC_MODE_NATIVE value 2 This documentation was generated with Roster .","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Characteristics/BaseConversionInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Characteristics > BaseConversionInterface No description available Methods Instanced Methods public BaseConversionInterface->convertToBase(int $base) $base type int description return type DecimalInterface description No description available public BaseConversionInterface->getBase() return type int description No description available This documentation was generated with Roster .","title":"BaseConversionInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Characteristics/BaseConversionInterface/#samsarafermattypesbaseinterfacescharacteristics-baseconversioninterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Characteristics &gt; BaseConversionInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Characteristics/BaseConversionInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Characteristics/BaseConversionInterface/#instanced-methods","text":"public BaseConversionInterface->convertToBase(int $base) $base type int description return type DecimalInterface description No description available public BaseConversionInterface->getBase() return type int description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Groups/NumberCollectionInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups > NumberCollectionInterface No description available Methods Instanced Methods public NumberCollectionInterface->collect(array $numbers) $numbers type array description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->count() return type int description No description available public NumberCollectionInterface->toArray() return type array description No description available public NumberCollectionInterface->push(NumberInterface $number) $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->pop() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->unshift(NumberInterface $number) $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->shift() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->sort() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->reverse() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->multiply($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->divide($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->add($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->subtract($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->pow($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->exp($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->get(int $key) $key type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->getRandom() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->sum() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->mean() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->makeNormalDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Normal description No description available public NumberCollectionInterface->makePoissonDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Poisson description No description available public NumberCollectionInterface->makeExponentialDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Exponential description No description available public NumberCollectionInterface->makePolynomialFunction() return type Samsara\\Fermat\\Values\\Algebra\\PolynomialFunction description No description available This documentation was generated with Roster .","title":"NumberCollectionInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Groups/NumberCollectionInterface/#samsarafermattypesbaseinterfacesgroups-numbercollectioninterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups &gt; NumberCollectionInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Groups/NumberCollectionInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Groups/NumberCollectionInterface/#instanced-methods","text":"public NumberCollectionInterface->collect(array $numbers) $numbers type array description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->count() return type int description No description available public NumberCollectionInterface->toArray() return type array description No description available public NumberCollectionInterface->push(NumberInterface $number) $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->pop() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->unshift(NumberInterface $number) $number type NumberInterface description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->shift() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->sort() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->reverse() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->multiply($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->divide($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->add($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->subtract($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->pow($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->exp($number) $number description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Groups\\NumberCollectionInterface description No description available public NumberCollectionInterface->get(int $key) $key type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->getRandom() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->sum() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->mean() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available public NumberCollectionInterface->makeNormalDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Normal description No description available public NumberCollectionInterface->makePoissonDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Poisson description No description available public NumberCollectionInterface->makeExponentialDistribution() return type Samsara\\Fermat\\Provider\\Distribution\\Exponential description No description available public NumberCollectionInterface->makePolynomialFunction() return type Samsara\\Fermat\\Values\\Algebra\\PolynomialFunction description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/DecimalInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers > DecimalInterface No description available Inheritance Methods Instanced Methods public DecimalInterface->modulo($mod) $mod description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->continuousModulo($mod) $mod description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->getLeastCommonMultiple($num) $num description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->getGreatestCommonDivisor($num) $num description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->isNatural() return type bool description No description available public DecimalInterface->isWhole() return type bool description No description available public DecimalInterface->isInt() return type bool description No description available public DecimalInterface->asInt() return type int description No description available public DecimalInterface->isFloat() return type bool description No description available public DecimalInterface->asFloat() return type float description No description available public DecimalInterface->isPrime() return type bool description No description available public DecimalInterface->asPrimeFactors() return type Samsara\\Fermat\\Types\\NumberCollection description No description available public DecimalInterface->ceil() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->floor() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->factorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->subFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->doubleFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->semiFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sin(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cos(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->tan(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cot(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sec(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->csc(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arcsin(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccos(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arctan(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccot(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arcsec(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccsc(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sinh(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cosh(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->tanh(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->coth(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sech(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->csch(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->ln(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->log10(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->exp(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->round(int $decimals, int|null $mode) $decimals type int description No description available $mode type int|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->truncate(int $decimals) $decimals type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->roundToScale(int $scale, int|null $mode) $scale type int description No description available $mode type int|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->truncateToScale($scale) $scale description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->numberOfLeadingZeros() return type int description No description available Inherited Methods public SimpleNumberInterface->compare($value) $value description return type int description No description available public SimpleNumberInterface->isNegative() return type bool description No description available public SimpleNumberInterface->isPositive() return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber() return type string description No description available public SimpleNumberInterface->getValue() return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->abs() return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() return type string description No description available public NumberInterface->add($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() return type ?int description No description available public NumberInterface->isImaginary() return type bool description No description available public NumberInterface->isReal() return type bool description No description available public NumberInterface->asReal() return type string description No description available public NumberInterface->isComplex() return type bool description No description available public NumberInterface->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"DecimalInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/DecimalInterface/#samsarafermattypesbaseinterfacesnumbers-decimalinterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers &gt; DecimalInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/DecimalInterface/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/DecimalInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/DecimalInterface/#instanced-methods","text":"public DecimalInterface->modulo($mod) $mod description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->continuousModulo($mod) $mod description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->getLeastCommonMultiple($num) $num description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->getGreatestCommonDivisor($num) $num description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->isNatural() return type bool description No description available public DecimalInterface->isWhole() return type bool description No description available public DecimalInterface->isInt() return type bool description No description available public DecimalInterface->asInt() return type int description No description available public DecimalInterface->isFloat() return type bool description No description available public DecimalInterface->asFloat() return type float description No description available public DecimalInterface->isPrime() return type bool description No description available public DecimalInterface->asPrimeFactors() return type Samsara\\Fermat\\Types\\NumberCollection description No description available public DecimalInterface->ceil() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->floor() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->factorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->subFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->doubleFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->semiFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sin(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cos(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->tan(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cot(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sec(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->csc(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arcsin(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccos(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arctan(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccot(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arcsec(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->arccsc(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sinh(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->cosh(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->tanh(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->coth(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->sech(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->csch(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->ln(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->log10(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->exp(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->round(int $decimals, int|null $mode) $decimals type int description No description available $mode type int|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->truncate(int $decimals) $decimals type int description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->roundToScale(int $scale, int|null $mode) $scale type int description No description available $mode type int|null description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->truncateToScale($scale) $scale description return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public DecimalInterface->numberOfLeadingZeros() return type int description No description available","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/DecimalInterface/#inherited-methods","text":"public SimpleNumberInterface->compare($value) $value description return type int description No description available public SimpleNumberInterface->isNegative() return type bool description No description available public SimpleNumberInterface->isPositive() return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber() return type string description No description available public SimpleNumberInterface->getValue() return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->abs() return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() return type string description No description available public NumberInterface->add($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() return type ?int description No description available public NumberInterface->isImaginary() return type bool description No description available public NumberInterface->isReal() return type bool description No description available public NumberInterface->asReal() return type string description No description available public NumberInterface->isComplex() return type bool description No description available public NumberInterface->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"Inherited Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/FractionInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers > FractionInterface No description available Inheritance Methods Instanced Methods public FractionInterface->simplify() return type FractionInterface description No description available public FractionInterface->getNumerator() return type DecimalInterface description No description available public FractionInterface->getDenominator() return type DecimalInterface description No description available public FractionInterface->getSmallestCommonDenominator(FractionInterface $fraction) $fraction type FractionInterface description return type DecimalInterface description No description available public FractionInterface->asDecimal() return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available Inherited Methods public SimpleNumberInterface->compare($value) $value description return type int description No description available public SimpleNumberInterface->isNegative() return type bool description No description available public SimpleNumberInterface->isPositive() return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber() return type string description No description available public SimpleNumberInterface->getValue() return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->abs() return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() return type string description No description available public NumberInterface->add($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() return type ?int description No description available public NumberInterface->isImaginary() return type bool description No description available public NumberInterface->isReal() return type bool description No description available public NumberInterface->asReal() return type string description No description available public NumberInterface->isComplex() return type bool description No description available public NumberInterface->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"FractionInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/FractionInterface/#samsarafermattypesbaseinterfacesnumbers-fractioninterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers &gt; FractionInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/FractionInterface/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/FractionInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/FractionInterface/#instanced-methods","text":"public FractionInterface->simplify() return type FractionInterface description No description available public FractionInterface->getNumerator() return type DecimalInterface description No description available public FractionInterface->getDenominator() return type DecimalInterface description No description available public FractionInterface->getSmallestCommonDenominator(FractionInterface $fraction) $fraction type FractionInterface description return type DecimalInterface description No description available public FractionInterface->asDecimal() return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/FractionInterface/#inherited-methods","text":"public SimpleNumberInterface->compare($value) $value description return type int description No description available public SimpleNumberInterface->isNegative() return type bool description No description available public SimpleNumberInterface->isPositive() return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber() return type string description No description available public SimpleNumberInterface->getValue() return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->abs() return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() return type string description No description available public NumberInterface->add($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() return type ?int description No description available public NumberInterface->isImaginary() return type bool description No description available public NumberInterface->isReal() return type bool description No description available public NumberInterface->asReal() return type string description No description available public NumberInterface->isComplex() return type bool description No description available public NumberInterface->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"Inherited Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/NumberInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers > NumberInterface No description available Methods Instanced Methods public NumberInterface->abs() return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() return type string description No description available public NumberInterface->add($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() return type ?int description No description available public NumberInterface->isImaginary() return type bool description No description available public NumberInterface->isReal() return type bool description No description available public NumberInterface->asReal() return type string description No description available public NumberInterface->isComplex() return type bool description No description available public NumberInterface->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"NumberInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/NumberInterface/#samsarafermattypesbaseinterfacesnumbers-numberinterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers &gt; NumberInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/NumberInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/NumberInterface/#instanced-methods","text":"public NumberInterface->abs() return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() return type string description No description available public NumberInterface->add($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() return type ?int description No description available public NumberInterface->isImaginary() return type bool description No description available public NumberInterface->isReal() return type bool description No description available public NumberInterface->asReal() return type string description No description available public NumberInterface->isComplex() return type bool description No description available public NumberInterface->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/SimpleNumberInterface/","text":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers > SimpleNumberInterface No description available Inheritance Methods Instanced Methods public SimpleNumberInterface->compare($value) $value description return type int description No description available public SimpleNumberInterface->isNegative() return type bool description No description available public SimpleNumberInterface->isPositive() return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber() return type string description No description available public SimpleNumberInterface->getValue() return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available Inherited Methods public NumberInterface->abs() return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() return type string description No description available public NumberInterface->add($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() return type ?int description No description available public NumberInterface->isImaginary() return type bool description No description available public NumberInterface->isReal() return type bool description No description available public NumberInterface->asReal() return type string description No description available public NumberInterface->isComplex() return type bool description No description available public NumberInterface->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"SimpleNumberInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#samsarafermattypesbaseinterfacesnumbers-simplenumberinterface","text":"No description available","title":"Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers &gt; SimpleNumberInterface"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#instanced-methods","text":"public SimpleNumberInterface->compare($value) $value description return type int description No description available public SimpleNumberInterface->isNegative() return type bool description No description available public SimpleNumberInterface->isPositive() return type bool description No description available public SimpleNumberInterface->getAsBaseTenRealNumber() return type string description No description available public SimpleNumberInterface->getValue() return type string description No description available public SimpleNumberInterface->isGreaterThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThan(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isGreaterThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public SimpleNumberInterface->isLessThanOrEqualTo(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Base/Interfaces/Numbers/SimpleNumberInterface/#inherited-methods","text":"public NumberInterface->abs() return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->absValue() return type string description No description available public NumberInterface->add($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->subtract($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->multiply($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->divide($num, int|null $scale) $num description No description available $scale type int|null description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->pow($num) $num description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->sqrt(int? $scale) $scale type int? description return type NumberInterface|DecimalInterface|FractionInterface description No description available public NumberInterface->isEqual(int|string|NumberInterface $value) $value type int|string|NumberInterface description return type bool description No description available public NumberInterface->getScale() return type ?int description No description available public NumberInterface->isImaginary() return type bool description No description available public NumberInterface->isReal() return type bool description No description available public NumberInterface->asReal() return type string description No description available public NumberInterface->isComplex() return type bool description No description available public NumberInterface->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available This documentation was generated with Roster .","title":"Inherited Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ArithmeticSimpleTrait/","text":"Samsara\\Fermat\\Types\\Traits > ArithmeticSimpleTrait No description available Inheritance Has Traits ArithmeticSelectionTrait namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available ArithmeticScaleTrait namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available ArithmeticNativeTrait namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available Variables & Data Properties protected ArithmeticSimpleTrait->calcMode type mixed (assumed) value null protected ArithmeticSimpleTrait->modeRegister type mixed (assumed) value null Methods Static Methods protected ArithmeticSimpleTrait::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected ArithmeticSimpleTrait::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available Instanced Methods public ArithmeticSimpleTrait->add($num) $num description No description available return type mixed (assumed) description No description available public ArithmeticSimpleTrait->subtract($num) $num description No description available return type mixed (assumed) description No description available public ArithmeticSimpleTrait->multiply($num) $num description No description available return type mixed (assumed) description No description available public ArithmeticSimpleTrait->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public ArithmeticSimpleTrait->pow($num) $num description No description available return type mixed (assumed) description No description available public ArithmeticSimpleTrait->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected ArithmeticSimpleTrait->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->addScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->powScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->sqrtNative() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"ArithmeticSimpleTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ArithmeticSimpleTrait/#samsarafermattypestraits-arithmeticsimpletrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits &gt; ArithmeticSimpleTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ArithmeticSimpleTrait/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ArithmeticSimpleTrait/#has-traits","text":"ArithmeticSelectionTrait namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available ArithmeticScaleTrait namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available ArithmeticNativeTrait namespace Samsara\\Fermat\\Types\\Traits\\Arithmetic description No description available","title":"Has Traits"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ArithmeticSimpleTrait/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ArithmeticSimpleTrait/#properties","text":"protected ArithmeticSimpleTrait->calcMode type mixed (assumed) value null protected ArithmeticSimpleTrait->modeRegister type mixed (assumed) value null","title":"Properties"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ArithmeticSimpleTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ArithmeticSimpleTrait/#static-methods","text":"protected ArithmeticSimpleTrait::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected ArithmeticSimpleTrait::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ArithmeticSimpleTrait/#instanced-methods","text":"public ArithmeticSimpleTrait->add($num) $num description No description available return type mixed (assumed) description No description available public ArithmeticSimpleTrait->subtract($num) $num description No description available return type mixed (assumed) description No description available public ArithmeticSimpleTrait->multiply($num) $num description No description available return type mixed (assumed) description No description available public ArithmeticSimpleTrait->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public ArithmeticSimpleTrait->pow($num) $num description No description available return type mixed (assumed) description No description available public ArithmeticSimpleTrait->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected ArithmeticSimpleTrait->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->addScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->powScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSimpleTrait->sqrtNative() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ComparisonTrait/","text":"Samsara\\Fermat\\Types\\Traits > ComparisonTrait No description available Methods Instanced Methods public ComparisonTrait->isEqual($value) $value description No description available return type bool description No description available public ComparisonTrait->isGreaterThan($value) $value description No description available return type bool description No description available public ComparisonTrait->isLessThan($value) $value description No description available return type bool description No description available public ComparisonTrait->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public ComparisonTrait->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public ComparisonTrait->isNegative() return type bool description No description available public ComparisonTrait->isPositive() return type bool description No description available public ComparisonTrait->isNatural() return type bool description No description available public ComparisonTrait->isWhole() return type bool description No description available public ComparisonTrait->isInt() return type bool description No description available protected ComparisonTrait->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"ComparisonTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ComparisonTrait/#samsarafermattypestraits-comparisontrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits &gt; ComparisonTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ComparisonTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/ComparisonTrait/#instanced-methods","text":"public ComparisonTrait->isEqual($value) $value description No description available return type bool description No description available public ComparisonTrait->isGreaterThan($value) $value description No description available return type bool description No description available public ComparisonTrait->isLessThan($value) $value description No description available return type bool description No description available public ComparisonTrait->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public ComparisonTrait->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public ComparisonTrait->isNegative() return type bool description No description available public ComparisonTrait->isPositive() return type bool description No description available public ComparisonTrait->isNatural() return type bool description No description available public ComparisonTrait->isWhole() return type bool description No description available public ComparisonTrait->isInt() return type bool description No description available protected ComparisonTrait->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/IntegerMathTrait/","text":"Samsara\\Fermat\\Types\\Traits > IntegerMathTrait No description available Methods Instanced Methods public IntegerMathTrait->factorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->subFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->doubleFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->semiFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->getLeastCommonMultiple($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->getGreatestCommonDivisor($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->isPrime() return type bool description No description available This function is a PHP implementation of the function described at: http://stackoverflow.com/a/1801446 It is relatively simple to understand, which is why it was chosen as the implementation. However in the future, an implementation that is based on ECPP (such as the Goldwasser implementation) may be employed to improve speed. public IntegerMathTrait->asPrimeFactors() return type Samsara\\Fermat\\Types\\NumberCollection description No description available This documentation was generated with Roster .","title":"IntegerMathTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/IntegerMathTrait/#samsarafermattypestraits-integermathtrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits &gt; IntegerMathTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/IntegerMathTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/IntegerMathTrait/#instanced-methods","text":"public IntegerMathTrait->factorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->subFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->doubleFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->semiFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->getLeastCommonMultiple($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->getGreatestCommonDivisor($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public IntegerMathTrait->isPrime() return type bool description No description available This function is a PHP implementation of the function described at: http://stackoverflow.com/a/1801446 It is relatively simple to understand, which is why it was chosen as the implementation. However in the future, an implementation that is based on ECPP (such as the Goldwasser implementation) may be employed to improve speed. public IntegerMathTrait->asPrimeFactors() return type Samsara\\Fermat\\Types\\NumberCollection description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticNativeTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Arithmetic > ArithmeticNativeTrait No description available Methods Static Methods protected ArithmeticNativeTrait::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available Instanced Methods protected ArithmeticNativeTrait->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticNativeTrait->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticNativeTrait->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticNativeTrait->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticNativeTrait->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticNativeTrait->sqrtNative() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"ArithmeticNativeTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticNativeTrait/#samsarafermattypestraitsarithmetic-arithmeticnativetrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Arithmetic &gt; ArithmeticNativeTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticNativeTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticNativeTrait/#static-methods","text":"protected ArithmeticNativeTrait::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticNativeTrait/#instanced-methods","text":"protected ArithmeticNativeTrait->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticNativeTrait->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticNativeTrait->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticNativeTrait->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticNativeTrait->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticNativeTrait->sqrtNative() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticScaleTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Arithmetic > ArithmeticScaleTrait No description available Methods Instanced Methods protected ArithmeticScaleTrait->addScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticScaleTrait->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticScaleTrait->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticScaleTrait->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected ArithmeticScaleTrait->powScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticScaleTrait->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"ArithmeticScaleTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticScaleTrait/#samsarafermattypestraitsarithmetic-arithmeticscaletrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Arithmetic &gt; ArithmeticScaleTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticScaleTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticScaleTrait/#instanced-methods","text":"protected ArithmeticScaleTrait->addScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticScaleTrait->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticScaleTrait->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticScaleTrait->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected ArithmeticScaleTrait->powScale($num) $num description No description available return type mixed (assumed) description No description available protected ArithmeticScaleTrait->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticSelectionTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Arithmetic > ArithmeticSelectionTrait No description available Variables & Data Properties protected ArithmeticSelectionTrait->calcMode type mixed (assumed) value null protected ArithmeticSelectionTrait->modeRegister type mixed (assumed) value null Methods Static Methods protected ArithmeticSelectionTrait::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected ArithmeticSelectionTrait::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available Instanced Methods protected ArithmeticSelectionTrait->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected ArithmeticSelectionTrait->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"ArithmeticSelectionTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticSelectionTrait/#samsarafermattypestraitsarithmetic-arithmeticselectiontrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Arithmetic &gt; ArithmeticSelectionTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticSelectionTrait/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticSelectionTrait/#properties","text":"protected ArithmeticSelectionTrait->calcMode type mixed (assumed) value null protected ArithmeticSelectionTrait->modeRegister type mixed (assumed) value null","title":"Properties"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticSelectionTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticSelectionTrait/#static-methods","text":"protected ArithmeticSelectionTrait::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected ArithmeticSelectionTrait::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available","title":"Static Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Arithmetic/ArithmeticSelectionTrait/#instanced-methods","text":"protected ArithmeticSelectionTrait->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected ArithmeticSelectionTrait->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected ArithmeticSelectionTrait->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/InverseTrigonometryTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Decimal > InverseTrigonometryTrait No description available Methods Instanced Methods public InverseTrigonometryTrait->arcsin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arctan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arcsec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccsc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->roundToScale(int $scale, ?int $mode) $scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->truncateToScale(int $scale) $scale type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->getScale() return type ?int description No description available This documentation was generated with Roster .","title":"InverseTrigonometryTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/InverseTrigonometryTrait/#samsarafermattypestraitsdecimal-inversetrigonometrytrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Decimal &gt; InverseTrigonometryTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/InverseTrigonometryTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/InverseTrigonometryTrait/#instanced-methods","text":"public InverseTrigonometryTrait->arcsin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arctan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arcsec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->arccsc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->roundToScale(int $scale, ?int $mode) $scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->truncateToScale(int $scale) $scale type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public InverseTrigonometryTrait->getScale() return type ?int description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/LogTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Decimal > LogTrait No description available Methods Instanced Methods public LogTrait->exp(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogTrait->ln(int|null $scale, bool $round) $scale type int|null description The number of digits which should be accurate $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogTrait->log10(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available This documentation was generated with Roster .","title":"LogTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/LogTrait/#samsarafermattypestraitsdecimal-logtrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Decimal &gt; LogTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/LogTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/LogTrait/#instanced-methods","text":"public LogTrait->exp(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogTrait->ln(int|null $scale, bool $round) $scale type int|null description The number of digits which should be accurate $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public LogTrait->log10(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/ScaleTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Decimal > ScaleTrait No description available Variables & Data Properties protected ScaleTrait->scale type mixed (assumed) value null Methods Instanced Methods public ScaleTrait->getScale() return type ?int description No description available public ScaleTrait->round(int $decimals, ?int $mode) $decimals type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->truncate(int $decimals) $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->roundToScale(int $scale, ?int $mode) $scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->truncateToScale($scale) $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->ceil() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->floor() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->numberOfLeadingZeros() return type int description No description available The number of digits between the radix and the for non-zero digit in the decimal part. public ScaleTrait->numberOfTotalDigits() return type int description No description available The number of digits (excludes the radix). public ScaleTrait->numberOfIntDigits() return type int description No description available The number of digits in the integer part. public ScaleTrait->numberOfDecimalDigits() return type int description No description available The number of digits in the decimal part. public ScaleTrait->numberOfSigDecimalDigits() return type int description No description available The number of digits in the decimal part, excluding leading zeros. public ScaleTrait->asInt() return type int description No description available Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public ScaleTrait->isFloat() return type bool description No description available public ScaleTrait->asFloat() return type float description No description available protected ScaleTrait->reduceDecimals(array $decimalArray, $pos, $add) $decimalArray type array description No description available $pos description No description available $add description No description available return type mixed (assumed) description No description available protected ScaleTrait->getDecimalPart() return type mixed (assumed) description No description available protected ScaleTrait->getWholePart() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"ScaleTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/ScaleTrait/#samsarafermattypestraitsdecimal-scaletrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Decimal &gt; ScaleTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/ScaleTrait/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/ScaleTrait/#properties","text":"protected ScaleTrait->scale type mixed (assumed) value null","title":"Properties"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/ScaleTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/ScaleTrait/#instanced-methods","text":"public ScaleTrait->getScale() return type ?int description No description available public ScaleTrait->round(int $decimals, ?int $mode) $decimals type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->truncate(int $decimals) $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->roundToScale(int $scale, ?int $mode) $scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->truncateToScale($scale) $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->ceil() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->floor() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public ScaleTrait->numberOfLeadingZeros() return type int description No description available The number of digits between the radix and the for non-zero digit in the decimal part. public ScaleTrait->numberOfTotalDigits() return type int description No description available The number of digits (excludes the radix). public ScaleTrait->numberOfIntDigits() return type int description No description available The number of digits in the integer part. public ScaleTrait->numberOfDecimalDigits() return type int description No description available The number of digits in the decimal part. public ScaleTrait->numberOfSigDecimalDigits() return type int description No description available The number of digits in the decimal part, excluding leading zeros. public ScaleTrait->asInt() return type int description No description available Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public ScaleTrait->isFloat() return type bool description No description available public ScaleTrait->asFloat() return type float description No description available protected ScaleTrait->reduceDecimals(array $decimalArray, $pos, $add) $decimalArray type array description No description available $pos description No description available $add description No description available return type mixed (assumed) description No description available protected ScaleTrait->getDecimalPart() return type mixed (assumed) description No description available protected ScaleTrait->getWholePart() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/TrigonometryTrait/","text":"Samsara\\Fermat\\Types\\Traits\\Decimal > TrigonometryTrait No description available Methods Instanced Methods public TrigonometryTrait->sin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->tan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->csc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sinh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cosh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->tanh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->coth(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sech(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->csch(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available This documentation was generated with Roster .","title":"TrigonometryTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/TrigonometryTrait/#samsarafermattypestraitsdecimal-trigonometrytrait","text":"No description available","title":"Samsara\\Fermat\\Types\\Traits\\Decimal &gt; TrigonometryTrait"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/TrigonometryTrait/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Types/Traits/Decimal/TrigonometryTrait/#instanced-methods","text":"public TrigonometryTrait->sin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->tan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->csc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sinh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->cosh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->tanh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->coth(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->sech(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public TrigonometryTrait->csch(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available This documentation was generated with Roster .","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/","text":"Samsara\\Fermat\\Values > ImmutableDecimal No description available Inheritance Extends Samsara\\Fermat\\Types\\Decimal Implements SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available BaseConversionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Characteristics description No description available DecimalInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. Variables & Data Class Constants ImmutableDecimal::INFINITY value 'INF' ImmutableDecimal::NEG_INFINITY value '-INF' Inherited Properties protected Decimal->base type mixed (assumed) value null protected Number->value type array value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Number->sign type bool value uninitialized protected Decimal->calcMode type mixed (assumed) value null protected Decimal->modeRegister type mixed (assumed) value null protected Decimal->scale type mixed (assumed) value null Methods Constructor public Decimal->__construct($value, $scale, $base, bool $baseTenInput) $value description No description available $scale description No description available $base description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available Instanced Methods public ImmutableDecimal->continuousModulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available protected ImmutableDecimal->setValue(string $value, int|null $scale, int $base) $value type string description No description available $scale type int|null description No description available $base type int description return type ImmutableDecimal description No description available Inherited Static Methods protected Decimal::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Decimal::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available Inherited Methods public Decimal->modulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase() return type int description No description available Returns the current base that the value is in. public Decimal->getAsBaseTenRealNumber() return type string description No description available public Decimal->getValue($base) $base description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value) $value type NumberInterface|int|float|string description No description available return type int description No description available Returns the sort compare integer (-1, 0, 1) for the two numbers. public Decimal->convertToBase($base) $base description No description available return type NumberInterface description No description available Converts the object to a different base. public Decimal->abs() return type DecimalInterface|NumberInterface description No description available Returns the current object as the absolute value of itself. public Decimal->absValue() return type string description No description available Returns the string of the absolute value of the current object. public Decimal->isComplex() return type bool description No description available public Decimal->__toString() return type string description No description available public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available public Decimal->add($num) $num description No description available return type mixed (assumed) description No description available public Decimal->subtract($num) $num description No description available return type mixed (assumed) description No description available public Decimal->multiply($num) $num description No description available return type mixed (assumed) description No description available public Decimal->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->pow($num) $num description No description available return type mixed (assumed) description No description available public Decimal->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->isEqual($value) $value description No description available return type bool description No description available public Decimal->getScale() return type ?int description No description available public Decimal->isGreaterThan($value) $value description No description available return type bool description No description available public Decimal->isLessThan($value) $value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isNegative() return type bool description No description available public Decimal->isPositive() return type bool description No description available public Decimal->isNatural() return type bool description No description available public Decimal->isWhole() return type bool description No description available public Decimal->isInt() return type bool description No description available public Decimal->factorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime() return type bool description No description available This function is a PHP implementation of the function described at: http://stackoverflow.com/a/1801446 It is relatively simple to understand, which is why it was chosen as the implementation. However in the future, an implementation that is based on ECPP (such as the Goldwasser implementation) may be employed to improve speed. public Decimal->asPrimeFactors() return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, ?int $mode) $scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale) $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round) $scale type int|null description The number of digits which should be accurate $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->round(int $decimals, ?int $mode) $decimals type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals) $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros() return type int description No description available The number of digits between the radix and the for non-zero digit in the decimal part. public Decimal->numberOfTotalDigits() return type int description No description available The number of digits (excludes the radix). public Decimal->numberOfIntDigits() return type int description No description available The number of digits in the integer part. public Decimal->numberOfDecimalDigits() return type int description No description available The number of digits in the decimal part. public Decimal->numberOfSigDecimalDigits() return type int description No description available The number of digits in the decimal part, excluding leading zeros. public Decimal->asInt() return type int description No description available Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public Decimal->isFloat() return type bool description No description available public Decimal->asFloat() return type float description No description available protected Decimal->translateValue(string $value) $value type string description No description available return type mixed (assumed) description No description available protected Decimal->convertObject() return type mixed (assumed) description No description available protected Decimal->convertValue(string $value, int $oldBase, int $newBase) $value type string description No description available $oldBase type int description No description available $newBase type int description No description available return type mixed (assumed) description No description available protected Decimal->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Decimal->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtNative() return type mixed (assumed) description No description available protected Decimal->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available protected Decimal->reduceDecimals(array $decimalArray, $pos, $add) $decimalArray type array description No description available $pos description No description available $add description No description available return type mixed (assumed) description No description available protected Decimal->getDecimalPart() return type mixed (assumed) description No description available protected Decimal->getWholePart() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"ImmutableDecimal"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#samsarafermatvalues-immutabledecimal","text":"No description available","title":"Samsara\\Fermat\\Values &gt; ImmutableDecimal"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#extends","text":"Samsara\\Fermat\\Types\\Decimal","title":"Extends"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#implements","text":"SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available BaseConversionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Characteristics description No description available DecimalInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance.","title":"Implements"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#class-constants","text":"ImmutableDecimal::INFINITY value 'INF' ImmutableDecimal::NEG_INFINITY value '-INF'","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#inherited-properties","text":"protected Decimal->base type mixed (assumed) value null protected Number->value type array value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Number->sign type bool value uninitialized protected Decimal->calcMode type mixed (assumed) value null protected Decimal->modeRegister type mixed (assumed) value null protected Decimal->scale type mixed (assumed) value null","title":"Inherited Properties"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#constructor","text":"public Decimal->__construct($value, $scale, $base, bool $baseTenInput) $value description No description available $scale description No description available $base description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available","title":"Constructor"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#instanced-methods","text":"public ImmutableDecimal->continuousModulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available protected ImmutableDecimal->setValue(string $value, int|null $scale, int $base) $value type string description No description available $scale type int|null description No description available $base type int description return type ImmutableDecimal description No description available","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#inherited-static-methods","text":"protected Decimal::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Decimal::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available","title":"Inherited Static Methods"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableDecimal/#inherited-methods","text":"public Decimal->modulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase() return type int description No description available Returns the current base that the value is in. public Decimal->getAsBaseTenRealNumber() return type string description No description available public Decimal->getValue($base) $base description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value) $value type NumberInterface|int|float|string description No description available return type int description No description available Returns the sort compare integer (-1, 0, 1) for the two numbers. public Decimal->convertToBase($base) $base description No description available return type NumberInterface description No description available Converts the object to a different base. public Decimal->abs() return type DecimalInterface|NumberInterface description No description available Returns the current object as the absolute value of itself. public Decimal->absValue() return type string description No description available Returns the string of the absolute value of the current object. public Decimal->isComplex() return type bool description No description available public Decimal->__toString() return type string description No description available public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available public Decimal->add($num) $num description No description available return type mixed (assumed) description No description available public Decimal->subtract($num) $num description No description available return type mixed (assumed) description No description available public Decimal->multiply($num) $num description No description available return type mixed (assumed) description No description available public Decimal->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->pow($num) $num description No description available return type mixed (assumed) description No description available public Decimal->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->isEqual($value) $value description No description available return type bool description No description available public Decimal->getScale() return type ?int description No description available public Decimal->isGreaterThan($value) $value description No description available return type bool description No description available public Decimal->isLessThan($value) $value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isNegative() return type bool description No description available public Decimal->isPositive() return type bool description No description available public Decimal->isNatural() return type bool description No description available public Decimal->isWhole() return type bool description No description available public Decimal->isInt() return type bool description No description available public Decimal->factorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime() return type bool description No description available This function is a PHP implementation of the function described at: http://stackoverflow.com/a/1801446 It is relatively simple to understand, which is why it was chosen as the implementation. However in the future, an implementation that is based on ECPP (such as the Goldwasser implementation) may be employed to improve speed. public Decimal->asPrimeFactors() return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, ?int $mode) $scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale) $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round) $scale type int|null description The number of digits which should be accurate $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->round(int $decimals, ?int $mode) $decimals type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals) $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros() return type int description No description available The number of digits between the radix and the for non-zero digit in the decimal part. public Decimal->numberOfTotalDigits() return type int description No description available The number of digits (excludes the radix). public Decimal->numberOfIntDigits() return type int description No description available The number of digits in the integer part. public Decimal->numberOfDecimalDigits() return type int description No description available The number of digits in the decimal part. public Decimal->numberOfSigDecimalDigits() return type int description No description available The number of digits in the decimal part, excluding leading zeros. public Decimal->asInt() return type int description No description available Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public Decimal->isFloat() return type bool description No description available public Decimal->asFloat() return type float description No description available protected Decimal->translateValue(string $value) $value type string description No description available return type mixed (assumed) description No description available protected Decimal->convertObject() return type mixed (assumed) description No description available protected Decimal->convertValue(string $value, int $oldBase, int $newBase) $value type string description No description available $oldBase type int description No description available $newBase type int description No description available return type mixed (assumed) description No description available protected Decimal->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Decimal->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtNative() return type mixed (assumed) description No description available protected Decimal->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available protected Decimal->reduceDecimals(array $decimalArray, $pos, $add) $decimalArray type array description No description available $pos description No description available $add description No description available return type mixed (assumed) description No description available protected Decimal->getDecimalPart() return type mixed (assumed) description No description available protected Decimal->getWholePart() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Inherited Methods"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/","text":"Samsara\\Fermat\\Values > ImmutableFraction No description available Inheritance Extends Samsara\\Fermat\\Types\\Fraction Implements SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available FractionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. Variables & Data Class Constants ImmutableFraction::INFINITY value 'INF' ImmutableFraction::NEG_INFINITY value '-INF' Inherited Properties protected Fraction->base type int value uninitialized protected Fraction->value type array value uninitialized protected Fraction->sign type bool value uninitialized protected Fraction->scale type ?int value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Fraction->calcMode type mixed (assumed) value null protected Fraction->modeRegister type mixed (assumed) value null Methods Constructor public Fraction->__construct($numerator, $denominator, int $base) $numerator description No description available $denominator description No description available $base type int description return type mixed (assumed) description No description available Fraction constructor. Instanced Methods protected ImmutableFraction->setValue(Samsara\\Fermat\\Values\\ImmutableDecimal $numerator, Samsara\\Fermat\\Values\\ImmutableDecimal $denominator) $numerator type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available $denominator type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available return type Samsara\\Fermat\\Values\\ImmutableFraction description No description available Inherited Static Methods protected Fraction::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Fraction::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available Inherited Methods public Fraction->getValue() return type string description No description available public Fraction->getScale() return type ?int description No description available public Fraction->getBase() return type mixed (assumed) description No description available public Fraction->getNumerator() return type mixed (assumed) description No description available public Fraction->getDenominator() return type mixed (assumed) description No description available public Fraction->isComplex() return type bool description No description available public Fraction->simplify() return type mixed (assumed) description No description available public Fraction->abs() return type mixed (assumed) description No description available public Fraction->absValue() return type string description No description available public Fraction->compare($number) $number description No description available return type int description No description available public Fraction->asDecimal($scale) $scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor() return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available return type mixed (assumed) description No description available public Fraction->getAsBaseTenRealNumber() return type string description No description available public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() return type string description No description available public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available public Fraction->add($num) $num description No description available return type mixed (assumed) description No description available public Fraction->subtract($num) $num description No description available return type mixed (assumed) description No description available public Fraction->multiply($num) $num description No description available return type mixed (assumed) description No description available public Fraction->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->pow($num) $num description No description available return type mixed (assumed) description No description available public Fraction->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->isEqual($value) $value description No description available return type bool description No description available public Fraction->isGreaterThan($value) $value description No description available return type bool description No description available public Fraction->isLessThan($value) $value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isNegative() return type bool description No description available public Fraction->isPositive() return type bool description No description available public Fraction->isNatural() return type bool description No description available public Fraction->isWhole() return type bool description No description available public Fraction->isInt() return type bool description No description available protected Fraction->getNumeratorsWithSameDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction, ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface $lcm) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available $lcm type ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available return type mixed (assumed) description No description available protected Fraction->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Fraction->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtNative() return type mixed (assumed) description No description available protected Fraction->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"ImmutableFraction"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#samsarafermatvalues-immutablefraction","text":"No description available","title":"Samsara\\Fermat\\Values &gt; ImmutableFraction"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#extends","text":"Samsara\\Fermat\\Types\\Fraction","title":"Extends"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#implements","text":"SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available FractionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance.","title":"Implements"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#class-constants","text":"ImmutableFraction::INFINITY value 'INF' ImmutableFraction::NEG_INFINITY value '-INF'","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#inherited-properties","text":"protected Fraction->base type int value uninitialized protected Fraction->value type array value uninitialized protected Fraction->sign type bool value uninitialized protected Fraction->scale type ?int value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Fraction->calcMode type mixed (assumed) value null protected Fraction->modeRegister type mixed (assumed) value null","title":"Inherited Properties"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#constructor","text":"public Fraction->__construct($numerator, $denominator, int $base) $numerator description No description available $denominator description No description available $base type int description return type mixed (assumed) description No description available Fraction constructor.","title":"Constructor"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#instanced-methods","text":"protected ImmutableFraction->setValue(Samsara\\Fermat\\Values\\ImmutableDecimal $numerator, Samsara\\Fermat\\Values\\ImmutableDecimal $denominator) $numerator type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available $denominator type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available return type Samsara\\Fermat\\Values\\ImmutableFraction description No description available","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#inherited-static-methods","text":"protected Fraction::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Fraction::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available","title":"Inherited Static Methods"},{"location":"roster/latest/Samsara/Fermat/Values/ImmutableFraction/#inherited-methods","text":"public Fraction->getValue() return type string description No description available public Fraction->getScale() return type ?int description No description available public Fraction->getBase() return type mixed (assumed) description No description available public Fraction->getNumerator() return type mixed (assumed) description No description available public Fraction->getDenominator() return type mixed (assumed) description No description available public Fraction->isComplex() return type bool description No description available public Fraction->simplify() return type mixed (assumed) description No description available public Fraction->abs() return type mixed (assumed) description No description available public Fraction->absValue() return type string description No description available public Fraction->compare($number) $number description No description available return type int description No description available public Fraction->asDecimal($scale) $scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor() return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available return type mixed (assumed) description No description available public Fraction->getAsBaseTenRealNumber() return type string description No description available public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() return type string description No description available public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available public Fraction->add($num) $num description No description available return type mixed (assumed) description No description available public Fraction->subtract($num) $num description No description available return type mixed (assumed) description No description available public Fraction->multiply($num) $num description No description available return type mixed (assumed) description No description available public Fraction->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->pow($num) $num description No description available return type mixed (assumed) description No description available public Fraction->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->isEqual($value) $value description No description available return type bool description No description available public Fraction->isGreaterThan($value) $value description No description available return type bool description No description available public Fraction->isLessThan($value) $value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isNegative() return type bool description No description available public Fraction->isPositive() return type bool description No description available public Fraction->isNatural() return type bool description No description available public Fraction->isWhole() return type bool description No description available public Fraction->isInt() return type bool description No description available protected Fraction->getNumeratorsWithSameDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction, ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface $lcm) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available $lcm type ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available return type mixed (assumed) description No description available protected Fraction->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Fraction->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtNative() return type mixed (assumed) description No description available protected Fraction->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Inherited Methods"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/","text":"Samsara\\Fermat\\Values > MutableDecimal No description available Inheritance Extends Samsara\\Fermat\\Types\\Decimal Implements SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available BaseConversionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Characteristics description No description available DecimalInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. Variables & Data Class Constants MutableDecimal::INFINITY value 'INF' MutableDecimal::NEG_INFINITY value '-INF' Inherited Properties protected Decimal->base type mixed (assumed) value null protected Number->value type array value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Number->sign type bool value uninitialized protected Decimal->calcMode type mixed (assumed) value null protected Decimal->modeRegister type mixed (assumed) value null protected Decimal->scale type mixed (assumed) value null Methods Constructor public Decimal->__construct($value, $scale, $base, bool $baseTenInput) $value description No description available $scale description No description available $base description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available Instanced Methods public MutableDecimal->continuousModulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available protected MutableDecimal->setValue(string $value, ?int $scale, int $base) $value type string description $scale type ?int description No description available $base type int description No description available return type self description No description available Inherited Static Methods protected Decimal::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Decimal::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available Inherited Methods public Decimal->modulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase() return type int description No description available Returns the current base that the value is in. public Decimal->getAsBaseTenRealNumber() return type string description No description available public Decimal->getValue($base) $base description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value) $value type NumberInterface|int|float|string description No description available return type int description No description available Returns the sort compare integer (-1, 0, 1) for the two numbers. public Decimal->convertToBase($base) $base description No description available return type NumberInterface description No description available Converts the object to a different base. public Decimal->abs() return type DecimalInterface|NumberInterface description No description available Returns the current object as the absolute value of itself. public Decimal->absValue() return type string description No description available Returns the string of the absolute value of the current object. public Decimal->isComplex() return type bool description No description available public Decimal->__toString() return type string description No description available public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available public Decimal->add($num) $num description No description available return type mixed (assumed) description No description available public Decimal->subtract($num) $num description No description available return type mixed (assumed) description No description available public Decimal->multiply($num) $num description No description available return type mixed (assumed) description No description available public Decimal->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->pow($num) $num description No description available return type mixed (assumed) description No description available public Decimal->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->isEqual($value) $value description No description available return type bool description No description available public Decimal->getScale() return type ?int description No description available public Decimal->isGreaterThan($value) $value description No description available return type bool description No description available public Decimal->isLessThan($value) $value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isNegative() return type bool description No description available public Decimal->isPositive() return type bool description No description available public Decimal->isNatural() return type bool description No description available public Decimal->isWhole() return type bool description No description available public Decimal->isInt() return type bool description No description available public Decimal->factorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime() return type bool description No description available This function is a PHP implementation of the function described at: http://stackoverflow.com/a/1801446 It is relatively simple to understand, which is why it was chosen as the implementation. However in the future, an implementation that is based on ECPP (such as the Goldwasser implementation) may be employed to improve speed. public Decimal->asPrimeFactors() return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, ?int $mode) $scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale) $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round) $scale type int|null description The number of digits which should be accurate $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->round(int $decimals, ?int $mode) $decimals type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals) $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros() return type int description No description available The number of digits between the radix and the for non-zero digit in the decimal part. public Decimal->numberOfTotalDigits() return type int description No description available The number of digits (excludes the radix). public Decimal->numberOfIntDigits() return type int description No description available The number of digits in the integer part. public Decimal->numberOfDecimalDigits() return type int description No description available The number of digits in the decimal part. public Decimal->numberOfSigDecimalDigits() return type int description No description available The number of digits in the decimal part, excluding leading zeros. public Decimal->asInt() return type int description No description available Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public Decimal->isFloat() return type bool description No description available public Decimal->asFloat() return type float description No description available protected Decimal->translateValue(string $value) $value type string description No description available return type mixed (assumed) description No description available protected Decimal->convertObject() return type mixed (assumed) description No description available protected Decimal->convertValue(string $value, int $oldBase, int $newBase) $value type string description No description available $oldBase type int description No description available $newBase type int description No description available return type mixed (assumed) description No description available protected Decimal->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Decimal->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtNative() return type mixed (assumed) description No description available protected Decimal->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available protected Decimal->reduceDecimals(array $decimalArray, $pos, $add) $decimalArray type array description No description available $pos description No description available $add description No description available return type mixed (assumed) description No description available protected Decimal->getDecimalPart() return type mixed (assumed) description No description available protected Decimal->getWholePart() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"MutableDecimal"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#samsarafermatvalues-mutabledecimal","text":"No description available","title":"Samsara\\Fermat\\Values &gt; MutableDecimal"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#extends","text":"Samsara\\Fermat\\Types\\Decimal","title":"Extends"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#implements","text":"SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available BaseConversionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Characteristics description No description available DecimalInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance.","title":"Implements"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#class-constants","text":"MutableDecimal::INFINITY value 'INF' MutableDecimal::NEG_INFINITY value '-INF'","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#inherited-properties","text":"protected Decimal->base type mixed (assumed) value null protected Number->value type array value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Number->sign type bool value uninitialized protected Decimal->calcMode type mixed (assumed) value null protected Decimal->modeRegister type mixed (assumed) value null protected Decimal->scale type mixed (assumed) value null","title":"Inherited Properties"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#constructor","text":"public Decimal->__construct($value, $scale, $base, bool $baseTenInput) $value description No description available $scale description No description available $base description No description available $baseTenInput type bool description No description available return type mixed (assumed) description No description available","title":"Constructor"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#instanced-methods","text":"public MutableDecimal->continuousModulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available protected MutableDecimal->setValue(string $value, ?int $scale, int $base) $value type string description $scale type ?int description No description available $base type int description No description available return type self description No description available","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#inherited-static-methods","text":"protected Decimal::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Decimal::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Decimal::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available","title":"Inherited Static Methods"},{"location":"roster/latest/Samsara/Fermat/Values/MutableDecimal/#inherited-methods","text":"public Decimal->modulo($mod) $mod description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getBase() return type int description No description available Returns the current base that the value is in. public Decimal->getAsBaseTenRealNumber() return type string description No description available public Decimal->getValue($base) $base description No description available return type string description No description available public Decimal->compare(NumberInterface|int|float|string $value) $value type NumberInterface|int|float|string description No description available return type int description No description available Returns the sort compare integer (-1, 0, 1) for the two numbers. public Decimal->convertToBase($base) $base description No description available return type NumberInterface description No description available Converts the object to a different base. public Decimal->abs() return type DecimalInterface|NumberInterface description No description available Returns the current object as the absolute value of itself. public Decimal->absValue() return type string description No description available Returns the string of the absolute value of the current object. public Decimal->isComplex() return type bool description No description available public Decimal->__toString() return type string description No description available public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available public Decimal->add($num) $num description No description available return type mixed (assumed) description No description available public Decimal->subtract($num) $num description No description available return type mixed (assumed) description No description available public Decimal->multiply($num) $num description No description available return type mixed (assumed) description No description available public Decimal->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->pow($num) $num description No description available return type mixed (assumed) description No description available public Decimal->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Decimal->isEqual($value) $value description No description available return type bool description No description available public Decimal->getScale() return type ?int description No description available public Decimal->isGreaterThan($value) $value description No description available return type bool description No description available public Decimal->isLessThan($value) $value description No description available return type bool description No description available public Decimal->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Decimal->isNegative() return type bool description No description available public Decimal->isPositive() return type bool description No description available public Decimal->isNatural() return type bool description No description available public Decimal->isWhole() return type bool description No description available public Decimal->isInt() return type bool description No description available public Decimal->factorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->subFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->doubleFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->semiFactorial() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getLeastCommonMultiple($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->getGreatestCommonDivisor($num) $num description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->isPrime() return type bool description No description available This function is a PHP implementation of the function described at: http://stackoverflow.com/a/1801446 It is relatively simple to understand, which is why it was chosen as the implementation. However in the future, an implementation that is based on ECPP (such as the Goldwasser implementation) may be employed to improve speed. public Decimal->asPrimeFactors() return type Samsara\\Fermat\\Types\\NumberCollection description No description available public Decimal->sin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sinh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->cosh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->tanh(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->coth(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->sech(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->csch(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsin(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccos(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arctan(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccot(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arcsec(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->arccsc(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->roundToScale(int $scale, ?int $mode) $scale type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncateToScale($scale) $scale description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->exp(?int $scale, bool $round) $scale type ?int description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ln(int|null $scale, bool $round) $scale type int|null description The number of digits which should be accurate $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->log10(int|null $scale, bool $round) $scale type int|null description No description available $round type bool description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->round(int $decimals, ?int $mode) $decimals type int description No description available $mode type ?int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->truncate(int $decimals) $decimals type int description No description available return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->ceil() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->floor() return type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available public Decimal->numberOfLeadingZeros() return type int description No description available The number of digits between the radix and the for non-zero digit in the decimal part. public Decimal->numberOfTotalDigits() return type int description No description available The number of digits (excludes the radix). public Decimal->numberOfIntDigits() return type int description No description available The number of digits in the integer part. public Decimal->numberOfDecimalDigits() return type int description No description available The number of digits in the decimal part. public Decimal->numberOfSigDecimalDigits() return type int description No description available The number of digits in the decimal part, excluding leading zeros. public Decimal->asInt() return type int description No description available Returns the current value as an integer if it is within the max a min int values on the current system. Uses the intval() function to convert the string to an integer type. public Decimal->isFloat() return type bool description No description available public Decimal->asFloat() return type float description No description available protected Decimal->translateValue(string $value) $value type string description No description available return type mixed (assumed) description No description available protected Decimal->convertObject() return type mixed (assumed) description No description available protected Decimal->convertValue(string $value, int $oldBase, int $newBase) $value type string description No description available $oldBase type int description No description available $newBase type int description No description available return type mixed (assumed) description No description available protected Decimal->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Decimal->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Decimal->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Decimal->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Decimal->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Decimal->sqrtNative() return type mixed (assumed) description No description available protected Decimal->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available protected Decimal->reduceDecimals(array $decimalArray, $pos, $add) $decimalArray type array description No description available $pos description No description available $add description No description available return type mixed (assumed) description No description available protected Decimal->getDecimalPart() return type mixed (assumed) description No description available protected Decimal->getWholePart() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Inherited Methods"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/","text":"Samsara\\Fermat\\Values > MutableFraction No description available Inheritance Extends Samsara\\Fermat\\Types\\Fraction Implements SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available FractionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance. Variables & Data Class Constants MutableFraction::INFINITY value 'INF' MutableFraction::NEG_INFINITY value '-INF' Inherited Properties protected Fraction->base type int value uninitialized protected Fraction->value type array value uninitialized protected Fraction->sign type bool value uninitialized protected Fraction->scale type ?int value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Fraction->calcMode type mixed (assumed) value null protected Fraction->modeRegister type mixed (assumed) value null Methods Constructor public Fraction->__construct($numerator, $denominator, int $base) $numerator description No description available $denominator description No description available $base type int description return type mixed (assumed) description No description available Fraction constructor. Instanced Methods protected MutableFraction->setValue(Samsara\\Fermat\\Values\\ImmutableDecimal $numerator, Samsara\\Fermat\\Values\\ImmutableDecimal $denominator) $numerator type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available $denominator type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available return type self description No description available Inherited Static Methods protected Fraction::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Fraction::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available Inherited Methods public Fraction->getValue() return type string description No description available public Fraction->getScale() return type ?int description No description available public Fraction->getBase() return type mixed (assumed) description No description available public Fraction->getNumerator() return type mixed (assumed) description No description available public Fraction->getDenominator() return type mixed (assumed) description No description available public Fraction->isComplex() return type bool description No description available public Fraction->simplify() return type mixed (assumed) description No description available public Fraction->abs() return type mixed (assumed) description No description available public Fraction->absValue() return type string description No description available public Fraction->compare($number) $number description No description available return type int description No description available public Fraction->asDecimal($scale) $scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor() return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available return type mixed (assumed) description No description available public Fraction->getAsBaseTenRealNumber() return type string description No description available public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() return type string description No description available public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available public Fraction->add($num) $num description No description available return type mixed (assumed) description No description available public Fraction->subtract($num) $num description No description available return type mixed (assumed) description No description available public Fraction->multiply($num) $num description No description available return type mixed (assumed) description No description available public Fraction->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->pow($num) $num description No description available return type mixed (assumed) description No description available public Fraction->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->isEqual($value) $value description No description available return type bool description No description available public Fraction->isGreaterThan($value) $value description No description available return type bool description No description available public Fraction->isLessThan($value) $value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isNegative() return type bool description No description available public Fraction->isPositive() return type bool description No description available public Fraction->isNatural() return type bool description No description available public Fraction->isWhole() return type bool description No description available public Fraction->isInt() return type bool description No description available protected Fraction->getNumeratorsWithSameDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction, ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface $lcm) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available $lcm type ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available return type mixed (assumed) description No description available protected Fraction->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Fraction->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtNative() return type mixed (assumed) description No description available protected Fraction->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"MutableFraction"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#samsarafermatvalues-mutablefraction","text":"No description available","title":"Samsara\\Fermat\\Values &gt; MutableFraction"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#inheritance","text":"","title":"Inheritance"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#extends","text":"Samsara\\Fermat\\Types\\Fraction","title":"Extends"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#implements","text":"SimpleNumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available FractionInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Stringable namespace description No description available NumberInterface namespace Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers description No description available Hashable namespace Ds description Hashable is an interface which allows objects to be used as keys. It\u2019s an alternative to spl_object_hash(), which determines an object\u2019s hash based on its handle: this means that two objects that are considered equal by an implicit definition would not treated as equal because they are not the same instance.","title":"Implements"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#variables-data","text":"","title":"Variables &amp; Data"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#class-constants","text":"MutableFraction::INFINITY value 'INF' MutableFraction::NEG_INFINITY value '-INF'","title":"Class Constants"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#inherited-properties","text":"protected Fraction->base type int value uninitialized protected Fraction->value type array value uninitialized protected Fraction->sign type bool value uninitialized protected Fraction->scale type ?int value uninitialized protected Number->extensions type mixed (assumed) value true protected Number->imaginary type mixed (assumed) value null protected Fraction->calcMode type mixed (assumed) value null protected Fraction->modeRegister type mixed (assumed) value null","title":"Inherited Properties"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#methods","text":"","title":"Methods"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#constructor","text":"public Fraction->__construct($numerator, $denominator, int $base) $numerator description No description available $denominator description No description available $base type int description return type mixed (assumed) description No description available Fraction constructor.","title":"Constructor"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#instanced-methods","text":"protected MutableFraction->setValue(Samsara\\Fermat\\Values\\ImmutableDecimal $numerator, Samsara\\Fermat\\Values\\ImmutableDecimal $denominator) $numerator type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available $denominator type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available return type self description No description available","title":"Instanced Methods"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#inherited-static-methods","text":"protected Fraction::stringSelector(string $input) $input type string description No description available return type CoordinateInterface|FractionInterface|NumberInterface|ComplexNumber|CartesianCoordinate|ImmutableDecimal|ImmutableFraction|MutableDecimal|MutableFraction description No description available protected Fraction::rightSelector($left, $right, $identity) $left description No description available $right description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::leftSelector($left, $identity) $left description No description available $identity description No description available return type mixed (assumed) description No description available protected Fraction::translateToNative(DecimalInterface $num) $num type DecimalInterface description No description available return type float|int description No description available","title":"Inherited Static Methods"},{"location":"roster/latest/Samsara/Fermat/Values/MutableFraction/#inherited-methods","text":"public Fraction->getValue() return type string description No description available public Fraction->getScale() return type ?int description No description available public Fraction->getBase() return type mixed (assumed) description No description available public Fraction->getNumerator() return type mixed (assumed) description No description available public Fraction->getDenominator() return type mixed (assumed) description No description available public Fraction->isComplex() return type bool description No description available public Fraction->simplify() return type mixed (assumed) description No description available public Fraction->abs() return type mixed (assumed) description No description available public Fraction->absValue() return type string description No description available public Fraction->compare($number) $number description No description available return type int description No description available public Fraction->asDecimal($scale) $scale description No description available return type Samsara\\Fermat\\Values\\ImmutableDecimal description No description available public Fraction->getGreatestCommonDivisor() return type NumberInterface description No description available public Fraction->getSmallestCommonDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available return type mixed (assumed) description No description available public Fraction->getAsBaseTenRealNumber() return type string description No description available public Number->setMode(int $mode) $mode type int description No description available return type self description No description available Allows you to set a mode on a number to select the calculation methods. MODE_PRECISION: Use what is necessary to provide an answer that is accurate to the scale setting. MODE_NATIVE: Use built-in functions to perform the math, and accept whatever rounding or truncation this might cause. public Number->setExtensions(bool $flag) $flag type bool description No description available return type self description No description available Allows the object to ignore PHP extensions (such a GMP) and use only the Fermat implementations. NOTE: This does not ignore ext-bcmath or ext-decimal, as those are necessary for the string math itself. public Number->__toString() return type string description No description available public Number->hash() return type string description No description available Implemented to satisfy Hashable implementation public Number->equals(mixed $object) $object type mixed description No description available return type bool description No description available Implemented to satisfy Hashable implementation public Number->isImaginary() return type bool description No description available This function returns true if the number is imaginary, and false in the number is real or complex public Number->isReal() return type bool description No description available This function returns true if the number is real, and false if the number is imaginary or complex public Number->asReal() return type string description No description available public Number->asComplex() return type Samsara\\Fermat\\Types\\ComplexNumber description No description available public Fraction->add($num) $num description No description available return type mixed (assumed) description No description available public Fraction->subtract($num) $num description No description available return type mixed (assumed) description No description available public Fraction->multiply($num) $num description No description available return type mixed (assumed) description No description available public Fraction->divide($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->pow($num) $num description No description available return type mixed (assumed) description No description available public Fraction->sqrt(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available public Fraction->isEqual($value) $value description No description available return type bool description No description available public Fraction->isGreaterThan($value) $value description No description available return type bool description No description available public Fraction->isLessThan($value) $value description No description available return type bool description No description available public Fraction->isGreaterThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isLessThanOrEqualTo($value) $value description No description available return type bool description No description available public Fraction->isNegative() return type bool description No description available public Fraction->isPositive() return type bool description No description available public Fraction->isNatural() return type bool description No description available public Fraction->isWhole() return type bool description No description available public Fraction->isInt() return type bool description No description available protected Fraction->getNumeratorsWithSameDenominator(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface $fraction, ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface $lcm) $fraction type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\FractionInterface description No description available $lcm type ?Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\NumberInterface description No description available return type mixed (assumed) description No description available protected Fraction->translateToParts($left, $right, int $identity) $left description No description available $right description No description available $identity type int description return type array description No description available protected Fraction->addSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplySelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num, int $scale) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->powSelector(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtSelector(int $scale) $scale type int description No description available return type mixed (assumed) description No description available protected Fraction->addScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->subtractScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->multiplyScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->divideScale($num, ?int $scale) $num description No description available $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->powScale($num) $num description No description available return type mixed (assumed) description No description available protected Fraction->sqrtScale(?int $scale) $scale type ?int description No description available return type mixed (assumed) description No description available protected Fraction->addNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->subtractNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->multiplyNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->divideNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->powNative(Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface $num) $num type Samsara\\Fermat\\Types\\Base\\Interfaces\\Numbers\\DecimalInterface description No description available return type mixed (assumed) description No description available protected Fraction->sqrtNative() return type mixed (assumed) description No description available protected Fraction->checkComparisonTraitAndInterface() return type mixed (assumed) description No description available This documentation was generated with Roster .","title":"Inherited Methods"}]}